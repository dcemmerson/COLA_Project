!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/js/",r(r.s=180)}([function(t,e,r){"use strict";var n,i=r(74),s=r(7),o=r(1),a=r(8),c=r(5),l=r(27),u=r(9),h=r(15),d=r(11).f,p=r(37),f=r(29),g=r(3),m=r(42),y=o.Int8Array,v=y&&y.prototype,b=o.Uint8ClampedArray,A=b&&b.prototype,_=y&&p(y),w=v&&p(v),x=Object.prototype,S=x.isPrototypeOf,E=g("toStringTag"),C=m("TYPED_ARRAY_TAG"),T=i&&!!f&&"Opera"!==l(o.opera),R=!1,k={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},P=function(t){return a(t)&&c(k,l(t))};for(n in k)o[n]||(T=!1);if((!T||"function"!=typeof _||_===Function.prototype)&&(_=function(){throw TypeError("Incorrect invocation")},T))for(n in k)o[n]&&f(o[n],_);if((!T||!w||w===x)&&(w=_.prototype,T))for(n in k)o[n]&&f(o[n].prototype,w);if(T&&p(A)!==w&&f(A,w),s&&!c(w,E))for(n in R=!0,d(w,E,{get:function(){return a(this)?this[C]:void 0}}),k)o[n]&&u(o[n],C,n);t.exports={NATIVE_ARRAY_BUFFER_VIEWS:T,TYPED_ARRAY_TAG:R&&C,aTypedArray:function(t){if(P(t))return t;throw TypeError("Target is not a typed array")},aTypedArrayConstructor:function(t){if(f){if(S.call(_,t))return t}else for(var e in k)if(c(k,n)){var r=o[e];if(r&&(t===r||S.call(r,t)))return t}throw TypeError("Target is not a typed array constructor")},exportTypedArrayMethod:function(t,e,r){if(s){if(r)for(var n in k){var i=o[n];i&&c(i.prototype,t)&&delete i.prototype[t]}w[t]&&!r||h(w,t,r?e:T&&v[t]||e)}},exportTypedArrayStaticMethod:function(t,e,r){var n,i;if(s){if(f){if(r)for(n in k)(i=o[n])&&c(i,t)&&delete i[t];if(_[t]&&!r)return;try{return h(_,t,r?e:T&&y[t]||e)}catch(t){}}for(n in k)!(i=o[n])||i[t]&&!r||h(i,t,e)}},isView:function(t){var e=l(t);return"DataView"===e||c(k,e)},isTypedArray:P,TypedArray:_,TypedArrayPrototype:w}},function(t,e,r){(function(e){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e&&e)||Function("return this")()}).call(this,r(120))},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){var n=r(1),i=r(58),s=r(5),o=r(42),a=r(61),c=r(123),l=i("wks"),u=n.Symbol,h=c?u:u&&u.withoutSetter||o;t.exports=function(t){return s(l,t)||(a&&s(u,t)?l[t]=u[t]:l[t]=h("Symbol."+t)),l[t]}},function(t,e,r){var n=r(16),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(8);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,r){var n=r(2);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(7),i=r(11),s=r(18);t.exports=n?function(t,e,r){return i.f(t,e,s(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){"use strict";r.d(e,"b",(function(){return n})),r.d(e,"s",(function(){return i})),r.d(e,"r",(function(){return s})),r.d(e,"a",(function(){return o})),r.d(e,"p",(function(){return a})),r.d(e,"n",(function(){return c})),r.d(e,"d",(function(){return l})),r.d(e,"c",(function(){return u})),r.d(e,"h",(function(){return h})),r.d(e,"l",(function(){return d})),r.d(e,"i",(function(){return p})),r.d(e,"m",(function(){return f})),r.d(e,"g",(function(){return g})),r.d(e,"e",(function(){return m})),r.d(e,"f",(function(){return y})),r.d(e,"j",(function(){return v})),r.d(e,"k",(function(){return b})),r.d(e,"q",(function(){return A})),r.d(e,"o",(function(){return _}));r(87),r(33),r(133),r(95),r(53),r(62),r(96),r(97),r(98),r(99),r(100),r(101),r(102),r(103),r(104),r(105),r(106),r(107),r(108),r(109),r(110),r(111),r(112),r(113),r(114),r(115),r(116),r(117),r(118),r(119),r(91),r(124),r(142);function n(t,e,r,n){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;t.classList.remove(e),t.classList.add(r),i&&setTimeout((function(){t.classList.remove(r),t.classList.add(n)}),i)}function i(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=document.createElement("i");n.setAttribute("class","fa fa-spinner fa-spin spinner".concat(e)),r&&t.firstChild?t.insertBefore(n,t.firstChild):t.appendChild(n)}function s(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";try{for(var r=t.getElementsByClassName("fa fa-spinner fa-spin spinner".concat(e)),n=0;n<r.length;n++)t.removeChild(r[n])}catch(t){console.log("No spinner to remove"),console.log(t)}}function o(t,e){for(var r=function(r){e.forEach((function(e){t[r].classList.add(e)}))},n=0;n<t.length;n++)r(n)}function a(t,e){for(var r=function(r){e.forEach((function(e){t[r].classList.remove(e)}))},n=0;n<t.length;n++)r(n)}function c(t){for(var e=0;e<t.length;e++)t[e].style.display="none"}function l(t){for(var e=0;e<t.length;e++)t[e].innerText=""}function u(t){t.getContext("2d").clearRect(0,0,t.width,t.height),t.classList.remove("light-border"),t.height="1rem"}function h(t){for(var e=0;e<t.length;e++)t[e].disabled=!0}function d(t){for(var e=0;e<t.length;e++)t[e].disabled=!1}function p(t){for(var e=t.elements,r=0;r<e.length;r++)e[r].disabled=!0}function f(t){for(var e=t.elements,r=0;r<e.length;r++)e[r].disabled=!1}function g(t){var e=document.createElement("a"),r=new Uint8Array(t.file.data),n=new Blob([r]);if(window.navigator&&window.navigator.msSaveOrOpenBlob)window.navigator.msSaveOrOpenBlob(n,t.filename);else{var i=window.URL.createObjectURL(n);e.href=i,e.download=t.filename,document.body.appendChild(e),e.click(),setTimeout((function(){document.body.removeChild(e),window.URL.revokeObjectURL(i)}),0)}}function m(t){for(var e=t.getElementsByTagName("tbody");e.length>0;)e[0].remove()}function y(t){for(var e=t.getElementsByTagName("tbody")[0];e.childNodes.length>0;)e.childNodes[0].remove()}function v(t,e){e.forEach((function(e){t.appendChild(e.element),e.nextElement&&t.appendChild(e.nextElement)}))}function b(t,e){var r=t.getElementsByTagName("tbody")[0];e.forEach((function(t){r.appendChild(t.element),t.nextElement&&r.appendChild(t.nextElement)}))}function A(t){for(var e=0;e<t.length;e++)t[e].classList.remove("sort","sortedUp","sortedDown"),t[e].classList.add("sort")}function _(t){for(var e,r,n,i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],s=1;s<t.length;s++){if(r=t[s].value,n=s,i)for(;n>0&&r<t[n-1].value;)n--;else for(;n>0&&r>t[n-1].value;)n--;e=t[s],t.splice(s,1),t.splice(n,0,e)}}document.addEventListener("DOMContentLoaded",(function(){!function(){var t=document.getElementsByTagName("html")[0],e=document.getElementsByTagName("body")[0];if(t.clientHeight+100<e.clientHeight){document.getElementsByClassName("usa-footer__return-to-top")[0].style.display="block"}}(),document.getElementById("browserWarning")&&$("#browserListPopover").popover({html:!0})}))},function(t,e,r){var n=r(7),i=r(63),s=r(6),o=r(34),a=Object.defineProperty;e.f=n?a:function(t,e,r){if(s(t),e=o(e,!0),s(r),i)try{return a(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(39);t.exports=function(t){return Object(n(t))}},function(t,e,r){var n=r(1),i=r(38).f,s=r(9),o=r(15),a=r(45),c=r(121),l=r(82);t.exports=function(t,e){var r,u,h,d,p,f=t.target,g=t.global,m=t.stat;if(r=g?n:m?n[f]||a(f,{}):(n[f]||{}).prototype)for(u in e){if(d=e[u],h=t.noTargetGet?(p=i(r,u))&&p.value:r[u],!l(g?u:f+(m?".":"#")+u,t.forced)&&void 0!==h){if(typeof d==typeof h)continue;c(d,h)}(t.sham||h&&h.sham)&&s(d,"sham",!0),o(r,u,d,t)}}},function(t,e,r){var n=r(24),i=r(36),s=r(12),o=r(4),a=r(60),c=[].push,l=function(t){var e=1==t,r=2==t,l=3==t,u=4==t,h=6==t,d=5==t||h;return function(p,f,g,m){for(var y,v,b=s(p),A=i(b),_=n(f,g,3),w=o(A.length),x=0,S=m||a,E=e?S(p,w):r?S(p,0):void 0;w>x;x++)if((d||x in A)&&(v=_(y=A[x],x,b),t))if(e)E[x]=v;else if(v)switch(t){case 3:return!0;case 5:return y;case 6:return x;case 2:c.call(E,y)}else if(u)return!1;return h?-1:l||u?u:E}};t.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6)}},function(t,e,r){var n=r(1),i=r(9),s=r(5),o=r(45),a=r(50),c=r(17),l=c.get,u=c.enforce,h=String(String).split("String");(t.exports=function(t,e,r,a){var c=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,d=!!a&&!!a.noTargetGet;"function"==typeof r&&("string"!=typeof e||s(r,"name")||i(r,"name",e),u(r).source=h.join("string"==typeof e?e:"")),t!==n?(c?!d&&t[e]&&(l=!0):delete t[e],l?t[e]=r:i(t,e,r)):l?t[e]=r:o(e,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&l(this).source||a(this)}))},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){var n,i,s,o=r(126),a=r(1),c=r(8),l=r(9),u=r(5),h=r(41),d=r(43),p=a.WeakMap;if(o){var f=new p,g=f.get,m=f.has,y=f.set;n=function(t,e){return y.call(f,t,e),e},i=function(t){return g.call(f,t)||{}},s=function(t){return m.call(f,t)}}else{var v=h("state");d[v]=!0,n=function(t,e){return l(t,v,e),e},i=function(t){return u(t,v)?t[v]:{}},s=function(t){return u(t,v)}}t.exports={set:n,get:i,has:s,enforce:function(t){return s(t)?i(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!c(e)||(r=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,r){var n=r(122),i=r(1),s=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?s(n[t])||s(i[t]):n[t]&&n[t][e]||i[t]&&i[t][e]}},function(t,e,r){var n=r(16),i=Math.max,s=Math.min;t.exports=function(t,e){var r=n(t);return r<0?i(r+e,0):s(r,e)}},function(t,e,r){var n=r(6),i=r(32),s=r(3)("species");t.exports=function(t,e){var r,o=n(t).constructor;return void 0===o||null==(r=n(o)[s])?e:i(r)}},function(t,e,r){var n=r(11).f,i=r(5),s=r(3)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,s)&&n(t,s,{configurable:!0,value:e})}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e,r){var n=r(32);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},function(t,e,r){var n=r(36),i=r(39);t.exports=function(t){return n(i(t))}},function(t,e){t.exports=!1},function(t,e,r){var n=r(48),i=r(23),s=r(3)("toStringTag"),o="Arguments"==i(function(){return arguments}());t.exports=n?i:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),s))?r:o?i(e):"Object"==(n=i(e))&&"function"==typeof e.callee?"Arguments":n}},function(t,e){t.exports={}},function(t,e,r){var n=r(6),i=r(132);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),e=r instanceof Array}catch(t){}return function(r,s){return n(r),i(s),e?t.call(r,s):r.__proto__=s,r}}():void 0)},function(t,e){t.exports=function(t,e,r){if(!(t instanceof e))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return t}},function(t,e,r){var n=r(27),i=r(28),s=r(3)("iterator");t.exports=function(t){if(null!=t)return t[s]||t["@@iterator"]||i[n(t)]}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,r){"use strict";var n=r(25),i=r(130),s=r(28),o=r(17),a=r(70),c=o.set,l=o.getterFor("Array Iterator");t.exports=a(Array,"Array",(function(t,e){c(this,{type:"Array Iterator",target:n(t),index:0,kind:e})}),(function(){var t=l(this),e=t.target,r=t.kind,n=t.index++;return!e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),"values"),s.Arguments=s.Array,i("keys"),i("values"),i("entries")},function(t,e,r){var n=r(8);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,r){var n,i=r(6),s=r(69),o=r(47),a=r(43),c=r(85),l=r(49),u=r(41),h=u("IE_PROTO"),d=function(){},p=function(t){return"<script>"+t+"<\/script>"},f=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;f=n?function(t){t.write(p("")),t.close();var e=t.parentWindow.Object;return t=null,e}(n):((e=l("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F);for(var r=o.length;r--;)delete f.prototype[o[r]];return f()};a[h]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(d.prototype=i(t),r=new d,d.prototype=null,r[h]=t):r=f(),void 0===e?r:s(r,e)}},function(t,e,r){var n=r(2),i=r(23),s="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?s.call(t,""):Object(t)}:Object},function(t,e,r){var n=r(5),i=r(12),s=r(41),o=r(131),a=s("IE_PROTO"),c=Object.prototype;t.exports=o?Object.getPrototypeOf:function(t){return t=i(t),n(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},function(t,e,r){var n=r(7),i=r(55),s=r(18),o=r(25),a=r(34),c=r(5),l=r(63),u=Object.getOwnPropertyDescriptor;e.f=n?u:function(t,e){if(t=o(t),e=a(e,!0),l)try{return u(t,e)}catch(t){}if(c(t,e))return s(!i.f.call(t,e),t[e])}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,r){var n=r(65),i=r(47).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},function(t,e,r){var n=r(58),i=r(42),s=n("keys");t.exports=function(t){return s[t]||(s[t]=i(t))}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+n).toString(36)}},function(t,e){t.exports={}},function(t,e,r){var n=r(7),i=r(2),s=r(5),o=Object.defineProperty,a={},c=function(t){throw t};t.exports=function(t,e){if(s(a,t))return a[t];e||(e={});var r=[][t],l=!!s(e,"ACCESSORS")&&e.ACCESSORS,u=s(e,0)?e[0]:c,h=s(e,1)?e[1]:void 0;return a[t]=!!r&&!i((function(){if(l&&!n)return!0;var t={length:-1};l?o(t,1,{enumerable:!0,get:c}):t[1]=1,r.call(t,u,h)}))}},function(t,e,r){var n=r(1),i=r(9);t.exports=function(t,e){try{i(n,t,e)}catch(r){n[t]=e}return e}},function(t,e,r){var n=r(25),i=r(4),s=r(20),o=function(t){return function(e,r,o){var a,c=n(e),l=i(c.length),u=s(o,l);if(t&&r!=r){for(;l>u;)if((a=c[u++])!=a)return!0}else for(;l>u;u++)if((t||u in c)&&c[u]===r)return t||u||0;return!t&&-1}};t.exports={includes:o(!0),indexOf:o(!1)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,r){var n={};n[r(3)("toStringTag")]="z",t.exports="[object z]"===String(n)},function(t,e,r){var n=r(1),i=r(8),s=n.document,o=i(s)&&i(s.createElement);t.exports=function(t){return o?s.createElement(t):{}}},function(t,e,r){var n=r(64),i=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return i.call(t)}),t.exports=n.inspectSource},function(t,e,r){var n=r(15);t.exports=function(t,e,r){for(var i in e)n(t,i,e[i],r);return t}},function(t,e,r){var n=r(3),i=r(28),s=n("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||o[s]===t)}},function(t,e,r){var n=r(48),i=r(15),s=r(128);n||i(Object.prototype,"toString",s,{unsafe:!0})},function(t,e,r){var n=r(16),i=r(39),s=function(t){return function(e,r){var s,o,a=String(i(e)),c=n(r),l=a.length;return c<0||c>=l?t?"":void 0:(s=a.charCodeAt(c))<55296||s>56319||c+1===l||(o=a.charCodeAt(c+1))<56320||o>57343?t?a.charAt(c):s:t?a.slice(c,c+2):o-56320+(s-55296<<10)+65536}};t.exports={codeAt:s(!1),charAt:s(!0)}},function(t,e,r){"use strict";var n={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,s=i&&!n.call({1:2},1);e.f=s?function(t){var e=i(this,t);return!!e&&e.enumerable}:n},function(t,e,r){var n=r(65),i=r(47);t.exports=Object.keys||function(t){return n(t,i)}},function(t,e,r){"use strict";var n=r(34),i=r(11),s=r(18);t.exports=function(t,e,r){var o=n(e);o in t?i.f(t,o,s(0,r)):t[o]=r}},function(t,e,r){var n=r(26),i=r(64);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:n?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(8),i=r(92),s=r(3)("species");t.exports=function(t,e){var r;return i(t)&&("function"!=typeof(r=t.constructor)||r!==Array&&!i(r.prototype)?n(r)&&null===(r=r[s])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===e?0:e)}},function(t,e,r){var n=r(2);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(t,e,r){"use strict";var n=r(54).charAt,i=r(17),s=r(70),o=i.set,a=i.getterFor("String Iterator");s(String,"String",(function(t){o(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=a(this),r=e.string,i=e.index;return i>=r.length?{value:void 0,done:!0}:(t=n(r,i),e.index+=t.length,{value:t,done:!1})}))},function(t,e,r){var n=r(7),i=r(2),s=r(49);t.exports=!n&&!i((function(){return 7!=Object.defineProperty(s("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var n=r(1),i=r(45),s=n["__core-js_shared__"]||i("__core-js_shared__",{});t.exports=s},function(t,e,r){var n=r(5),i=r(25),s=r(46).indexOf,o=r(43);t.exports=function(t,e){var r,a=i(t),c=0,l=[];for(r in a)!n(o,r)&&n(a,r)&&l.push(r);for(;e.length>c;)n(a,r=e[c++])&&(~s(l,r)||l.push(r));return l}},function(t,e,r){"use strict";var n=r(14).forEach,i=r(67),s=r(44),o=i("forEach"),a=s("forEach");t.exports=o&&a?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,e,r){"use strict";var n=r(2);t.exports=function(t,e){var r=[][t];return!!r&&n((function(){r.call(null,e||function(){throw 1},1)}))}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,r){var n=r(7),i=r(11),s=r(6),o=r(56);t.exports=n?Object.defineProperties:function(t,e){s(t);for(var r,n=o(e),a=n.length,c=0;a>c;)i.f(t,r=n[c++],e[r]);return t}},function(t,e,r){"use strict";var n=r(13),i=r(71),s=r(37),o=r(29),a=r(22),c=r(9),l=r(15),u=r(3),h=r(26),d=r(28),p=r(72),f=p.IteratorPrototype,g=p.BUGGY_SAFARI_ITERATORS,m=u("iterator"),y=function(){return this};t.exports=function(t,e,r,u,p,v,b){i(r,e,u);var A,_,w,x=function(t){if(t===p&&R)return R;if(!g&&t in C)return C[t];switch(t){case"keys":case"values":case"entries":return function(){return new r(this,t)}}return function(){return new r(this)}},S=e+" Iterator",E=!1,C=t.prototype,T=C[m]||C["@@iterator"]||p&&C[p],R=!g&&T||x(p),k="Array"==e&&C.entries||T;if(k&&(A=s(k.call(new t)),f!==Object.prototype&&A.next&&(h||s(A)===f||(o?o(A,f):"function"!=typeof A[m]&&c(A,m,y)),a(A,S,!0,!0),h&&(d[S]=y))),"values"==p&&T&&"values"!==T.name&&(E=!0,R=function(){return T.call(this)}),h&&!b||C[m]===R||c(C,m,R),d[e]=R,p)if(_={values:x("values"),keys:v?R:x("keys"),entries:x("entries")},b)for(w in _)(g||E||!(w in C))&&l(C,w,_[w]);else n({target:e,proto:!0,forced:g||E},_);return _}},function(t,e,r){"use strict";var n=r(72).IteratorPrototype,i=r(35),s=r(18),o=r(22),a=r(28),c=function(){return this};t.exports=function(t,e,r){var l=e+" Iterator";return t.prototype=i(n,{next:s(1,r)}),o(t,l,!1,!0),a[l]=c,t}},function(t,e,r){"use strict";var n,i,s,o=r(37),a=r(9),c=r(5),l=r(3),u=r(26),h=l("iterator"),d=!1;[].keys&&("next"in(s=[].keys())?(i=o(o(s)))!==Object.prototype&&(n=i):d=!0),null==n&&(n={}),u||c(n,h)||a(n,h,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:d}},function(t,e,r){"use strict";var n=r(1),i=r(7),s=r(74),o=r(9),a=r(51),c=r(2),l=r(30),u=r(16),h=r(4),d=r(75),p=r(134),f=r(37),g=r(29),m=r(40).f,y=r(11).f,v=r(76),b=r(22),A=r(17),_=A.get,w=A.set,x=n.ArrayBuffer,S=x,E=n.DataView,C=E&&E.prototype,T=Object.prototype,R=n.RangeError,k=p.pack,P=p.unpack,L=function(t){return[255&t]},I=function(t){return[255&t,t>>8&255]},O=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},F=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},M=function(t){return k(t,23,4)},N=function(t){return k(t,52,8)},D=function(t,e){y(t.prototype,e,{get:function(){return _(this)[e]}})},B=function(t,e,r,n){var i=d(r),s=_(t);if(i+e>s.byteLength)throw R("Wrong index");var o=_(s.buffer).bytes,a=i+s.byteOffset,c=o.slice(a,a+e);return n?c:c.reverse()},U=function(t,e,r,n,i,s){var o=d(r),a=_(t);if(o+e>a.byteLength)throw R("Wrong index");for(var c=_(a.buffer).bytes,l=o+a.byteOffset,u=n(+i),h=0;h<e;h++)c[l+h]=u[s?h:e-h-1]};if(s){if(!c((function(){x(1)}))||!c((function(){new x(-1)}))||c((function(){return new x,new x(1.5),new x(NaN),"ArrayBuffer"!=x.name}))){for(var j,q=(S=function(t){return l(this,S),new x(d(t))}).prototype=x.prototype,W=m(x),G=0;W.length>G;)(j=W[G++])in S||o(S,j,x[j]);q.constructor=S}g&&f(C)!==T&&g(C,T);var H=new E(new S(2)),Y=C.setInt8;H.setInt8(0,2147483648),H.setInt8(1,2147483649),!H.getInt8(0)&&H.getInt8(1)||a(C,{setInt8:function(t,e){Y.call(this,t,e<<24>>24)},setUint8:function(t,e){Y.call(this,t,e<<24>>24)}},{unsafe:!0})}else S=function(t){l(this,S,"ArrayBuffer");var e=d(t);w(this,{bytes:v.call(new Array(e),0),byteLength:e}),i||(this.byteLength=e)},E=function(t,e,r){l(this,E,"DataView"),l(t,S,"DataView");var n=_(t).byteLength,s=u(e);if(s<0||s>n)throw R("Wrong offset");if(s+(r=void 0===r?n-s:h(r))>n)throw R("Wrong length");w(this,{buffer:t,byteLength:r,byteOffset:s}),i||(this.buffer=t,this.byteLength=r,this.byteOffset=s)},i&&(D(S,"byteLength"),D(E,"buffer"),D(E,"byteLength"),D(E,"byteOffset")),a(E.prototype,{getInt8:function(t){return B(this,1,t)[0]<<24>>24},getUint8:function(t){return B(this,1,t)[0]},getInt16:function(t){var e=B(this,2,t,arguments.length>1?arguments[1]:void 0);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=B(this,2,t,arguments.length>1?arguments[1]:void 0);return e[1]<<8|e[0]},getInt32:function(t){return F(B(this,4,t,arguments.length>1?arguments[1]:void 0))},getUint32:function(t){return F(B(this,4,t,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(t){return P(B(this,4,t,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(t){return P(B(this,8,t,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(t,e){U(this,1,t,L,e)},setUint8:function(t,e){U(this,1,t,L,e)},setInt16:function(t,e){U(this,2,t,I,e,arguments.length>2?arguments[2]:void 0)},setUint16:function(t,e){U(this,2,t,I,e,arguments.length>2?arguments[2]:void 0)},setInt32:function(t,e){U(this,4,t,O,e,arguments.length>2?arguments[2]:void 0)},setUint32:function(t,e){U(this,4,t,O,e,arguments.length>2?arguments[2]:void 0)},setFloat32:function(t,e){U(this,4,t,M,e,arguments.length>2?arguments[2]:void 0)},setFloat64:function(t,e){U(this,8,t,N,e,arguments.length>2?arguments[2]:void 0)}});b(S,"ArrayBuffer"),b(E,"DataView"),t.exports={ArrayBuffer:S,DataView:E}},function(t,e){t.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},function(t,e,r){var n=r(16),i=r(4);t.exports=function(t){if(void 0===t)return 0;var e=n(t),r=i(e);if(e!==r)throw RangeError("Wrong length or index");return r}},function(t,e,r){"use strict";var n=r(12),i=r(20),s=r(4);t.exports=function(t){for(var e=n(this),r=s(e.length),o=arguments.length,a=i(o>1?arguments[1]:void 0,r),c=o>2?arguments[2]:void 0,l=void 0===c?r:i(c,r);l>a;)e[a++]=t;return e}},function(t,e,r){var n=r(137);t.exports=function(t,e){var r=n(t);if(r%e)throw RangeError("Wrong offset");return r}},function(t,e,r){var n=r(32),i=r(12),s=r(36),o=r(4),a=function(t){return function(e,r,a,c){n(r);var l=i(e),u=s(l),h=o(l.length),d=t?h-1:0,p=t?-1:1;if(a<2)for(;;){if(d in u){c=u[d],d+=p;break}if(d+=p,t?d<0:h<=d)throw TypeError("Reduce of empty array with no initial value")}for(;t?d>=0:h>d;d+=p)d in u&&(c=r(c,u[d],d,l));return c}};t.exports={left:a(!1),right:a(!0)}},function(t,e,r){var n=r(2),i=r(3),s=r(26),o=i("iterator");t.exports=!n((function(){var t=new URL("b?a=1&b=2&c=3","http://a"),e=t.searchParams,r="";return t.pathname="c%20d",e.forEach((function(t,n){e.delete("b"),r+=n+t})),s&&!t.toJSON||!e.sort||"http://a/c%20d?a=1&c=3"!==t.href||"3"!==e.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!e[o]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==r||"x"!==new URL("http://x",void 0).host}))},function(t,e,r){var n=r(3)("iterator"),i=!1;try{var s=0,o={next:function(){return{done:!!s++}},return:function(){i=!0}};o[n]=function(){return this},Array.from(o,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var s={};s[n]=function(){return{next:function(){return{done:r=!0}}}},t(s)}catch(t){}return r}},function(t,e,r){var n,i,s=r(1),o=r(86),a=s.process,c=a&&a.versions,l=c&&c.v8;l?i=(n=l.split("."))[0]+n[1]:o&&(!(n=o.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=o.match(/Chrome\/(\d+)/))&&(i=n[1]),t.exports=i&&+i},function(t,e,r){var n=r(2),i=/#|\.prototype\./,s=function(t,e){var r=a[o(t)];return r==l||r!=c&&("function"==typeof e?n(e):!!e)},o=s.normalize=function(t){return String(t).replace(i,".").toLowerCase()},a=s.data={},c=s.NATIVE="N",l=s.POLYFILL="P";t.exports=s},function(t,e,r){"use strict";var n=r(19),i=r(11),s=r(3),o=r(7),a=s("species");t.exports=function(t){var e=n(t),r=i.f;o&&e&&!e[a]&&r(e,a,{configurable:!0,get:function(){return this}})}},function(t,e,r){var n=r(6);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){var s=t.return;throw void 0!==s&&n(s.call(t)),e}}},function(t,e,r){var n=r(19);t.exports=n("document","documentElement")},function(t,e,r){var n=r(19);t.exports=n("navigator","userAgent")||""},function(t,e,r){"use strict";var n=r(13),i=r(66);n({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},function(t,e,r){var n,i,s,o=r(1),a=r(2),c=r(23),l=r(24),u=r(85),h=r(49),d=r(89),p=o.location,f=o.setImmediate,g=o.clearImmediate,m=o.process,y=o.MessageChannel,v=o.Dispatch,b=0,A={},_=function(t){if(A.hasOwnProperty(t)){var e=A[t];delete A[t],e()}},w=function(t){return function(){_(t)}},x=function(t){_(t.data)},S=function(t){o.postMessage(t+"",p.protocol+"//"+p.host)};f&&g||(f=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return A[++b]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},n(b),b},g=function(t){delete A[t]},"process"==c(m)?n=function(t){m.nextTick(w(t))}:v&&v.now?n=function(t){v.now(w(t))}:y&&!d?(s=(i=new y).port2,i.port1.onmessage=x,n=l(s.postMessage,s,1)):!o.addEventListener||"function"!=typeof postMessage||o.importScripts||a(S)||"file:"===p.protocol?n="onreadystatechange"in h("script")?function(t){u.appendChild(h("script")).onreadystatechange=function(){u.removeChild(this),_(t)}}:function(t){setTimeout(w(t),0)}:(n=S,o.addEventListener("message",x,!1))),t.exports={set:f,clear:g}},function(t,e,r){var n=r(86);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(n)},function(t,e,r){"use strict";var n=r(32),i=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new i(t)}},function(t,e,r){var n=r(1),i=r(68),s=r(66),o=r(9);for(var a in i){var c=n[a],l=c&&c.prototype;if(l&&l.forEach!==s)try{o(l,"forEach",s)}catch(t){l.forEach=s}}},function(t,e,r){var n=r(23);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){"use strict";var n,i,s,o,a=r(13),c=r(26),l=r(1),u=r(19),h=r(147),d=r(15),p=r(51),f=r(22),g=r(83),m=r(8),y=r(32),v=r(30),b=r(23),A=r(50),_=r(150),w=r(80),x=r(21),S=r(88).set,E=r(151),C=r(148),T=r(152),R=r(90),k=r(153),P=r(17),L=r(82),I=r(3),O=r(81),F=I("species"),M="Promise",N=P.get,D=P.set,B=P.getterFor(M),U=h,j=l.TypeError,q=l.document,W=l.process,G=u("fetch"),H=R.f,Y=H,z="process"==b(W),X=!!(q&&q.createEvent&&l.dispatchEvent),$=L(M,(function(){if(!(A(U)!==String(U))){if(66===O)return!0;if(!z&&"function"!=typeof PromiseRejectionEvent)return!0}if(c&&!U.prototype.finally)return!0;if(O>=51&&/native code/.test(U))return!1;var t=U.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[F]=e,!(t.then((function(){}))instanceof e)})),V=$||!w((function(t){U.all(t).catch((function(){}))})),K=function(t){var e;return!(!m(t)||"function"!=typeof(e=t.then))&&e},J=function(t,e,r){if(!e.notified){e.notified=!0;var n=e.reactions;E((function(){for(var i=e.value,s=1==e.state,o=0;n.length>o;){var a,c,l,u=n[o++],h=s?u.ok:u.fail,d=u.resolve,p=u.reject,f=u.domain;try{h?(s||(2===e.rejection&&et(t,e),e.rejection=1),!0===h?a=i:(f&&f.enter(),a=h(i),f&&(f.exit(),l=!0)),a===u.promise?p(j("Promise-chain cycle")):(c=K(a))?c.call(a,d,p):d(a)):p(i)}catch(t){f&&!l&&f.exit(),p(t)}}e.reactions=[],e.notified=!1,r&&!e.rejection&&Z(t,e)}))}},Q=function(t,e,r){var n,i;X?((n=q.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),l.dispatchEvent(n)):n={promise:e,reason:r},(i=l["on"+t])?i(n):"unhandledrejection"===t&&T("Unhandled promise rejection",r)},Z=function(t,e){S.call(l,(function(){var r,n=e.value;if(tt(e)&&(r=k((function(){z?W.emit("unhandledRejection",n,t):Q("unhandledrejection",t,n)})),e.rejection=z||tt(e)?2:1,r.error))throw r.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){S.call(l,(function(){z?W.emit("rejectionHandled",t):Q("rejectionhandled",t,e.value)}))},rt=function(t,e,r,n){return function(i){t(e,r,i,n)}},nt=function(t,e,r,n){e.done||(e.done=!0,n&&(e=n),e.value=r,e.state=2,J(t,e,!0))},it=function(t,e,r,n){if(!e.done){e.done=!0,n&&(e=n);try{if(t===r)throw j("Promise can't be resolved itself");var i=K(r);i?E((function(){var n={done:!1};try{i.call(r,rt(it,t,n,e),rt(nt,t,n,e))}catch(r){nt(t,n,r,e)}})):(e.value=r,e.state=1,J(t,e,!1))}catch(r){nt(t,{done:!1},r,e)}}};$&&(U=function(t){v(this,U,M),y(t),n.call(this);var e=N(this);try{t(rt(it,this,e),rt(nt,this,e))}catch(t){nt(this,e,t)}},(n=function(t){D(this,{type:M,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(U.prototype,{then:function(t,e){var r=B(this),n=H(x(this,U));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=z?W.domain:void 0,r.parent=!0,r.reactions.push(n),0!=r.state&&J(this,r,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new n,e=N(t);this.promise=t,this.resolve=rt(it,t,e),this.reject=rt(nt,t,e)},R.f=H=function(t){return t===U||t===s?new i(t):Y(t)},c||"function"!=typeof h||(o=h.prototype.then,d(h.prototype,"then",(function(t,e){var r=this;return new U((function(t,e){o.call(r,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof G&&a({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return C(U,G.apply(l,arguments))}}))),a({global:!0,wrap:!0,forced:$},{Promise:U}),f(U,M,!1,!0),g(M),s=u(M),a({target:M,stat:!0,forced:$},{reject:function(t){var e=H(this);return e.reject.call(void 0,t),e.promise}}),a({target:M,stat:!0,forced:c||$},{resolve:function(t){return C(c&&this===s?U:this,t)}}),a({target:M,stat:!0,forced:V},{all:function(t){var e=this,r=H(e),n=r.resolve,i=r.reject,s=k((function(){var r=y(e.resolve),s=[],o=0,a=1;_(t,(function(t){var c=o++,l=!1;s.push(void 0),a++,r.call(e,t).then((function(t){l||(l=!0,s[c]=t,--a||n(s))}),i)})),--a||n(s)}));return s.error&&i(s.value),r.promise},race:function(t){var e=this,r=H(e),n=r.reject,i=k((function(){var i=y(e.resolve);_(t,(function(t){i.call(e,t).then(r.resolve,n)}))}));return i.error&&n(i.value),r.promise}})},function(t,e,r){var n=r(2),i=r(3),s=r(81),o=i("species");t.exports=function(t){return s>=51||!n((function(){var e=[];return(e.constructor={})[o]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,r){"use strict";var n=r(13),i=r(2),s=r(73),o=r(6),a=r(20),c=r(4),l=r(21),u=s.ArrayBuffer,h=s.DataView,d=u.prototype.slice;n({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:i((function(){return!new u(2).slice(1,void 0).byteLength}))},{slice:function(t,e){if(void 0!==d&&void 0===e)return d.call(o(this),t);for(var r=o(this).byteLength,n=a(t,r),i=a(void 0===e?r:e,r),s=new(l(this,u))(c(i-n)),p=new h(this),f=new h(s),g=0;n<i;)f.setUint8(g++,p.getUint8(n++));return s}})},function(t,e,r){r(135)("Uint8",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},function(t,e,r){"use strict";var n=r(0),i=r(140),s=n.aTypedArray;(0,n.exportTypedArrayMethod)("copyWithin",(function(t,e){return i.call(s(this),t,e,arguments.length>2?arguments[2]:void 0)}))},function(t,e,r){"use strict";var n=r(0),i=r(14).every,s=n.aTypedArray;(0,n.exportTypedArrayMethod)("every",(function(t){return i(s(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),i=r(76),s=n.aTypedArray;(0,n.exportTypedArrayMethod)("fill",(function(t){return i.apply(s(this),arguments)}))},function(t,e,r){"use strict";var n=r(0),i=r(14).filter,s=r(21),o=n.aTypedArray,a=n.aTypedArrayConstructor;(0,n.exportTypedArrayMethod)("filter",(function(t){for(var e=i(o(this),t,arguments.length>1?arguments[1]:void 0),r=s(this,this.constructor),n=0,c=e.length,l=new(a(r))(c);c>n;)l[n]=e[n++];return l}))},function(t,e,r){"use strict";var n=r(0),i=r(14).find,s=n.aTypedArray;(0,n.exportTypedArrayMethod)("find",(function(t){return i(s(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),i=r(14).findIndex,s=n.aTypedArray;(0,n.exportTypedArrayMethod)("findIndex",(function(t){return i(s(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),i=r(14).forEach,s=n.aTypedArray;(0,n.exportTypedArrayMethod)("forEach",(function(t){i(s(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),i=r(46).includes,s=n.aTypedArray;(0,n.exportTypedArrayMethod)("includes",(function(t){return i(s(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),i=r(46).indexOf,s=n.aTypedArray;(0,n.exportTypedArrayMethod)("indexOf",(function(t){return i(s(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(1),i=r(0),s=r(33),o=r(3)("iterator"),a=n.Uint8Array,c=s.values,l=s.keys,u=s.entries,h=i.aTypedArray,d=i.exportTypedArrayMethod,p=a&&a.prototype[o],f=!!p&&("values"==p.name||null==p.name),g=function(){return c.call(h(this))};d("entries",(function(){return u.call(h(this))})),d("keys",(function(){return l.call(h(this))})),d("values",g,!f),d(o,g,!f)},function(t,e,r){"use strict";var n=r(0),i=n.aTypedArray,s=n.exportTypedArrayMethod,o=[].join;s("join",(function(t){return o.apply(i(this),arguments)}))},function(t,e,r){"use strict";var n=r(0),i=r(141),s=n.aTypedArray;(0,n.exportTypedArrayMethod)("lastIndexOf",(function(t){return i.apply(s(this),arguments)}))},function(t,e,r){"use strict";var n=r(0),i=r(14).map,s=r(21),o=n.aTypedArray,a=n.aTypedArrayConstructor;(0,n.exportTypedArrayMethod)("map",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0,(function(t,e){return new(a(s(t,t.constructor)))(e)}))}))},function(t,e,r){"use strict";var n=r(0),i=r(78).left,s=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduce",(function(t){return i(s(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),i=r(78).right,s=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduceRight",(function(t){return i(s(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),i=n.aTypedArray,s=n.exportTypedArrayMethod,o=Math.floor;s("reverse",(function(){for(var t,e=i(this).length,r=o(e/2),n=0;n<r;)t=this[n],this[n++]=this[--e],this[e]=t;return this}))},function(t,e,r){"use strict";var n=r(0),i=r(4),s=r(77),o=r(12),a=r(2),c=n.aTypedArray;(0,n.exportTypedArrayMethod)("set",(function(t){c(this);var e=s(arguments.length>1?arguments[1]:void 0,1),r=this.length,n=o(t),a=i(n.length),l=0;if(a+e>r)throw RangeError("Wrong length");for(;l<a;)this[e+l]=n[l++]}),a((function(){new Int8Array(1).set({})})))},function(t,e,r){"use strict";var n=r(0),i=r(21),s=r(2),o=n.aTypedArray,a=n.aTypedArrayConstructor,c=n.exportTypedArrayMethod,l=[].slice;c("slice",(function(t,e){for(var r=l.call(o(this),t,e),n=i(this,this.constructor),s=0,c=r.length,u=new(a(n))(c);c>s;)u[s]=r[s++];return u}),s((function(){new Int8Array(1).slice()})))},function(t,e,r){"use strict";var n=r(0),i=r(14).some,s=n.aTypedArray;(0,n.exportTypedArrayMethod)("some",(function(t){return i(s(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),i=n.aTypedArray,s=n.exportTypedArrayMethod,o=[].sort;s("sort",(function(t){return o.call(i(this),t)}))},function(t,e,r){"use strict";var n=r(0),i=r(4),s=r(20),o=r(21),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("subarray",(function(t,e){var r=a(this),n=r.length,c=s(t,n);return new(o(r,r.constructor))(r.buffer,r.byteOffset+c*r.BYTES_PER_ELEMENT,i((void 0===e?n:s(e,n))-c))}))},function(t,e,r){"use strict";var n=r(1),i=r(0),s=r(2),o=n.Int8Array,a=i.aTypedArray,c=i.exportTypedArrayMethod,l=[].toLocaleString,u=[].slice,h=!!o&&s((function(){l.call(new o(1))}));c("toLocaleString",(function(){return l.apply(h?u.call(a(this)):a(this),arguments)}),s((function(){return[1,2].toLocaleString()!=new o([1,2]).toLocaleString()}))||!s((function(){o.prototype.toLocaleString.call([1,2])})))},function(t,e,r){"use strict";var n=r(0).exportTypedArrayMethod,i=r(2),s=r(1).Uint8Array,o=s&&s.prototype||{},a=[].toString,c=[].join;i((function(){a.call({})}))&&(a=function(){return c.call(this)});var l=o.toString!=a;n("toString",a,l)},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){var n=r(5),i=r(127),s=r(38),o=r(11);t.exports=function(t,e){for(var r=i(e),a=o.f,c=s.f,l=0;l<r.length;l++){var u=r[l];n(t,u)||a(t,u,c(e,u))}}},function(t,e,r){var n=r(1);t.exports=n},function(t,e,r){var n=r(61);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,r){var n=r(1),i=r(68),s=r(33),o=r(9),a=r(3),c=a("iterator"),l=a("toStringTag"),u=s.values;for(var h in i){var d=n[h],p=d&&d.prototype;if(p){if(p[c]!==u)try{o(p,c,u)}catch(t){p[c]=u}if(p[l]||o(p,l,h),i[h])for(var f in s)if(p[f]!==s[f])try{o(p,f,s[f])}catch(t){p[f]=s[f]}}}},function(t,e,r){"use strict";var n=r(24),i=r(12),s=r(84),o=r(52),a=r(4),c=r(57),l=r(31);t.exports=function(t){var e,r,u,h,d,p,f=i(t),g="function"==typeof this?this:Array,m=arguments.length,y=m>1?arguments[1]:void 0,v=void 0!==y,b=l(f),A=0;if(v&&(y=n(y,m>2?arguments[2]:void 0,2)),null==b||g==Array&&o(b))for(r=new g(e=a(f.length));e>A;A++)p=v?y(f[A],A):f[A],c(r,A,p);else for(d=(h=b.call(f)).next,r=new g;!(u=d.call(h)).done;A++)p=v?s(h,y,[u.value,A],!0):u.value,c(r,A,p);return r.length=A,r}},function(t,e,r){var n=r(1),i=r(50),s=n.WeakMap;t.exports="function"==typeof s&&/native code/.test(i(s))},function(t,e,r){var n=r(19),i=r(40),s=r(59),o=r(6);t.exports=n("Reflect","ownKeys")||function(t){var e=i.f(o(t)),r=s.f;return r?e.concat(r(t)):e}},function(t,e,r){"use strict";var n=r(48),i=r(27);t.exports=n?{}.toString:function(){return"[object "+i(this)+"]"}},function(t,e,r){var n=function(t){"use strict";var e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},i=n.iterator||"@@iterator",s=n.asyncIterator||"@@asyncIterator",o=n.toStringTag||"@@toStringTag";function a(t,e,r,n){var i=e&&e.prototype instanceof u?e:u,s=Object.create(i.prototype),o=new w(n||[]);return s._invoke=function(t,e,r){var n="suspendedStart";return function(i,s){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===i)throw s;return S()}for(r.method=i,r.arg=s;;){var o=r.delegate;if(o){var a=b(o,r);if(a){if(a===l)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var u=c(t,e,r);if("normal"===u.type){if(n=r.done?"completed":"suspendedYield",u.arg===l)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n="completed",r.method="throw",r.arg=u.arg)}}}(t,r,o),s}function c(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=a;var l={};function u(){}function h(){}function d(){}var p={};p[i]=function(){return this};var f=Object.getPrototypeOf,g=f&&f(f(x([])));g&&g!==e&&r.call(g,i)&&(p=g);var m=d.prototype=u.prototype=Object.create(p);function y(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function v(t,e){var n;this._invoke=function(i,s){function o(){return new e((function(n,o){!function n(i,s,o,a){var l=c(t[i],t,s);if("throw"!==l.type){var u=l.arg,h=u.value;return h&&"object"==typeof h&&r.call(h,"__await")?e.resolve(h.__await).then((function(t){n("next",t,o,a)}),(function(t){n("throw",t,o,a)})):e.resolve(h).then((function(t){u.value=t,o(u)}),(function(t){return n("throw",t,o,a)}))}a(l.arg)}(i,s,n,o)}))}return n=n?n.then(o,o):o()}}function b(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,b(t,e),"throw"===e.method))return l;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var n=c(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,l;var i=n.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,l):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,l)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function _(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function w(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function x(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,s=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return s.next=s}}return{next:S}}function S(){return{value:void 0,done:!0}}return h.prototype=m.constructor=d,d.constructor=h,d[o]=h.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===h||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,o in t||(t[o]="GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return{__await:t}},y(v.prototype),v.prototype[s]=function(){return this},t.AsyncIterator=v,t.async=function(e,r,n,i,s){void 0===s&&(s=Promise);var o=new v(a(e,r,n,i),s);return t.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},y(m),m[o]="Generator",m[i]=function(){return this},m.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=x,w.prototype={constructor:w,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(_),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return o.type="throw",o.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var i=this.tryEntries.length-1;i>=0;--i){var s=this.tryEntries[i],o=s.completion;if("root"===s.tryLoc)return n("end");if(s.tryLoc<=this.prev){var a=r.call(s,"catchLoc"),c=r.call(s,"finallyLoc");if(a&&c){if(this.prev<s.catchLoc)return n(s.catchLoc,!0);if(this.prev<s.finallyLoc)return n(s.finallyLoc)}else if(a){if(this.prev<s.catchLoc)return n(s.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return n(s.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var s=i;break}}s&&("break"===t||"continue"===t)&&s.tryLoc<=e&&e<=s.finallyLoc&&(s=null);var o=s?s.completion:{};return o.type=t,o.arg=e,s?(this.method="next",this.next=s.finallyLoc,l):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),l},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),_(r),l}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;_(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:x(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),l}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},function(t,e,r){var n=r(3),i=r(35),s=r(11),o=n("unscopables"),a=Array.prototype;null==a[o]&&s.f(a,o,{configurable:!0,value:i(null)}),t.exports=function(t){a[o][t]=!0}},function(t,e,r){var n=r(2);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,r){var n=r(8);t.exports=function(t){if(!n(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,r){"use strict";var n=r(13),i=r(20),s=r(16),o=r(4),a=r(12),c=r(60),l=r(57),u=r(94),h=r(44),d=u("splice"),p=h("splice",{ACCESSORS:!0,0:0,1:2}),f=Math.max,g=Math.min;n({target:"Array",proto:!0,forced:!d||!p},{splice:function(t,e){var r,n,u,h,d,p,m=a(this),y=o(m.length),v=i(t,y),b=arguments.length;if(0===b?r=n=0:1===b?(r=0,n=y-v):(r=b-2,n=g(f(s(e),0),y-v)),y+r-n>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(u=c(m,n),h=0;h<n;h++)(d=v+h)in m&&l(u,h,m[d]);if(u.length=n,r<n){for(h=v;h<y-n;h++)p=h+r,(d=h+n)in m?m[p]=m[d]:delete m[p];for(h=y;h>y-n+r;h--)delete m[h-1]}else if(r>n)for(h=y-n;h>v;h--)p=h+r-1,(d=h+n-1)in m?m[p]=m[d]:delete m[p];for(h=0;h<r;h++)m[h+v]=arguments[h+2];return m.length=y-n+r,u}})},function(t,e){var r=Math.abs,n=Math.pow,i=Math.floor,s=Math.log,o=Math.LN2;t.exports={pack:function(t,e,a){var c,l,u,h=new Array(a),d=8*a-e-1,p=(1<<d)-1,f=p>>1,g=23===e?n(2,-24)-n(2,-77):0,m=t<0||0===t&&1/t<0?1:0,y=0;for((t=r(t))!=t||t===1/0?(l=t!=t?1:0,c=p):(c=i(s(t)/o),t*(u=n(2,-c))<1&&(c--,u*=2),(t+=c+f>=1?g/u:g*n(2,1-f))*u>=2&&(c++,u/=2),c+f>=p?(l=0,c=p):c+f>=1?(l=(t*u-1)*n(2,e),c+=f):(l=t*n(2,f-1)*n(2,e),c=0));e>=8;h[y++]=255&l,l/=256,e-=8);for(c=c<<e|l,d+=e;d>0;h[y++]=255&c,c/=256,d-=8);return h[--y]|=128*m,h},unpack:function(t,e){var r,i=t.length,s=8*i-e-1,o=(1<<s)-1,a=o>>1,c=s-7,l=i-1,u=t[l--],h=127&u;for(u>>=7;c>0;h=256*h+t[l],l--,c-=8);for(r=h&(1<<-c)-1,h>>=-c,c+=e;c>0;r=256*r+t[l],l--,c-=8);if(0===h)h=1-a;else{if(h===o)return r?NaN:u?-1/0:1/0;r+=n(2,e),h-=a}return(u?-1:1)*r*n(2,h-e)}}},function(t,e,r){"use strict";var n=r(13),i=r(1),s=r(7),o=r(136),a=r(0),c=r(73),l=r(30),u=r(18),h=r(9),d=r(4),p=r(75),f=r(77),g=r(34),m=r(5),y=r(27),v=r(8),b=r(35),A=r(29),_=r(40).f,w=r(138),x=r(14).forEach,S=r(83),E=r(11),C=r(38),T=r(17),R=r(139),k=T.get,P=T.set,L=E.f,I=C.f,O=Math.round,F=i.RangeError,M=c.ArrayBuffer,N=c.DataView,D=a.NATIVE_ARRAY_BUFFER_VIEWS,B=a.TYPED_ARRAY_TAG,U=a.TypedArray,j=a.TypedArrayPrototype,q=a.aTypedArrayConstructor,W=a.isTypedArray,G=function(t,e){for(var r=0,n=e.length,i=new(q(t))(n);n>r;)i[r]=e[r++];return i},H=function(t,e){L(t,e,{get:function(){return k(this)[e]}})},Y=function(t){var e;return t instanceof M||"ArrayBuffer"==(e=y(t))||"SharedArrayBuffer"==e},z=function(t,e){return W(t)&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},X=function(t,e){return z(t,e=g(e,!0))?u(2,t[e]):I(t,e)},$=function(t,e,r){return!(z(t,e=g(e,!0))&&v(r)&&m(r,"value"))||m(r,"get")||m(r,"set")||r.configurable||m(r,"writable")&&!r.writable||m(r,"enumerable")&&!r.enumerable?L(t,e,r):(t[e]=r.value,t)};s?(D||(C.f=X,E.f=$,H(j,"buffer"),H(j,"byteOffset"),H(j,"byteLength"),H(j,"length")),n({target:"Object",stat:!0,forced:!D},{getOwnPropertyDescriptor:X,defineProperty:$}),t.exports=function(t,e,r){var s=t.match(/\d+$/)[0]/8,a=t+(r?"Clamped":"")+"Array",c="get"+t,u="set"+t,g=i[a],m=g,y=m&&m.prototype,E={},C=function(t,e){L(t,e,{get:function(){return function(t,e){var r=k(t);return r.view[c](e*s+r.byteOffset,!0)}(this,e)},set:function(t){return function(t,e,n){var i=k(t);r&&(n=(n=O(n))<0?0:n>255?255:255&n),i.view[u](e*s+i.byteOffset,n,!0)}(this,e,t)},enumerable:!0})};D?o&&(m=e((function(t,e,r,n){return l(t,m,a),R(v(e)?Y(e)?void 0!==n?new g(e,f(r,s),n):void 0!==r?new g(e,f(r,s)):new g(e):W(e)?G(m,e):w.call(m,e):new g(p(e)),t,m)})),A&&A(m,U),x(_(g),(function(t){t in m||h(m,t,g[t])})),m.prototype=y):(m=e((function(t,e,r,n){l(t,m,a);var i,o,c,u=0,h=0;if(v(e)){if(!Y(e))return W(e)?G(m,e):w.call(m,e);i=e,h=f(r,s);var g=e.byteLength;if(void 0===n){if(g%s)throw F("Wrong length");if((o=g-h)<0)throw F("Wrong length")}else if((o=d(n)*s)+h>g)throw F("Wrong length");c=o/s}else c=p(e),i=new M(o=c*s);for(P(t,{buffer:i,byteOffset:h,byteLength:o,length:c,view:new N(i)});u<c;)C(t,u++)})),A&&A(m,U),y=m.prototype=b(j)),y.constructor!==m&&h(y,"constructor",m),B&&h(y,B,a),E[a]=m,n({global:!0,forced:m!=g,sham:!D},E),"BYTES_PER_ELEMENT"in m||h(m,"BYTES_PER_ELEMENT",s),"BYTES_PER_ELEMENT"in y||h(y,"BYTES_PER_ELEMENT",s),S(a)}):t.exports=function(){}},function(t,e,r){var n=r(1),i=r(2),s=r(80),o=r(0).NATIVE_ARRAY_BUFFER_VIEWS,a=n.ArrayBuffer,c=n.Int8Array;t.exports=!o||!i((function(){c(1)}))||!i((function(){new c(-1)}))||!s((function(t){new c,new c(null),new c(1.5),new c(t)}),!0)||i((function(){return 1!==new c(new a(2),1,void 0).length}))},function(t,e,r){var n=r(16);t.exports=function(t){var e=n(t);if(e<0)throw RangeError("The argument can't be less than 0");return e}},function(t,e,r){var n=r(12),i=r(4),s=r(31),o=r(52),a=r(24),c=r(0).aTypedArrayConstructor;t.exports=function(t){var e,r,l,u,h,d,p=n(t),f=arguments.length,g=f>1?arguments[1]:void 0,m=void 0!==g,y=s(p);if(null!=y&&!o(y))for(d=(h=y.call(p)).next,p=[];!(u=d.call(h)).done;)p.push(u.value);for(m&&f>2&&(g=a(g,arguments[2],2)),r=i(p.length),l=new(c(this))(r),e=0;r>e;e++)l[e]=m?g(p[e],e):p[e];return l}},function(t,e,r){var n=r(8),i=r(29);t.exports=function(t,e,r){var s,o;return i&&"function"==typeof(s=e.constructor)&&s!==r&&n(o=s.prototype)&&o!==r.prototype&&i(t,o),t}},function(t,e,r){"use strict";var n=r(12),i=r(20),s=r(4),o=Math.min;t.exports=[].copyWithin||function(t,e){var r=n(this),a=s(r.length),c=i(t,a),l=i(e,a),u=arguments.length>2?arguments[2]:void 0,h=o((void 0===u?a:i(u,a))-l,a-c),d=1;for(l<c&&c<l+h&&(d=-1,l+=h-1,c+=h-1);h-- >0;)l in r?r[c]=r[l]:delete r[c],c+=d,l+=d;return r}},function(t,e,r){"use strict";var n=r(25),i=r(16),s=r(4),o=r(67),a=r(44),c=Math.min,l=[].lastIndexOf,u=!!l&&1/[1].lastIndexOf(1,-0)<0,h=o("lastIndexOf"),d=a("indexOf",{ACCESSORS:!0,1:0}),p=u||!h||!d;t.exports=p?function(t){if(u)return l.apply(this,arguments)||0;var e=n(this),r=s(e.length),o=r-1;for(arguments.length>1&&(o=c(o,i(arguments[1]))),o<0&&(o=r+o);o>=0;o--)if(o in e&&e[o]===t)return o||0;return-1}:l},function(t,e,r){"use strict";r(62);var n,i=r(13),s=r(7),o=r(79),a=r(1),c=r(69),l=r(15),u=r(30),h=r(5),d=r(143),p=r(125),f=r(54).codeAt,g=r(144),m=r(22),y=r(145),v=r(17),b=a.URL,A=y.URLSearchParams,_=y.getState,w=v.set,x=v.getterFor("URL"),S=Math.floor,E=Math.pow,C=/[A-Za-z]/,T=/[\d+-.A-Za-z]/,R=/\d/,k=/^(0x|0X)/,P=/^[0-7]+$/,L=/^\d+$/,I=/^[\dA-Fa-f]+$/,O=/[\u0000\u0009\u000A\u000D #%/:?@[\\]]/,F=/[\u0000\u0009\u000A\u000D #/:?@[\\]]/,M=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,N=/[\u0009\u000A\u000D]/g,D=function(t,e){var r,n,i;if("["==e.charAt(0)){if("]"!=e.charAt(e.length-1))return"Invalid host";if(!(r=U(e.slice(1,-1))))return"Invalid host";t.host=r}else if(X(t)){if(e=g(e),O.test(e))return"Invalid host";if(null===(r=B(e)))return"Invalid host";t.host=r}else{if(F.test(e))return"Invalid host";for(r="",n=p(e),i=0;i<n.length;i++)r+=Y(n[i],q);t.host=r}},B=function(t){var e,r,n,i,s,o,a,c=t.split(".");if(c.length&&""==c[c.length-1]&&c.pop(),(e=c.length)>4)return t;for(r=[],n=0;n<e;n++){if(""==(i=c[n]))return t;if(s=10,i.length>1&&"0"==i.charAt(0)&&(s=k.test(i)?16:8,i=i.slice(8==s?1:2)),""===i)o=0;else{if(!(10==s?L:8==s?P:I).test(i))return t;o=parseInt(i,s)}r.push(o)}for(n=0;n<e;n++)if(o=r[n],n==e-1){if(o>=E(256,5-e))return null}else if(o>255)return null;for(a=r.pop(),n=0;n<r.length;n++)a+=r[n]*E(256,3-n);return a},U=function(t){var e,r,n,i,s,o,a,c=[0,0,0,0,0,0,0,0],l=0,u=null,h=0,d=function(){return t.charAt(h)};if(":"==d()){if(":"!=t.charAt(1))return;h+=2,u=++l}for(;d();){if(8==l)return;if(":"!=d()){for(e=r=0;r<4&&I.test(d());)e=16*e+parseInt(d(),16),h++,r++;if("."==d()){if(0==r)return;if(h-=r,l>6)return;for(n=0;d();){if(i=null,n>0){if(!("."==d()&&n<4))return;h++}if(!R.test(d()))return;for(;R.test(d());){if(s=parseInt(d(),10),null===i)i=s;else{if(0==i)return;i=10*i+s}if(i>255)return;h++}c[l]=256*c[l]+i,2!=++n&&4!=n||l++}if(4!=n)return;break}if(":"==d()){if(h++,!d())return}else if(d())return;c[l++]=e}else{if(null!==u)return;h++,u=++l}}if(null!==u)for(o=l-u,l=7;0!=l&&o>0;)a=c[l],c[l--]=c[u+o-1],c[u+--o]=a;else if(8!=l)return;return c},j=function(t){var e,r,n,i;if("number"==typeof t){for(e=[],r=0;r<4;r++)e.unshift(t%256),t=S(t/256);return e.join(".")}if("object"==typeof t){for(e="",n=function(t){for(var e=null,r=1,n=null,i=0,s=0;s<8;s++)0!==t[s]?(i>r&&(e=n,r=i),n=null,i=0):(null===n&&(n=s),++i);return i>r&&(e=n,r=i),e}(t),r=0;r<8;r++)i&&0===t[r]||(i&&(i=!1),n===r?(e+=r?":":"::",i=!0):(e+=t[r].toString(16),r<7&&(e+=":")));return"["+e+"]"}return t},q={},W=d({},q,{" ":1,'"':1,"<":1,">":1,"`":1}),G=d({},W,{"#":1,"?":1,"{":1,"}":1}),H=d({},G,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),Y=function(t,e){var r=f(t,0);return r>32&&r<127&&!h(e,t)?t:encodeURIComponent(t)},z={ftp:21,file:null,http:80,https:443,ws:80,wss:443},X=function(t){return h(z,t.scheme)},$=function(t){return""!=t.username||""!=t.password},V=function(t){return!t.host||t.cannotBeABaseURL||"file"==t.scheme},K=function(t,e){var r;return 2==t.length&&C.test(t.charAt(0))&&(":"==(r=t.charAt(1))||!e&&"|"==r)},J=function(t){var e;return t.length>1&&K(t.slice(0,2))&&(2==t.length||"/"===(e=t.charAt(2))||"\\"===e||"?"===e||"#"===e)},Q=function(t){var e=t.path,r=e.length;!r||"file"==t.scheme&&1==r&&K(e[0],!0)||e.pop()},Z=function(t){return"."===t||"%2e"===t.toLowerCase()},tt={},et={},rt={},nt={},it={},st={},ot={},at={},ct={},lt={},ut={},ht={},dt={},pt={},ft={},gt={},mt={},yt={},vt={},bt={},At={},_t=function(t,e,r,i){var s,o,a,c,l,u=r||tt,d=0,f="",g=!1,m=!1,y=!1;for(r||(t.scheme="",t.username="",t.password="",t.host=null,t.port=null,t.path=[],t.query=null,t.fragment=null,t.cannotBeABaseURL=!1,e=e.replace(M,"")),e=e.replace(N,""),s=p(e);d<=s.length;){switch(o=s[d],u){case tt:if(!o||!C.test(o)){if(r)return"Invalid scheme";u=rt;continue}f+=o.toLowerCase(),u=et;break;case et:if(o&&(T.test(o)||"+"==o||"-"==o||"."==o))f+=o.toLowerCase();else{if(":"!=o){if(r)return"Invalid scheme";f="",u=rt,d=0;continue}if(r&&(X(t)!=h(z,f)||"file"==f&&($(t)||null!==t.port)||"file"==t.scheme&&!t.host))return;if(t.scheme=f,r)return void(X(t)&&z[t.scheme]==t.port&&(t.port=null));f="","file"==t.scheme?u=pt:X(t)&&i&&i.scheme==t.scheme?u=nt:X(t)?u=at:"/"==s[d+1]?(u=it,d++):(t.cannotBeABaseURL=!0,t.path.push(""),u=vt)}break;case rt:if(!i||i.cannotBeABaseURL&&"#"!=o)return"Invalid scheme";if(i.cannotBeABaseURL&&"#"==o){t.scheme=i.scheme,t.path=i.path.slice(),t.query=i.query,t.fragment="",t.cannotBeABaseURL=!0,u=At;break}u="file"==i.scheme?pt:st;continue;case nt:if("/"!=o||"/"!=s[d+1]){u=st;continue}u=ct,d++;break;case it:if("/"==o){u=lt;break}u=yt;continue;case st:if(t.scheme=i.scheme,o==n)t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query=i.query;else if("/"==o||"\\"==o&&X(t))u=ot;else if("?"==o)t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query="",u=bt;else{if("#"!=o){t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.path.pop(),u=yt;continue}t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query=i.query,t.fragment="",u=At}break;case ot:if(!X(t)||"/"!=o&&"\\"!=o){if("/"!=o){t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,u=yt;continue}u=lt}else u=ct;break;case at:if(u=ct,"/"!=o||"/"!=f.charAt(d+1))continue;d++;break;case ct:if("/"!=o&&"\\"!=o){u=lt;continue}break;case lt:if("@"==o){g&&(f="%40"+f),g=!0,a=p(f);for(var v=0;v<a.length;v++){var b=a[v];if(":"!=b||y){var A=Y(b,H);y?t.password+=A:t.username+=A}else y=!0}f=""}else if(o==n||"/"==o||"?"==o||"#"==o||"\\"==o&&X(t)){if(g&&""==f)return"Invalid authority";d-=p(f).length+1,f="",u=ut}else f+=o;break;case ut:case ht:if(r&&"file"==t.scheme){u=gt;continue}if(":"!=o||m){if(o==n||"/"==o||"?"==o||"#"==o||"\\"==o&&X(t)){if(X(t)&&""==f)return"Invalid host";if(r&&""==f&&($(t)||null!==t.port))return;if(c=D(t,f))return c;if(f="",u=mt,r)return;continue}"["==o?m=!0:"]"==o&&(m=!1),f+=o}else{if(""==f)return"Invalid host";if(c=D(t,f))return c;if(f="",u=dt,r==ht)return}break;case dt:if(!R.test(o)){if(o==n||"/"==o||"?"==o||"#"==o||"\\"==o&&X(t)||r){if(""!=f){var _=parseInt(f,10);if(_>65535)return"Invalid port";t.port=X(t)&&_===z[t.scheme]?null:_,f=""}if(r)return;u=mt;continue}return"Invalid port"}f+=o;break;case pt:if(t.scheme="file","/"==o||"\\"==o)u=ft;else{if(!i||"file"!=i.scheme){u=yt;continue}if(o==n)t.host=i.host,t.path=i.path.slice(),t.query=i.query;else if("?"==o)t.host=i.host,t.path=i.path.slice(),t.query="",u=bt;else{if("#"!=o){J(s.slice(d).join(""))||(t.host=i.host,t.path=i.path.slice(),Q(t)),u=yt;continue}t.host=i.host,t.path=i.path.slice(),t.query=i.query,t.fragment="",u=At}}break;case ft:if("/"==o||"\\"==o){u=gt;break}i&&"file"==i.scheme&&!J(s.slice(d).join(""))&&(K(i.path[0],!0)?t.path.push(i.path[0]):t.host=i.host),u=yt;continue;case gt:if(o==n||"/"==o||"\\"==o||"?"==o||"#"==o){if(!r&&K(f))u=yt;else if(""==f){if(t.host="",r)return;u=mt}else{if(c=D(t,f))return c;if("localhost"==t.host&&(t.host=""),r)return;f="",u=mt}continue}f+=o;break;case mt:if(X(t)){if(u=yt,"/"!=o&&"\\"!=o)continue}else if(r||"?"!=o)if(r||"#"!=o){if(o!=n&&(u=yt,"/"!=o))continue}else t.fragment="",u=At;else t.query="",u=bt;break;case yt:if(o==n||"/"==o||"\\"==o&&X(t)||!r&&("?"==o||"#"==o)){if(".."===(l=(l=f).toLowerCase())||"%2e."===l||".%2e"===l||"%2e%2e"===l?(Q(t),"/"==o||"\\"==o&&X(t)||t.path.push("")):Z(f)?"/"==o||"\\"==o&&X(t)||t.path.push(""):("file"==t.scheme&&!t.path.length&&K(f)&&(t.host&&(t.host=""),f=f.charAt(0)+":"),t.path.push(f)),f="","file"==t.scheme&&(o==n||"?"==o||"#"==o))for(;t.path.length>1&&""===t.path[0];)t.path.shift();"?"==o?(t.query="",u=bt):"#"==o&&(t.fragment="",u=At)}else f+=Y(o,G);break;case vt:"?"==o?(t.query="",u=bt):"#"==o?(t.fragment="",u=At):o!=n&&(t.path[0]+=Y(o,q));break;case bt:r||"#"!=o?o!=n&&("'"==o&&X(t)?t.query+="%27":t.query+="#"==o?"%23":Y(o,q)):(t.fragment="",u=At);break;case At:o!=n&&(t.fragment+=Y(o,W))}d++}},wt=function(t){var e,r,n=u(this,wt,"URL"),i=arguments.length>1?arguments[1]:void 0,o=String(t),a=w(n,{type:"URL"});if(void 0!==i)if(i instanceof wt)e=x(i);else if(r=_t(e={},String(i)))throw TypeError(r);if(r=_t(a,o,null,e))throw TypeError(r);var c=a.searchParams=new A,l=_(c);l.updateSearchParams(a.query),l.updateURL=function(){a.query=String(c)||null},s||(n.href=St.call(n),n.origin=Et.call(n),n.protocol=Ct.call(n),n.username=Tt.call(n),n.password=Rt.call(n),n.host=kt.call(n),n.hostname=Pt.call(n),n.port=Lt.call(n),n.pathname=It.call(n),n.search=Ot.call(n),n.searchParams=Ft.call(n),n.hash=Mt.call(n))},xt=wt.prototype,St=function(){var t=x(this),e=t.scheme,r=t.username,n=t.password,i=t.host,s=t.port,o=t.path,a=t.query,c=t.fragment,l=e+":";return null!==i?(l+="//",$(t)&&(l+=r+(n?":"+n:"")+"@"),l+=j(i),null!==s&&(l+=":"+s)):"file"==e&&(l+="//"),l+=t.cannotBeABaseURL?o[0]:o.length?"/"+o.join("/"):"",null!==a&&(l+="?"+a),null!==c&&(l+="#"+c),l},Et=function(){var t=x(this),e=t.scheme,r=t.port;if("blob"==e)try{return new URL(e.path[0]).origin}catch(t){return"null"}return"file"!=e&&X(t)?e+"://"+j(t.host)+(null!==r?":"+r:""):"null"},Ct=function(){return x(this).scheme+":"},Tt=function(){return x(this).username},Rt=function(){return x(this).password},kt=function(){var t=x(this),e=t.host,r=t.port;return null===e?"":null===r?j(e):j(e)+":"+r},Pt=function(){var t=x(this).host;return null===t?"":j(t)},Lt=function(){var t=x(this).port;return null===t?"":String(t)},It=function(){var t=x(this),e=t.path;return t.cannotBeABaseURL?e[0]:e.length?"/"+e.join("/"):""},Ot=function(){var t=x(this).query;return t?"?"+t:""},Ft=function(){return x(this).searchParams},Mt=function(){var t=x(this).fragment;return t?"#"+t:""},Nt=function(t,e){return{get:t,set:e,configurable:!0,enumerable:!0}};if(s&&c(xt,{href:Nt(St,(function(t){var e=x(this),r=String(t),n=_t(e,r);if(n)throw TypeError(n);_(e.searchParams).updateSearchParams(e.query)})),origin:Nt(Et),protocol:Nt(Ct,(function(t){var e=x(this);_t(e,String(t)+":",tt)})),username:Nt(Tt,(function(t){var e=x(this),r=p(String(t));if(!V(e)){e.username="";for(var n=0;n<r.length;n++)e.username+=Y(r[n],H)}})),password:Nt(Rt,(function(t){var e=x(this),r=p(String(t));if(!V(e)){e.password="";for(var n=0;n<r.length;n++)e.password+=Y(r[n],H)}})),host:Nt(kt,(function(t){var e=x(this);e.cannotBeABaseURL||_t(e,String(t),ut)})),hostname:Nt(Pt,(function(t){var e=x(this);e.cannotBeABaseURL||_t(e,String(t),ht)})),port:Nt(Lt,(function(t){var e=x(this);V(e)||(""==(t=String(t))?e.port=null:_t(e,t,dt))})),pathname:Nt(It,(function(t){var e=x(this);e.cannotBeABaseURL||(e.path=[],_t(e,t+"",mt))})),search:Nt(Ot,(function(t){var e=x(this);""==(t=String(t))?e.query=null:("?"==t.charAt(0)&&(t=t.slice(1)),e.query="",_t(e,t,bt)),_(e.searchParams).updateSearchParams(e.query)})),searchParams:Nt(Ft),hash:Nt(Mt,(function(t){var e=x(this);""!=(t=String(t))?("#"==t.charAt(0)&&(t=t.slice(1)),e.fragment="",_t(e,t,At)):e.fragment=null}))}),l(xt,"toJSON",(function(){return St.call(this)}),{enumerable:!0}),l(xt,"toString",(function(){return St.call(this)}),{enumerable:!0}),b){var Dt=b.createObjectURL,Bt=b.revokeObjectURL;Dt&&l(wt,"createObjectURL",(function(t){return Dt.apply(b,arguments)})),Bt&&l(wt,"revokeObjectURL",(function(t){return Bt.apply(b,arguments)}))}m(wt,"URL"),i({global:!0,forced:!o,sham:!s},{URL:wt})},function(t,e,r){"use strict";var n=r(7),i=r(2),s=r(56),o=r(59),a=r(55),c=r(12),l=r(36),u=Object.assign,h=Object.defineProperty;t.exports=!u||i((function(){if(n&&1!==u({b:1},u(h({},"a",{enumerable:!0,get:function(){h(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},r=Symbol();return t[r]=7,"abcdefghijklmnopqrst".split("").forEach((function(t){e[t]=t})),7!=u({},t)[r]||"abcdefghijklmnopqrst"!=s(u({},e)).join("")}))?function(t,e){for(var r=c(t),i=arguments.length,u=1,h=o.f,d=a.f;i>u;)for(var p,f=l(arguments[u++]),g=h?s(f).concat(h(f)):s(f),m=g.length,y=0;m>y;)p=g[y++],n&&!d.call(f,p)||(r[p]=f[p]);return r}:u},function(t,e,r){"use strict";var n=/[^\0-\u007E]/,i=/[.\u3002\uFF0E\uFF61]/g,s="Overflow: input needs wider integers to process",o=Math.floor,a=String.fromCharCode,c=function(t){return t+22+75*(t<26)},l=function(t,e,r){var n=0;for(t=r?o(t/700):t>>1,t+=o(t/e);t>455;n+=36)t=o(t/35);return o(n+36*t/(t+38))},u=function(t){var e,r,n=[],i=(t=function(t){for(var e=[],r=0,n=t.length;r<n;){var i=t.charCodeAt(r++);if(i>=55296&&i<=56319&&r<n){var s=t.charCodeAt(r++);56320==(64512&s)?e.push(((1023&i)<<10)+(1023&s)+65536):(e.push(i),r--)}else e.push(i)}return e}(t)).length,u=128,h=0,d=72;for(e=0;e<t.length;e++)(r=t[e])<128&&n.push(a(r));var p=n.length,f=p;for(p&&n.push("-");f<i;){var g=2147483647;for(e=0;e<t.length;e++)(r=t[e])>=u&&r<g&&(g=r);var m=f+1;if(g-u>o((2147483647-h)/m))throw RangeError(s);for(h+=(g-u)*m,u=g,e=0;e<t.length;e++){if((r=t[e])<u&&++h>2147483647)throw RangeError(s);if(r==u){for(var y=h,v=36;;v+=36){var b=v<=d?1:v>=d+26?26:v-d;if(y<b)break;var A=y-b,_=36-b;n.push(a(c(b+A%_))),y=o(A/_)}n.push(a(c(y))),d=l(h,m,f==p),h=0,++f}}++h,++u}return n.join("")};t.exports=function(t){var e,r,s=[],o=t.toLowerCase().replace(i,".").split(".");for(e=0;e<o.length;e++)r=o[e],s.push(n.test(r)?"xn--"+u(r):r);return s.join(".")}},function(t,e,r){"use strict";r(33);var n=r(13),i=r(19),s=r(79),o=r(15),a=r(51),c=r(22),l=r(71),u=r(17),h=r(30),d=r(5),p=r(24),f=r(27),g=r(6),m=r(8),y=r(35),v=r(18),b=r(146),A=r(31),_=r(3),w=i("fetch"),x=i("Headers"),S=_("iterator"),E=u.set,C=u.getterFor("URLSearchParams"),T=u.getterFor("URLSearchParamsIterator"),R=/\+/g,k=Array(4),P=function(t){return k[t-1]||(k[t-1]=RegExp("((?:%[\\da-f]{2}){"+t+"})","gi"))},L=function(t){try{return decodeURIComponent(t)}catch(e){return t}},I=function(t){var e=t.replace(R," "),r=4;try{return decodeURIComponent(e)}catch(t){for(;r;)e=e.replace(P(r--),L);return e}},O=/[!'()~]|%20/g,F={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},M=function(t){return F[t]},N=function(t){return encodeURIComponent(t).replace(O,M)},D=function(t,e){if(e)for(var r,n,i=e.split("&"),s=0;s<i.length;)(r=i[s++]).length&&(n=r.split("="),t.push({key:I(n.shift()),value:I(n.join("="))}))},B=function(t){this.entries.length=0,D(this.entries,t)},U=function(t,e){if(t<e)throw TypeError("Not enough arguments")},j=l((function(t,e){E(this,{type:"URLSearchParamsIterator",iterator:b(C(t).entries),kind:e})}),"Iterator",(function(){var t=T(this),e=t.kind,r=t.iterator.next(),n=r.value;return r.done||(r.value="keys"===e?n.key:"values"===e?n.value:[n.key,n.value]),r})),q=function(){h(this,q,"URLSearchParams");var t,e,r,n,i,s,o,a,c,l=arguments.length>0?arguments[0]:void 0,u=this,p=[];if(E(u,{type:"URLSearchParams",entries:p,updateURL:function(){},updateSearchParams:B}),void 0!==l)if(m(l))if("function"==typeof(t=A(l)))for(r=(e=t.call(l)).next;!(n=r.call(e)).done;){if((o=(s=(i=b(g(n.value))).next).call(i)).done||(a=s.call(i)).done||!s.call(i).done)throw TypeError("Expected sequence with length 2");p.push({key:o.value+"",value:a.value+""})}else for(c in l)d(l,c)&&p.push({key:c,value:l[c]+""});else D(p,"string"==typeof l?"?"===l.charAt(0)?l.slice(1):l:l+"")},W=q.prototype;a(W,{append:function(t,e){U(arguments.length,2);var r=C(this);r.entries.push({key:t+"",value:e+""}),r.updateURL()},delete:function(t){U(arguments.length,1);for(var e=C(this),r=e.entries,n=t+"",i=0;i<r.length;)r[i].key===n?r.splice(i,1):i++;e.updateURL()},get:function(t){U(arguments.length,1);for(var e=C(this).entries,r=t+"",n=0;n<e.length;n++)if(e[n].key===r)return e[n].value;return null},getAll:function(t){U(arguments.length,1);for(var e=C(this).entries,r=t+"",n=[],i=0;i<e.length;i++)e[i].key===r&&n.push(e[i].value);return n},has:function(t){U(arguments.length,1);for(var e=C(this).entries,r=t+"",n=0;n<e.length;)if(e[n++].key===r)return!0;return!1},set:function(t,e){U(arguments.length,1);for(var r,n=C(this),i=n.entries,s=!1,o=t+"",a=e+"",c=0;c<i.length;c++)(r=i[c]).key===o&&(s?i.splice(c--,1):(s=!0,r.value=a));s||i.push({key:o,value:a}),n.updateURL()},sort:function(){var t,e,r,n=C(this),i=n.entries,s=i.slice();for(i.length=0,r=0;r<s.length;r++){for(t=s[r],e=0;e<r;e++)if(i[e].key>t.key){i.splice(e,0,t);break}e===r&&i.push(t)}n.updateURL()},forEach:function(t){for(var e,r=C(this).entries,n=p(t,arguments.length>1?arguments[1]:void 0,3),i=0;i<r.length;)n((e=r[i++]).value,e.key,this)},keys:function(){return new j(this,"keys")},values:function(){return new j(this,"values")},entries:function(){return new j(this,"entries")}},{enumerable:!0}),o(W,S,W.entries),o(W,"toString",(function(){for(var t,e=C(this).entries,r=[],n=0;n<e.length;)t=e[n++],r.push(N(t.key)+"="+N(t.value));return r.join("&")}),{enumerable:!0}),c(q,"URLSearchParams"),n({global:!0,forced:!s},{URLSearchParams:q}),s||"function"!=typeof w||"function"!=typeof x||n({global:!0,enumerable:!0,forced:!0},{fetch:function(t){var e,r,n,i=[t];return arguments.length>1&&(m(e=arguments[1])&&(r=e.body,"URLSearchParams"===f(r)&&((n=e.headers?new x(e.headers):new x).has("content-type")||n.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),e=y(e,{body:v(0,String(r)),headers:v(0,n)}))),i.push(e)),w.apply(this,i)}}),t.exports={URLSearchParams:q,getState:C}},function(t,e,r){var n=r(6),i=r(31);t.exports=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(String(t)+" is not iterable");return n(e.call(t))}},function(t,e,r){var n=r(1);t.exports=n.Promise},function(t,e,r){var n=r(6),i=r(8),s=r(90);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=s.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){"use strict";r.r(e),r.d(e,"Headers",(function(){return p})),r.d(e,"Request",(function(){return A})),r.d(e,"Response",(function(){return w})),r.d(e,"DOMException",(function(){return S})),r.d(e,"fetch",(function(){return E}));var n="URLSearchParams"in self,i="Symbol"in self&&"iterator"in Symbol,s="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),o="FormData"in self,a="ArrayBuffer"in self;if(a)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],l=ArrayBuffer.isView||function(t){return t&&c.indexOf(Object.prototype.toString.call(t))>-1};function u(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function h(t){return"string"!=typeof t&&(t=String(t)),t}function d(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return i&&(e[Symbol.iterator]=function(){return e}),e}function p(t){this.map={},t instanceof p?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function f(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function g(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function m(t){var e=new FileReader,r=g(e);return e.readAsArrayBuffer(t),r}function y(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:s&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:o&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():a&&s&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=y(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):a&&(ArrayBuffer.prototype.isPrototypeOf(t)||l(t))?this._bodyArrayBuffer=y(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},s&&(this.blob=function(){var t=f(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(m)}),this.text=function(){var t,e,r,n=f(this);if(n)return n;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,r=g(e),e.readAsText(t),r;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(_)}),this.json=function(){return this.text().then(JSON.parse)},this}p.prototype.append=function(t,e){t=u(t),e=h(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},p.prototype.delete=function(t){delete this.map[u(t)]},p.prototype.get=function(t){return t=u(t),this.has(t)?this.map[t]:null},p.prototype.has=function(t){return this.map.hasOwnProperty(u(t))},p.prototype.set=function(t,e){this.map[u(t)]=h(e)},p.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},p.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),d(t)},p.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),d(t)},p.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),d(t)},i&&(p.prototype[Symbol.iterator]=p.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function A(t,e){var r,n,i=(e=e||{}).body;if(t instanceof A){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new p(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,i||null==t._bodyInit||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new p(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),b.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function _(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),i=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(i))}})),e}function w(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new p(e.headers),this.url=e.url||"",this._initBody(t)}A.prototype.clone=function(){return new A(this,{body:this._bodyInit})},v.call(A.prototype),v.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new p(this.headers),url:this.url})},w.error=function(){var t=new w(null,{status:0,statusText:""});return t.type="error",t};var x=[301,302,303,307,308];w.redirect=function(t,e){if(-1===x.indexOf(e))throw new RangeError("Invalid status code");return new w(null,{status:e,headers:{location:t}})};var S=self.DOMException;try{new S}catch(t){(S=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),S.prototype.constructor=S}function E(t,e){return new Promise((function(r,n){var i=new A(t,e);if(i.signal&&i.signal.aborted)return n(new S("Aborted","AbortError"));var o=new XMLHttpRequest;function a(){o.abort()}o.onload=function(){var t,e,n={status:o.status,statusText:o.statusText,headers:(t=o.getAllResponseHeaders()||"",e=new p,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var r=t.split(":"),n=r.shift().trim();if(n){var i=r.join(":").trim();e.append(n,i)}})),e)};n.url="responseURL"in o?o.responseURL:n.headers.get("X-Request-URL");var i="response"in o?o.response:o.responseText;r(new w(i,n))},o.onerror=function(){n(new TypeError("Network request failed"))},o.ontimeout=function(){n(new TypeError("Network request failed"))},o.onabort=function(){n(new S("Aborted","AbortError"))},o.open(i.method,i.url,!0),"include"===i.credentials?o.withCredentials=!0:"omit"===i.credentials&&(o.withCredentials=!1),"responseType"in o&&s&&(o.responseType="blob"),i.headers.forEach((function(t,e){o.setRequestHeader(e,t)})),i.signal&&(i.signal.addEventListener("abort",a),o.onreadystatechange=function(){4===o.readyState&&i.signal.removeEventListener("abort",a)}),o.send(void 0===i._bodyInit?null:i._bodyInit)}))}E.polyfill=!0,self.fetch||(self.fetch=E,self.Headers=p,self.Request=A,self.Response=w)},function(t,e,r){var n=r(6),i=r(52),s=r(4),o=r(24),a=r(31),c=r(84),l=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,r,u,h){var d,p,f,g,m,y,v,b=o(e,r,u?2:1);if(h)d=t;else{if("function"!=typeof(p=a(t)))throw TypeError("Target is not iterable");if(i(p)){for(f=0,g=s(t.length);g>f;f++)if((m=u?b(n(v=t[f])[0],v[1]):b(t[f]))&&m instanceof l)return m;return new l(!1)}d=p.call(t)}for(y=d.next;!(v=y.call(d)).done;)if("object"==typeof(m=c(d,b,v.value,u))&&m&&m instanceof l)return m;return new l(!1)}).stop=function(t){return new l(!0,t)}},function(t,e,r){var n,i,s,o,a,c,l,u,h=r(1),d=r(38).f,p=r(23),f=r(88).set,g=r(89),m=h.MutationObserver||h.WebKitMutationObserver,y=h.process,v=h.Promise,b="process"==p(y),A=d(h,"queueMicrotask"),_=A&&A.value;_||(n=function(){var t,e;for(b&&(t=y.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?o():s=void 0,t}}s=void 0,t&&t.enter()},b?o=function(){y.nextTick(n)}:m&&!g?(a=!0,c=document.createTextNode(""),new m(n).observe(c,{characterData:!0}),o=function(){c.data=a=!a}):v&&v.resolve?(l=v.resolve(void 0),u=l.then,o=function(){u.call(l,n)}):o=function(){f.call(h,n)}),t.exports=_||function(t){var e={fn:t,next:void 0};s&&(s.next=e),i||(i=e,o()),s=e}},function(t,e,r){var n=r(1);t.exports=function(t,e){var r=n.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,r){"use strict";var n,i,s=r(157),o=r(158),a=RegExp.prototype.exec,c=String.prototype.replace,l=a,u=(n=/a/,i=/b*/g,a.call(n,"a"),a.call(i,"a"),0!==n.lastIndex||0!==i.lastIndex),h=o.UNSUPPORTED_Y||o.BROKEN_CARET,d=void 0!==/()??/.exec("")[1];(u||d||h)&&(l=function(t){var e,r,n,i,o=this,l=h&&o.sticky,p=s.call(o),f=o.source,g=0,m=t;return l&&(-1===(p=p.replace("y","")).indexOf("g")&&(p+="g"),m=String(t).slice(o.lastIndex),o.lastIndex>0&&(!o.multiline||o.multiline&&"\n"!==t[o.lastIndex-1])&&(f="(?: "+f+")",m=" "+m,g++),r=new RegExp("^(?:"+f+")",p)),d&&(r=new RegExp("^"+f+"$(?!\\s)",p)),u&&(e=o.lastIndex),n=a.call(l?r:o,m),l?n?(n.input=n.input.slice(g),n[0]=n[0].slice(g),n.index=o.lastIndex,o.lastIndex+=n[0].length):o.lastIndex=0:u&&n&&(o.lastIndex=o.global?n.index+n[0].length:e),d&&n&&n.length>1&&c.call(n[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)})),n}),t.exports=l},function(t,e,r){"use strict";var n=r(13),i=r(154);n({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},,function(t,e,r){"use strict";var n=r(6);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){"use strict";var n=r(2);function i(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=n((function(){var t=i("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=n((function(){var t=i("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},function(t,e,r){"use strict";var n=r(160),i=r(6),s=r(4),o=r(39),a=r(161),c=r(162);n("match",1,(function(t,e,r){return[function(e){var r=o(this),n=null==e?void 0:e[t];return void 0!==n?n.call(e,r):new RegExp(e)[t](String(r))},function(t){var n=r(e,t,this);if(n.done)return n.value;var o=i(t),l=String(this);if(!o.global)return c(o,l);var u=o.unicode;o.lastIndex=0;for(var h,d=[],p=0;null!==(h=c(o,l));){var f=String(h[0]);d[p]=f,""===f&&(o.lastIndex=a(l,s(o.lastIndex),u)),p++}return 0===p?null:d}]}))},function(t,e,r){"use strict";r(155);var n=r(15),i=r(2),s=r(3),o=r(154),a=r(9),c=s("species"),l=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),u="$0"==="a".replace(/./,"$0"),h=s("replace"),d=!!/./[h]&&""===/./[h]("a","$0"),p=!i((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]}));t.exports=function(t,e,r,h){var f=s(t),g=!i((function(){var e={};return e[f]=function(){return 7},7!=""[t](e)})),m=g&&!i((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[c]=function(){return r},r.flags="",r[f]=/./[f]),r.exec=function(){return e=!0,null},r[f](""),!e}));if(!g||!m||"replace"===t&&(!l||!u||d)||"split"===t&&!p){var y=/./[f],v=r(f,""[t],(function(t,e,r,n,i){return e.exec===o?g&&!i?{done:!0,value:y.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),{REPLACE_KEEPS_$0:u,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:d}),b=v[0],A=v[1];n(String.prototype,t,b),n(RegExp.prototype,f,2==e?function(t,e){return A.call(t,this,e)}:function(t){return A.call(t,this)})}h&&a(RegExp.prototype[f],"sham",!0)}},function(t,e,r){"use strict";var n=r(54).charAt;t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){var n=r(23),i=r(154);t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var s=r.call(t,e);if("object"!=typeof s)throw TypeError("RegExp exec method returned something other than an Object or null");return s}if("RegExp"!==n(t))throw TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},,,,function(t,e,r){"use strict";var n=r(13),i=r(26),s=r(147),o=r(2),a=r(19),c=r(21),l=r(148),u=r(15);n({target:"Promise",proto:!0,real:!0,forced:!!s&&o((function(){s.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=c(this,a("Promise")),r="function"==typeof t;return this.then(r?function(r){return l(e,t()).then((function(){return r}))}:t,r?function(r){return l(e,t()).then((function(){throw r}))}:t)}}),i||"function"!=typeof s||s.prototype.finally||u(s.prototype,"finally",a("Promise").prototype.finally)},function(t,e){var r,n,i=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(t){r=s}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(t){n=o}}();var c,l=[],u=!1,h=-1;function d(){u&&c&&(u=!1,c.length?l=c.concat(l):h=-1,l.length&&p())}function p(){if(!u){var t=a(d);u=!0;for(var e=l.length;e;){for(c=l,l=[];++h<e;)c&&c[h].run();h=-1,e=l.length}c=null,u=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function f(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];l.push(new f(t,e)),1!==l.length||u||a(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,r){var n=r(3);e.f=n},function(t,e,r){var n=r(122),i=r(5),s=r(168),o=r(11).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});i(e,t)||o(e,t,{value:s.f(t)})}},function(t,e,r){"use strict";var n=r(13),i=r(2),s=r(92),o=r(8),a=r(12),c=r(4),l=r(57),u=r(60),h=r(94),d=r(3),p=r(81),f=d("isConcatSpreadable"),g=p>=51||!i((function(){var t=[];return t[f]=!1,t.concat()[0]!==t})),m=h("concat"),y=function(t){if(!o(t))return!1;var e=t[f];return void 0!==e?!!e:s(t)};n({target:"Array",proto:!0,forced:!g||!m},{concat:function(t){var e,r,n,i,s,o=a(this),h=u(o,0),d=0;for(e=-1,n=arguments.length;e<n;e++)if(y(s=-1===e?o:arguments[e])){if(d+(i=c(s.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(r=0;r<i;r++,d++)r in s&&l(h,d,s[r])}else{if(d>=9007199254740991)throw TypeError("Maximum allowed index exceeded");l(h,d++,s)}return h.length=d,h}})},function(t,e,r){var n=r(7),i=r(56),s=r(25),o=r(55).f,a=function(t){return function(e){for(var r,a=s(e),c=i(a),l=c.length,u=0,h=[];l>u;)r=c[u++],n&&!o.call(a,r)||h.push(t?[r,a[r]]:a[r]);return h}};t.exports={entries:a(!0),values:a(!1)}},,,,,,,,,function(t,e,r){r(149),t.exports=r(211)},function(t,e,r){"use strict";var n=r(13),i=r(1),s=r(19),o=r(26),a=r(7),c=r(61),l=r(123),u=r(2),h=r(5),d=r(92),p=r(8),f=r(6),g=r(12),m=r(25),y=r(34),v=r(18),b=r(35),A=r(56),_=r(40),w=r(182),x=r(59),S=r(38),E=r(11),C=r(55),T=r(9),R=r(15),k=r(58),P=r(41),L=r(43),I=r(42),O=r(3),F=r(168),M=r(169),N=r(22),D=r(17),B=r(14).forEach,U=P("hidden"),j=O("toPrimitive"),q=D.set,W=D.getterFor("Symbol"),G=Object.prototype,H=i.Symbol,Y=s("JSON","stringify"),z=S.f,X=E.f,$=w.f,V=C.f,K=k("symbols"),J=k("op-symbols"),Q=k("string-to-symbol-registry"),Z=k("symbol-to-string-registry"),tt=k("wks"),et=i.QObject,rt=!et||!et.prototype||!et.prototype.findChild,nt=a&&u((function(){return 7!=b(X({},"a",{get:function(){return X(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=z(G,e);n&&delete G[e],X(t,e,r),n&&t!==G&&X(G,e,n)}:X,it=function(t,e){var r=K[t]=b(H.prototype);return q(r,{type:"Symbol",tag:t,description:e}),a||(r.description=e),r},st=l?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof H},ot=function(t,e,r){t===G&&ot(J,e,r),f(t);var n=y(e,!0);return f(r),h(K,n)?(r.enumerable?(h(t,U)&&t[U][n]&&(t[U][n]=!1),r=b(r,{enumerable:v(0,!1)})):(h(t,U)||X(t,U,v(1,{})),t[U][n]=!0),nt(t,n,r)):X(t,n,r)},at=function(t,e){f(t);var r=m(e),n=A(r).concat(ht(r));return B(n,(function(e){a&&!ct.call(r,e)||ot(t,e,r[e])})),t},ct=function(t){var e=y(t,!0),r=V.call(this,e);return!(this===G&&h(K,e)&&!h(J,e))&&(!(r||!h(this,e)||!h(K,e)||h(this,U)&&this[U][e])||r)},lt=function(t,e){var r=m(t),n=y(e,!0);if(r!==G||!h(K,n)||h(J,n)){var i=z(r,n);return!i||!h(K,n)||h(r,U)&&r[U][n]||(i.enumerable=!0),i}},ut=function(t){var e=$(m(t)),r=[];return B(e,(function(t){h(K,t)||h(L,t)||r.push(t)})),r},ht=function(t){var e=t===G,r=$(e?J:m(t)),n=[];return B(r,(function(t){!h(K,t)||e&&!h(G,t)||n.push(K[t])})),n};(c||(R((H=function(){if(this instanceof H)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=I(t),r=function(t){this===G&&r.call(J,t),h(this,U)&&h(this[U],e)&&(this[U][e]=!1),nt(this,e,v(1,t))};return a&&rt&&nt(G,e,{configurable:!0,set:r}),it(e,t)}).prototype,"toString",(function(){return W(this).tag})),R(H,"withoutSetter",(function(t){return it(I(t),t)})),C.f=ct,E.f=ot,S.f=lt,_.f=w.f=ut,x.f=ht,F.f=function(t){return it(O(t),t)},a&&(X(H.prototype,"description",{configurable:!0,get:function(){return W(this).description}}),o||R(G,"propertyIsEnumerable",ct,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!c,sham:!c},{Symbol:H}),B(A(tt),(function(t){M(t)})),n({target:"Symbol",stat:!0,forced:!c},{for:function(t){var e=String(t);if(h(Q,e))return Q[e];var r=H(e);return Q[e]=r,Z[r]=e,r},keyFor:function(t){if(!st(t))throw TypeError(t+" is not a symbol");if(h(Z,t))return Z[t]},useSetter:function(){rt=!0},useSimple:function(){rt=!1}}),n({target:"Object",stat:!0,forced:!c,sham:!a},{create:function(t,e){return void 0===e?b(t):at(b(t),e)},defineProperty:ot,defineProperties:at,getOwnPropertyDescriptor:lt}),n({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:ut,getOwnPropertySymbols:ht}),n({target:"Object",stat:!0,forced:u((function(){x.f(1)}))},{getOwnPropertySymbols:function(t){return x.f(g(t))}}),Y)&&n({target:"JSON",stat:!0,forced:!c||u((function(){var t=H();return"[null]"!=Y([t])||"{}"!=Y({a:t})||"{}"!=Y(Object(t))}))},{stringify:function(t,e,r){for(var n,i=[t],s=1;arguments.length>s;)i.push(arguments[s++]);if(n=e,(p(e)||void 0!==t)&&!st(t))return d(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!st(e))return e}),i[1]=e,Y.apply(null,i)}});H.prototype[j]||T(H.prototype,j,H.prototype.valueOf),N(H,"Symbol"),L[U]=!0},function(t,e,r){var n=r(25),i=r(40).f,s={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==s.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(n(t))}},function(t,e,r){"use strict";var n=r(13),i=r(7),s=r(1),o=r(5),a=r(8),c=r(11).f,l=r(121),u=s.Symbol;if(i&&"function"==typeof u&&(!("description"in u.prototype)||void 0!==u().description)){var h={},d=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof d?new u(t):void 0===t?u():u(t);return""===t&&(h[e]=!0),e};l(d,u);var p=d.prototype=u.prototype;p.constructor=d;var f=p.toString,g="Symbol(test)"==String(u("test")),m=/^Symbol\((.*)\)[^)]+$/;c(p,"description",{configurable:!0,get:function(){var t=a(this)?this.valueOf():this,e=f.call(t);if(o(h,t))return"";var r=g?e.slice(7,-1):e.replace(m,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:d})}},function(t,e,r){r(169)("iterator")},function(t,e,r){var n=r(13),i=r(125);n({target:"Array",stat:!0,forced:!r(80)((function(t){Array.from(t)}))},{from:i})},function(t,e,r){"use strict";var n=r(13),i=r(8),s=r(92),o=r(20),a=r(4),c=r(25),l=r(57),u=r(3),h=r(94),d=r(44),p=h("slice"),f=d("slice",{ACCESSORS:!0,0:0,1:2}),g=u("species"),m=[].slice,y=Math.max;n({target:"Array",proto:!0,forced:!p||!f},{slice:function(t,e){var r,n,u,h=c(this),d=a(h.length),p=o(t,d),f=o(void 0===e?d:e,d);if(s(h)&&("function"!=typeof(r=h.constructor)||r!==Array&&!s(r.prototype)?i(r)&&null===(r=r[g])&&(r=void 0):r=void 0,r===Array||void 0===r))return m.call(h,p,f);for(n=new(void 0===r?Array:r)(y(f-p,0)),u=0;p<f;p++,u++)p in h&&l(n,u,h[p]);return n.length=u,n}})},function(t,e,r){var n=r(7),i=r(11).f,s=Function.prototype,o=s.toString,a=/^\s*function ([^ (]*)/;n&&!("name"in s)&&i(s,"name",{configurable:!0,get:function(){try{return o.call(this).match(a)[1]}catch(t){return""}}})},function(t,e,r){var n=r(13),i=r(171).entries;n({target:"Object",stat:!0},{entries:function(t){return i(t)}})},function(t,e,r){var n=r(13),i=r(171).values;n({target:"Object",stat:!0},{values:function(t){return i(t)}})},function(t,e,r){"use strict";var n=r(15),i=r(6),s=r(2),o=r(157),a=RegExp.prototype,c=a.toString,l=s((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),u="toString"!=c.name;(l||u)&&n(RegExp.prototype,"toString",(function(){var t=i(this),e=String(t.source),r=t.flags;return"/"+e+"/"+String(void 0===r&&t instanceof RegExp&&!("flags"in a)?o.call(t):r)}),{unsafe:!0})},function(module,exports,__webpack_require__){(function(process,Buffer){var factory;factory=function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";var n=r(1),i=r(3),s=r(16),o=r(17),a=r(4),c=r(18);const l=r(10),u=r(6);{const{isNodeJS:t}=r(7);if(t){const t=r(19).PDFNodeStream;i.setPDFNetworkStreamFactory(e=>new t(e))}else{const t=r(22).PDFNetworkStream;let e;a.isFetchSupported()&&(e=r(23).PDFFetchStream),i.setPDFNetworkStreamFactory(r=>e&&a.isValidFetchUrl(r.url)?new e(r):new t(r))}}e.build=i.build,e.version=i.version,e.getDocument=i.getDocument,e.LoopbackPort=i.LoopbackPort,e.PDFDataRangeTransport=i.PDFDataRangeTransport,e.PDFWorker=i.PDFWorker,e.renderTextLayer=s.renderTextLayer,e.AnnotationLayer=o.AnnotationLayer,e.createPromiseCapability=n.createPromiseCapability,e.PasswordResponses=n.PasswordResponses,e.InvalidPDFException=n.InvalidPDFException,e.MissingPDFException=n.MissingPDFException,e.SVGGraphics=c.SVGGraphics,e.NativeImageDecoding=n.NativeImageDecoding,e.CMapCompressionType=n.CMapCompressionType,e.PermissionFlag=n.PermissionFlag,e.UnexpectedResponseException=n.UnexpectedResponseException,e.OPS=n.OPS,e.VerbosityLevel=n.VerbosityLevel,e.UNSUPPORTED_FEATURES=n.UNSUPPORTED_FEATURES,e.createValidAbsoluteUrl=n.createValidAbsoluteUrl,e.createObjectURL=n.createObjectURL,e.removeNullCharacters=n.removeNullCharacters,e.shadow=n.shadow,e.Util=n.Util,e.RenderingCancelledException=a.RenderingCancelledException,e.getFilenameFromUrl=a.getFilenameFromUrl,e.LinkTarget=a.LinkTarget,e.addLinkAttributes=a.addLinkAttributes,e.loadScript=a.loadScript,e.PDFDateString=a.PDFDateString,e.GlobalWorkerOptions=l.GlobalWorkerOptions,e.apiCompatibilityParams=u.apiCompatibilityParams},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.arrayByteLength=d,e.arraysToBytes=function(t){const e=t.length;if(1===e&&t[0]instanceof Uint8Array)return t[0];let r=0;for(let n=0;n<e;n++)r+=d(t[n]);let n=0;const i=new Uint8Array(r);for(let r=0;r<e;r++){let e=t[r];e instanceof Uint8Array||(e="string"==typeof e?h(e):new Uint8Array(e));const s=e.byteLength;i.set(e,n),n+=s}return i},e.assert=a,e.bytesToString=function(t){a(null!==t&&"object"==typeof t&&void 0!==t.length,"Invalid argument for bytesToString");const e=t.length;if(e<8192)return String.fromCharCode.apply(null,t);const r=[];for(let n=0;n<e;n+=8192){const i=Math.min(n+8192,e),s=t.subarray(n,i);r.push(String.fromCharCode.apply(null,s))}return r.join("")},e.createPromiseCapability=function(){const t=Object.create(null);let e=!1;return Object.defineProperty(t,"settled",{get:()=>e}),t.promise=new Promise((function(r,n){t.resolve=function(t){e=!0,r(t)},t.reject=function(t){e=!0,n(t)}})),t},e.getVerbosityLevel=function(){return i},e.info=function(t){i>=n.INFOS&&console.log("Info: "+t)},e.isArrayBuffer=function(t){return"object"==typeof t&&null!==t&&void 0!==t.byteLength},e.isArrayEqual=function(t,e){return t.length===e.length&&t.every((function(t,r){return t===e[r]}))},e.isBool=function(t){return"boolean"==typeof t},e.isEmptyObj=function(t){for(const e in t)return!1;return!0},e.isNum=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSameOrigin=function(t,e){let r;try{if(r=new URL(t),!r.origin||"null"===r.origin)return!1}catch(t){return!1}const n=new URL(e,r);return r.origin===n.origin},e.createValidAbsoluteUrl=function(t,e){if(!t)return null;try{const r=e?new URL(t,e):new URL(t);if(function(t){if(!t)return!1;switch(t.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}(r))return r}catch(t){}return null},e.removeNullCharacters=function(t){return"string"!=typeof t?(s("The argument for removeNullCharacters must be a string."),t):t.replace(u,"")},e.setVerbosityLevel=function(t){Number.isInteger(t)&&(i=t)},e.shadow=c,e.string32=function(t){return String.fromCharCode(t>>24&255,t>>16&255,t>>8&255,255&t)},e.stringToBytes=h,e.stringToPDFString=function(t){const e=t.length,r=[];if("þ"===t[0]&&"ÿ"===t[1])for(let n=2;n<e;n+=2)r.push(String.fromCharCode(t.charCodeAt(n)<<8|t.charCodeAt(n+1)));else if("ÿ"===t[0]&&"þ"===t[1])for(let n=2;n<e;n+=2)r.push(String.fromCharCode(t.charCodeAt(n+1)<<8|t.charCodeAt(n)));else for(let n=0;n<e;++n){const e=y[t.charCodeAt(n)];r.push(e?String.fromCharCode(e):t.charAt(n))}return r.join("")},e.stringToUTF8String=function(t){return decodeURIComponent(escape(t))},e.utf8StringToString=function(t){return unescape(encodeURIComponent(t))},e.warn=s,e.unreachable=o,e.IsEvalSupportedCached=e.IsLittleEndianCached=e.createObjectURL=e.FormatError=e.Util=e.UnknownErrorException=e.UnexpectedResponseException=e.TextRenderingMode=e.StreamType=e.PermissionFlag=e.PasswordResponses=e.PasswordException=e.NativeImageDecoding=e.MissingPDFException=e.InvalidPDFException=e.AbortException=e.CMapCompressionType=e.ImageKind=e.FontType=e.AnnotationType=e.AnnotationStateModelType=e.AnnotationReviewState=e.AnnotationReplyType=e.AnnotationMarkedState=e.AnnotationFlag=e.AnnotationFieldFlag=e.AnnotationBorderStyleType=e.UNSUPPORTED_FEATURES=e.VerbosityLevel=e.OPS=e.IDENTITY_MATRIX=e.FONT_IDENTITY_MATRIX=e.BaseException=void 0,r(2),e.IDENTITY_MATRIX=[1,0,0,1,0,0],e.FONT_IDENTITY_MATRIX=[.001,0,0,.001,0,0],e.NativeImageDecoding={NONE:"none",DECODE:"decode",DISPLAY:"display"},e.PermissionFlag={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},e.TextRenderingMode={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},e.ImageKind={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},e.AnnotationType={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},e.AnnotationStateModelType={MARKED:"Marked",REVIEW:"Review"},e.AnnotationMarkedState={MARKED:"Marked",UNMARKED:"Unmarked"},e.AnnotationReviewState={ACCEPTED:"Accepted",REJECTED:"Rejected",CANCELLED:"Cancelled",COMPLETED:"Completed",NONE:"None"},e.AnnotationReplyType={GROUP:"Group",REPLY:"R"},e.AnnotationFlag={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512},e.AnnotationFieldFlag={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864},e.AnnotationBorderStyleType={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},e.StreamType={UNKNOWN:"UNKNOWN",FLATE:"FLATE",LZW:"LZW",DCT:"DCT",JPX:"JPX",JBIG:"JBIG",A85:"A85",AHX:"AHX",CCF:"CCF",RLX:"RLX"},e.FontType={UNKNOWN:"UNKNOWN",TYPE1:"TYPE1",TYPE1C:"TYPE1C",CIDFONTTYPE0:"CIDFONTTYPE0",CIDFONTTYPE0C:"CIDFONTTYPE0C",TRUETYPE:"TRUETYPE",CIDFONTTYPE2:"CIDFONTTYPE2",TYPE3:"TYPE3",OPENTYPE:"OPENTYPE",TYPE0:"TYPE0",MMTYPE1:"MMTYPE1"};const n={ERRORS:0,WARNINGS:1,INFOS:5};e.VerbosityLevel=n,e.CMapCompressionType={NONE:0,BINARY:1,STREAM:2},e.OPS={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotations:78,endAnnotations:79,beginAnnotation:80,endAnnotation:81,paintJpegXObject:82,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91},e.UNSUPPORTED_FEATURES={unknown:"unknown",forms:"forms",javaScript:"javaScript",smask:"smask",shadingPattern:"shadingPattern",font:"font"},e.PasswordResponses={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};let i=n.WARNINGS;function s(t){i>=n.WARNINGS&&console.log("Warning: "+t)}function o(t){throw new Error(t)}function a(t,e){t||o(e)}function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!1}),r}const l=function(){function t(e){this.constructor===t&&o("Cannot initialize BaseException."),this.message=e,this.name=this.constructor.name}return t.prototype=new Error,t.constructor=t,t}();e.BaseException=l,e.PasswordException=class extends l{constructor(t,e){super(t),this.code=e}},e.UnknownErrorException=class extends l{constructor(t,e){super(t),this.details=e}},e.InvalidPDFException=class extends l{},e.MissingPDFException=class extends l{},e.UnexpectedResponseException=class extends l{constructor(t,e){super(t),this.status=e}},e.FormatError=class extends l{},e.AbortException=class extends l{};const u=/\x00/g;function h(t){a("string"==typeof t,"Invalid argument for stringToBytes");const e=t.length,r=new Uint8Array(e);for(let n=0;n<e;++n)r[n]=255&t.charCodeAt(n);return r}function d(t){return void 0!==t.length?t.length:(a(void 0!==t.byteLength),t.byteLength)}const p={get value(){return c(this,"value",function(){const t=new Uint8Array(4);return t[0]=1,1===new Uint32Array(t.buffer,0,1)[0]}())}};e.IsLittleEndianCached=p;const f={get value(){return c(this,"value",function(){try{return new Function(""),!0}catch(t){return!1}}())}};e.IsEvalSupportedCached=f;const g=["rgb(",0,",",0,",",0,")"];class m{static makeCssRgb(t,e,r){return g[1]=t,g[3]=e,g[5]=r,g.join("")}static transform(t,e){return[t[0]*e[0]+t[2]*e[1],t[1]*e[0]+t[3]*e[1],t[0]*e[2]+t[2]*e[3],t[1]*e[2]+t[3]*e[3],t[0]*e[4]+t[2]*e[5]+t[4],t[1]*e[4]+t[3]*e[5]+t[5]]}static applyTransform(t,e){return[t[0]*e[0]+t[1]*e[2]+e[4],t[0]*e[1]+t[1]*e[3]+e[5]]}static applyInverseTransform(t,e){const r=e[0]*e[3]-e[1]*e[2];return[(t[0]*e[3]-t[1]*e[2]+e[2]*e[5]-e[4]*e[3])/r,(-t[0]*e[1]+t[1]*e[0]+e[4]*e[1]-e[5]*e[0])/r]}static getAxialAlignedBoundingBox(t,e){const r=m.applyTransform(t,e),n=m.applyTransform(t.slice(2,4),e),i=m.applyTransform([t[0],t[3]],e),s=m.applyTransform([t[2],t[1]],e);return[Math.min(r[0],n[0],i[0],s[0]),Math.min(r[1],n[1],i[1],s[1]),Math.max(r[0],n[0],i[0],s[0]),Math.max(r[1],n[1],i[1],s[1])]}static inverseTransform(t){const e=t[0]*t[3]-t[1]*t[2];return[t[3]/e,-t[1]/e,-t[2]/e,t[0]/e,(t[2]*t[5]-t[4]*t[3])/e,(t[4]*t[1]-t[5]*t[0])/e]}static apply3dTransform(t,e){return[t[0]*e[0]+t[1]*e[1]+t[2]*e[2],t[3]*e[0]+t[4]*e[1]+t[5]*e[2],t[6]*e[0]+t[7]*e[1]+t[8]*e[2]]}static singularValueDecompose2dScale(t){const e=[t[0],t[2],t[1],t[3]],r=t[0]*e[0]+t[1]*e[2],n=t[0]*e[1]+t[1]*e[3],i=t[2]*e[0]+t[3]*e[2],s=t[2]*e[1]+t[3]*e[3],o=(r+s)/2,a=Math.sqrt((r+s)*(r+s)-4*(r*s-i*n))/2,c=o+a||1,l=o-a||1;return[Math.sqrt(c),Math.sqrt(l)]}static normalizeRect(t){const e=t.slice(0);return t[0]>t[2]&&(e[0]=t[2],e[2]=t[0]),t[1]>t[3]&&(e[1]=t[3],e[3]=t[1]),e}static intersect(t,e){function r(t,e){return t-e}const n=[t[0],t[2],e[0],e[2]].sort(r),i=[t[1],t[3],e[1],e[3]].sort(r),s=[];return t=m.normalizeRect(t),e=m.normalizeRect(e),n[0]===t[0]&&n[1]===e[0]||n[0]===e[0]&&n[1]===t[0]?(s[0]=n[1],s[2]=n[2],i[0]===t[1]&&i[1]===e[1]||i[0]===e[1]&&i[1]===t[1]?(s[1]=i[1],s[3]=i[2],s):null):null}}e.Util=m;const y=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364],v=function(){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";return function(e,r,n=!1){if(!n&&URL.createObjectURL){const t=new Blob([e],{type:r});return URL.createObjectURL(t)}let i=`data:${r};base64,`;for(let r=0,n=e.length;r<n;r+=3){const s=255&e[r],o=255&e[r+1],a=255&e[r+2];i+=t[s>>2]+t[(3&s)<<4|o>>4]+t[r+1<n?(15&o)<<2|a>>6:64]+t[r+2<n?63&a:64]}return i}}();e.createObjectURL=v},function(t,e,r){},function(module,exports,__w_pdfjs_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getDocument=getDocument,exports.setPDFNetworkStreamFactory=setPDFNetworkStreamFactory,exports.build=exports.version=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFWorker=exports.PDFDataRangeTransport=exports.LoopbackPort=void 0;var _util=__w_pdfjs_require__(1),_display_utils=__w_pdfjs_require__(4),_font_loader=__w_pdfjs_require__(5),_api_compatibility=__w_pdfjs_require__(6),_canvas=__w_pdfjs_require__(8),_worker_options=__w_pdfjs_require__(10),_is_node=__w_pdfjs_require__(7),_message_handler=__w_pdfjs_require__(11),_metadata=__w_pdfjs_require__(12),_transport_stream=__w_pdfjs_require__(14),_webgl=__w_pdfjs_require__(15);const DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100;let createPDFNetworkStream;function setPDFNetworkStreamFactory(t){createPDFNetworkStream=t}function getDocument(t){const e=new PDFDocumentLoadingTask;let r;if("string"==typeof t)r={url:t};else if((0,_util.isArrayBuffer)(t))r={data:t};else if(t instanceof PDFDataRangeTransport)r={range:t};else{if("object"!=typeof t)throw new Error("Invalid parameter in getDocument, need either Uint8Array, string or a parameter object");if(!t.url&&!t.data&&!t.range)throw new Error("Invalid parameter object: need either .data, .range or .url");r=t}const n=Object.create(null);let i=null,s=null;for(const t in r)if("url"!==t||"undefined"==typeof window)if("range"!==t)if("worker"!==t)if("data"!==t||r[t]instanceof Uint8Array)n[t]=r[t];else{const e=r[t];if("string"==typeof e)n[t]=(0,_util.stringToBytes)(e);else if("object"!=typeof e||null===e||isNaN(e.length)){if(!(0,_util.isArrayBuffer)(e))throw new Error("Invalid PDF binary data: either typed array, string or array-like object is expected in the data property.");n[t]=new Uint8Array(e)}else n[t]=new Uint8Array(e)}else s=r[t];else i=r[t];else n[t]=new URL(r[t],window.location).href;n.rangeChunkSize=n.rangeChunkSize||DEFAULT_RANGE_CHUNK_SIZE,n.CMapReaderFactory=n.CMapReaderFactory||_display_utils.DOMCMapReaderFactory,n.ignoreErrors=!0!==n.stopAtErrors,n.pdfBug=!0===n.pdfBug;const o=Object.values(_util.NativeImageDecoding);if(void 0!==n.nativeImageDecoderSupport&&o.includes(n.nativeImageDecoderSupport)||(n.nativeImageDecoderSupport=_api_compatibility.apiCompatibilityParams.nativeImageDecoderSupport||_util.NativeImageDecoding.DECODE),Number.isInteger(n.maxImageSize)||(n.maxImageSize=-1),"boolean"!=typeof n.isEvalSupported&&(n.isEvalSupported=!0),"boolean"!=typeof n.disableFontFace&&(n.disableFontFace=_api_compatibility.apiCompatibilityParams.disableFontFace||!1),"boolean"!=typeof n.disableRange&&(n.disableRange=!1),"boolean"!=typeof n.disableStream&&(n.disableStream=!1),"boolean"!=typeof n.disableAutoFetch&&(n.disableAutoFetch=!1),"boolean"!=typeof n.disableCreateObjectURL&&(n.disableCreateObjectURL=_api_compatibility.apiCompatibilityParams.disableCreateObjectURL||!1),(0,_util.setVerbosityLevel)(n.verbosity),!s){const t={verbosity:n.verbosity,port:_worker_options.GlobalWorkerOptions.workerPort};s=t.port?PDFWorker.fromPort(t):new PDFWorker(t),e._worker=s}const a=e.docId;return s.promise.then((function(){if(e.destroyed)throw new Error("Loading aborted");return _fetchDocument(s,n,i,a).then((function(t){if(e.destroyed)throw new Error("Loading aborted");let r;i?r=new _transport_stream.PDFDataTransportStream({length:n.length,initialData:n.initialData,progressiveDone:n.progressiveDone,disableRange:n.disableRange,disableStream:n.disableStream},i):n.data||(r=createPDFNetworkStream({url:n.url,length:n.length,httpHeaders:n.httpHeaders,withCredentials:n.withCredentials,rangeChunkSize:n.rangeChunkSize,disableRange:n.disableRange,disableStream:n.disableStream}));const o=new _message_handler.MessageHandler(a,t,s.port);o.postMessageTransfers=s.postMessageTransfers;const c=new WorkerTransport(o,e,r,n);e._transport=c,o.send("Ready",null)}))})).catch(e._capability.reject),e}function _fetchDocument(t,e,r,n){return t.destroyed?Promise.reject(new Error("Worker was destroyed")):(r&&(e.length=r.length,e.initialData=r.initialData,e.progressiveDone=r.progressiveDone),t.messageHandler.sendWithPromise("GetDocRequest",{docId:n,apiVersion:"2.4.456",source:{data:e.data,url:e.url,password:e.password,disableAutoFetch:e.disableAutoFetch,rangeChunkSize:e.rangeChunkSize,length:e.length},maxImageSize:e.maxImageSize,disableFontFace:e.disableFontFace,disableCreateObjectURL:e.disableCreateObjectURL,postMessageTransfers:t.postMessageTransfers,docBaseUrl:e.docBaseUrl,nativeImageDecoderSupport:e.nativeImageDecoderSupport,ignoreErrors:e.ignoreErrors,isEvalSupported:e.isEvalSupported}).then((function(e){if(t.destroyed)throw new Error("Worker was destroyed");return e})))}const PDFDocumentLoadingTask=function(){let t=0;return class{constructor(){this._capability=(0,_util.createPromiseCapability)(),this._transport=null,this._worker=null,this.docId="d"+t++,this.destroyed=!1,this.onPassword=null,this.onProgress=null,this.onUnsupportedFeature=null}get promise(){return this._capability.promise}destroy(){return this.destroyed=!0,(this._transport?this._transport.destroy():Promise.resolve()).then(()=>{this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)})}then(t,e){throw new Error("Removed API method: PDFDocumentLoadingTask.then, use the `promise` getter instead.")}}}();class PDFDataRangeTransport{constructor(t,e,r=!1){this.length=t,this.initialData=e,this.progressiveDone=r,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=(0,_util.createPromiseCapability)()}addRangeListener(t){this._rangeListeners.push(t)}addProgressListener(t){this._progressListeners.push(t)}addProgressiveReadListener(t){this._progressiveReadListeners.push(t)}addProgressiveDoneListener(t){this._progressiveDoneListeners.push(t)}onDataRange(t,e){for(const r of this._rangeListeners)r(t,e)}onDataProgress(t,e){this._readyCapability.promise.then(()=>{for(const r of this._progressListeners)r(t,e)})}onDataProgressiveRead(t){this._readyCapability.promise.then(()=>{for(const e of this._progressiveReadListeners)e(t)})}onDataProgressiveDone(){this._readyCapability.promise.then(()=>{for(const t of this._progressiveDoneListeners)t()})}transportReady(){this._readyCapability.resolve()}requestDataRange(t,e){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(t,e){this._pdfInfo=t,this._transport=e}get numPages(){return this._pdfInfo.numPages}get fingerprint(){return this._pdfInfo.fingerprint}getPage(t){return this._transport.getPage(t)}getPageIndex(t){return this._transport.getPageIndex(t)}getDestinations(){return this._transport.getDestinations()}getDestination(t){return this._transport.getDestination(t)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getOpenActionDestination(){return(0,_display_utils.deprecated)("getOpenActionDestination, use getOpenAction instead."),this.getOpenAction().then((function(t){return t&&t.dest?t.dest:null}))}getAttachments(){return this._transport.getAttachments()}getJavaScript(){return this._transport.getJavaScript()}getOutline(){return this._transport.getOutline()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getData(){return this._transport.getData()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}getStats(){return this._transport.getStats()}cleanup(){return this._transport.startCleanup()}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{constructor(t,e,r,n=!1){this._pageIndex=t,this._pageInfo=e,this._transport=r,this._stats=n?new _display_utils.StatTimer:null,this._pdfBug=n,this.commonObjs=r.commonObjs,this.objs=new PDFObjects,this.cleanupAfterRender=!1,this.pendingCleanup=!1,this.intentStates=Object.create(null),this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:t,rotation:e=this.rotate,offsetX:r=0,offsetY:n=0,dontFlip:i=!1}={}){if(arguments.length>1||"number"==typeof arguments[0])throw new Error("PDFPageProxy.getViewport is called with obsolete arguments.");return new _display_utils.PageViewport({viewBox:this.view,scale:t,rotation:e,offsetX:r,offsetY:n,dontFlip:i})}getAnnotations({intent:t=null}={}){return this.annotationsPromise&&this.annotationsIntent===t||(this.annotationsPromise=this._transport.getAnnotations(this._pageIndex,t),this.annotationsIntent=t),this.annotationsPromise}render({canvasContext:t,viewport:e,intent:r="display",enableWebGL:n=!1,renderInteractiveForms:i=!1,transform:s=null,imageLayer:o=null,canvasFactory:a=null,background:c=null}){this._stats&&this._stats.time("Overall");const l="print"===r?"print":"display";this.pendingCleanup=!1,this.intentStates[l]||(this.intentStates[l]=Object.create(null));const u=this.intentStates[l];u.streamReaderCancelTimeout&&(clearTimeout(u.streamReaderCancelTimeout),u.streamReaderCancelTimeout=null);const h=a||new _display_utils.DOMCanvasFactory,d=new _webgl.WebGLContext({enable:n});u.displayReadyCapability||(u.displayReadyCapability=(0,_util.createPromiseCapability)(),u.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList({pageIndex:this._pageIndex,intent:l,renderInteractiveForms:!0===i}));const p=t=>{const e=u.renderTasks.indexOf(f);e>=0&&u.renderTasks.splice(e,1),(this.cleanupAfterRender||"print"===l)&&(this.pendingCleanup=!0),this._tryCleanup(),t?(f.capability.reject(t),this._abortOperatorList({intentState:u,reason:t})):f.capability.resolve(),this._stats&&(this._stats.timeEnd("Rendering"),this._stats.timeEnd("Overall"))},f=new InternalRenderTask({callback:p,params:{canvasContext:t,viewport:e,transform:s,imageLayer:o,background:c},objs:this.objs,commonObjs:this.commonObjs,operatorList:u.operatorList,pageIndex:this._pageIndex,canvasFactory:h,webGLContext:d,useRequestAnimationFrame:"print"!==l,pdfBug:this._pdfBug});u.renderTasks||(u.renderTasks=[]),u.renderTasks.push(f);const g=f.task;return u.displayReadyCapability.promise.then(t=>{this.pendingCleanup?p():(this._stats&&this._stats.time("Rendering"),f.initializeGraphics(t),f.operatorListChanged())}).catch(p),g}getOperatorList(){this.intentStates.oplist||(this.intentStates.oplist=Object.create(null));const t=this.intentStates.oplist;let e;return t.opListReadCapability||(e={},e.operatorListChanged=function(){if(t.operatorList.lastChunk){t.opListReadCapability.resolve(t.operatorList);const r=t.renderTasks.indexOf(e);r>=0&&t.renderTasks.splice(r,1)}},t.opListReadCapability=(0,_util.createPromiseCapability)(),t.renderTasks=[],t.renderTasks.push(e),t.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList({pageIndex:this._pageIndex,intent:"oplist"})),t.opListReadCapability.promise}streamTextContent({normalizeWhitespace:t=!1,disableCombineTextItems:e=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,normalizeWhitespace:!0===t,combineTextItems:!0!==e},{highWaterMark:100,size:t=>t.items.length})}getTextContent(t={}){const e=this.streamTextContent(t);return new Promise((function(t,r){const n=e.getReader(),i={items:[],styles:Object.create(null)};!function e(){n.read().then((function({value:r,done:n}){n?t(i):(Object.assign(i.styles,r.styles),i.items.push(...r.items),e())}),r)}()}))}_destroy(){this.destroyed=!0,this._transport.pageCache[this._pageIndex]=null;const t=[];return Object.keys(this.intentStates).forEach(e=>{const r=this.intentStates[e];this._abortOperatorList({intentState:r,reason:new Error("Page was destroyed."),force:!0}),"oplist"!==e&&r.renderTasks.forEach((function(e){const r=e.capability.promise.catch((function(){}));t.push(r),e.cancel()}))}),this.objs.clear(),this.annotationsPromise=null,this.pendingCleanup=!1,Promise.all(t)}cleanup(t=!1){return this.pendingCleanup=!0,this._tryCleanup(t)}_tryCleanup(t=!1){return!(!this.pendingCleanup||Object.keys(this.intentStates).some(t=>{const e=this.intentStates[t];return 0!==e.renderTasks.length||!e.operatorList.lastChunk})||(Object.keys(this.intentStates).forEach(t=>{delete this.intentStates[t]}),this.objs.clear(),this.annotationsPromise=null,t&&this._stats&&(this._stats=new _display_utils.StatTimer),this.pendingCleanup=!1,0))}_startRenderPage(t,e){const r=this.intentStates[e];r&&(this._stats&&this._stats.timeEnd("Page Request"),r.displayReadyCapability&&r.displayReadyCapability.resolve(t))}_renderPageChunk(t,e){for(let r=0,n=t.length;r<n;r++)e.operatorList.fnArray.push(t.fnArray[r]),e.operatorList.argsArray.push(t.argsArray[r]);e.operatorList.lastChunk=t.lastChunk;for(let t=0;t<e.renderTasks.length;t++)e.renderTasks[t].operatorListChanged();t.lastChunk&&this._tryCleanup()}_pumpOperatorList(t){(0,_util.assert)(t.intent,'PDFPageProxy._pumpOperatorList: Expected "intent" argument.');const e=this._transport.messageHandler.sendWithStream("GetOperatorList",t).getReader(),r=this.intentStates[t.intent];r.streamReader=e;const n=()=>{e.read().then(({value:t,done:e})=>{e?r.streamReader=null:this._transport.destroyed||(this._renderPageChunk(t,r),n())},t=>{if(r.streamReader=null,!this._transport.destroyed){if(r.operatorList){r.operatorList.lastChunk=!0;for(let t=0;t<r.renderTasks.length;t++)r.renderTasks[t].operatorListChanged();this._tryCleanup()}if(r.displayReadyCapability)r.displayReadyCapability.reject(t);else{if(!r.opListReadCapability)throw t;r.opListReadCapability.reject(t)}}})};n()}_abortOperatorList({intentState:t,reason:e,force:r=!1}){if((0,_util.assert)(e instanceof Error||"object"==typeof e&&null!==e,'PDFPageProxy._abortOperatorList: Expected "reason" argument.'),t.streamReader){if(!r){if(0!==t.renderTasks.length)return;if(e instanceof _display_utils.RenderingCancelledException)return void(t.streamReaderCancelTimeout=setTimeout(()=>{this._abortOperatorList({intentState:t,reason:e,force:!0}),t.streamReaderCancelTimeout=null},RENDERING_CANCELLED_TIMEOUT))}t.streamReader.cancel(new _util.AbortException(e&&e.message)),t.streamReader=null,this._transport.destroyed||(Object.keys(this.intentStates).some(e=>this.intentStates[e]===t&&(delete this.intentStates[e],!0)),this.cleanup())}}get stats(){return this._stats}}exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{constructor(t=!0){this._listeners=[],this._defer=t,this._deferred=Promise.resolve(void 0)}postMessage(t,e){if(!this._defer)return void this._listeners.forEach(e=>{e.call(this,{data:t})});const r=new WeakMap,n={data:function t(n){if("object"!=typeof n||null===n)return n;if(r.has(n))return r.get(n);let i,s;if((i=n.buffer)&&(0,_util.isArrayBuffer)(i))return s=e&&e.includes(i)?new n.constructor(i,n.byteOffset,n.byteLength):new n.constructor(n),r.set(n,s),s;s=Array.isArray(n)?[]:{},r.set(n,s);for(const e in n){let r,i=n;for(;!(r=Object.getOwnPropertyDescriptor(i,e));)i=Object.getPrototypeOf(i);if(void 0!==r.value)if("function"!=typeof r.value)s[e]=t(r.value);else if(n.hasOwnProperty&&n.hasOwnProperty(e))throw new Error("LoopbackPort.postMessage - cannot clone: "+n[e])}return s}(t)};this._deferred.then(()=>{this._listeners.forEach(t=>{t.call(this,n)})})}addEventListener(t,e){this._listeners.push(e)}removeEventListener(t,e){const r=this._listeners.indexOf(e);this._listeners.splice(r,1)}terminate(){this._listeners.length=0}}exports.LoopbackPort=LoopbackPort;const PDFWorker=function PDFWorkerClosure(){const pdfWorkerPorts=new WeakMap;let isWorkerDisabled=!1,fallbackWorkerSrc,nextFakeWorkerId=0,fakeWorkerCapability;if(_is_node.isNodeJS)isWorkerDisabled=!0,fallbackWorkerSrc="./pdf.worker.js";else if("object"==typeof document&&"currentScript"in document){const t=document.currentScript&&document.currentScript.src;t&&(fallbackWorkerSrc=t.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}function getWorkerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(void 0!==fallbackWorkerSrc)return _is_node.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}function getMainThreadWorkerMessageHandler(){let t;try{t=globalThis.pdfjsWorker&&globalThis.pdfjsWorker.WorkerMessageHandler}catch(t){}return t||null}function setupFakeWorkerGlobal(){if(fakeWorkerCapability)return fakeWorkerCapability.promise;fakeWorkerCapability=(0,_util.createPromiseCapability)();const loader=async function(){const mainWorkerMessageHandler=getMainThreadWorkerMessageHandler();if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_is_node.isNodeJS){const worker=eval("require")(getWorkerSrc());return worker.WorkerMessageHandler}return await(0,_display_utils.loadScript)(getWorkerSrc()),window.pdfjsWorker.WorkerMessageHandler};return loader().then(fakeWorkerCapability.resolve,fakeWorkerCapability.reject),fakeWorkerCapability.promise}function createCDNWrapper(t){const e="importScripts('"+t+"');";return URL.createObjectURL(new Blob([e]))}class PDFWorker{constructor({name:t=null,port:e=null,verbosity:r=(0,_util.getVerbosityLevel)()}={}){if(e&&pdfWorkerPorts.has(e))throw new Error("Cannot use more than one PDFWorker per port");if(this.name=t,this.destroyed=!1,this.postMessageTransfers=!0,this.verbosity=r,this._readyCapability=(0,_util.createPromiseCapability)(),this._port=null,this._webWorker=null,this._messageHandler=null,e)return pdfWorkerPorts.set(e,this),void this._initializeFromPort(e);this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(t){this._port=t,this._messageHandler=new _message_handler.MessageHandler("main","worker",t),this._messageHandler.on("ready",(function(){})),this._readyCapability.resolve()}_initialize(){if("undefined"!=typeof Worker&&!isWorkerDisabled&&!getMainThreadWorkerMessageHandler()){let t=getWorkerSrc();try{(0,_util.isSameOrigin)(window.location.href,t)||(t=createCDNWrapper(new URL(t,window.location).href));const e=new Worker(t),r=new _message_handler.MessageHandler("main","worker",e),n=()=>{e.removeEventListener("error",i),r.destroy(),e.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},i=()=>{this._webWorker||n()};e.addEventListener("error",i),r.on("test",t=>{e.removeEventListener("error",i),this.destroyed?n():t?(this._messageHandler=r,this._port=e,this._webWorker=e,t.supportTransfers||(this.postMessageTransfers=!1),this._readyCapability.resolve(),r.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),r.destroy(),e.terminate())}),r.on("ready",t=>{if(e.removeEventListener("error",i),this.destroyed)n();else try{s()}catch(t){this._setupFakeWorker()}});const s=()=>{const t=new Uint8Array([this.postMessageTransfers?255:0]);try{r.send("test",t,[t.buffer])}catch(e){(0,_util.warn)("Cannot use postMessage transfers."),t[0]=0,r.send("test",t)}};return void s()}catch(t){(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),isWorkerDisabled=!0),setupFakeWorkerGlobal().then(t=>{if(this.destroyed)return void this._readyCapability.reject(new Error("Worker was destroyed"));const e=new LoopbackPort;this._port=e;const r="fake"+nextFakeWorkerId++,n=new _message_handler.MessageHandler(r+"_worker",r,e);t.setup(n,e);const i=new _message_handler.MessageHandler(r,r+"_worker",e);this._messageHandler=i,this._readyCapability.resolve(),i.send("configure",{verbosity:this.verbosity})}).catch(t=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${t.message}".`))})}destroy(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),pdfWorkerPorts.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(t){if(!t||!t.port)throw new Error("PDFWorker.fromPort - invalid method signature.");return pdfWorkerPorts.has(t.port)?pdfWorkerPorts.get(t.port):new PDFWorker(t)}static getWorkerSrc(){return getWorkerSrc()}}return PDFWorker}();exports.PDFWorker=PDFWorker;class WorkerTransport{constructor(t,e,r,n){this.messageHandler=t,this.loadingTask=e,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({docId:e.docId,onUnsupportedFeature:this._onUnsupportedFeature.bind(this)}),this._params=n,this.CMapReaderFactory=new n.CMapReaderFactory({baseUrl:n.cMapUrl,isCompressed:n.cMapPacked}),this.destroyed=!1,this.destroyCapability=null,this._passwordCapability=null,this._networkStream=r,this._fullReader=null,this._lastProgress=null,this.pageCache=[],this.pagePromises=[],this.downloadInfoCapability=(0,_util.createPromiseCapability)(),this.setupMessageHandler()}destroy(){if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=(0,_util.createPromiseCapability)(),this._passwordCapability&&this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));const t=[];this.pageCache.forEach((function(e){e&&t.push(e._destroy())})),this.pageCache.length=0,this.pagePromises.length=0;const e=this.messageHandler.sendWithPromise("Terminate",null);return t.push(e),Promise.all(t).then(()=>{this.fontLoader.clear(),this._networkStream&&this._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:t,loadingTask:e}=this;t.on("GetReader",(t,e)=>{(0,_util.assert)(this._networkStream),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=t=>{this._lastProgress={loaded:t.loaded,total:t.total}},e.onPull=()=>{this._fullReader.read().then((function({value:t,done:r}){r?e.close():((0,_util.assert)((0,_util.isArrayBuffer)(t)),e.enqueue(new Uint8Array(t),1,[t]))})).catch(t=>{e.error(t)})},e.onCancel=t=>{this._fullReader.cancel(t)}}),t.on("ReaderHeadersReady",t=>{const r=(0,_util.createPromiseCapability)(),n=this._fullReader;return n.headersReady.then(()=>{n.isStreamingSupported&&n.isRangeSupported||(this._lastProgress&&e.onProgress&&e.onProgress(this._lastProgress),n.onProgress=t=>{e.onProgress&&e.onProgress({loaded:t.loaded,total:t.total})}),r.resolve({isStreamingSupported:n.isStreamingSupported,isRangeSupported:n.isRangeSupported,contentLength:n.contentLength})},r.reject),r.promise}),t.on("GetRangeReader",(t,e)=>{(0,_util.assert)(this._networkStream);const r=this._networkStream.getRangeReader(t.begin,t.end);r?(e.onPull=()=>{r.read().then((function({value:t,done:r}){r?e.close():((0,_util.assert)((0,_util.isArrayBuffer)(t)),e.enqueue(new Uint8Array(t),1,[t]))})).catch(t=>{e.error(t)})},e.onCancel=t=>{r.cancel(t)}):e.close()}),t.on("GetDoc",({pdfInfo:t})=>{this._numPages=t.numPages,e._capability.resolve(new PDFDocumentProxy(t,this))}),t.on("DocException",(function(t){let r;switch(t.name){case"PasswordException":r=new _util.PasswordException(t.message,t.code);break;case"InvalidPDFException":r=new _util.InvalidPDFException(t.message);break;case"MissingPDFException":r=new _util.MissingPDFException(t.message);break;case"UnexpectedResponseException":r=new _util.UnexpectedResponseException(t.message,t.status);break;case"UnknownErrorException":r=new _util.UnknownErrorException(t.message,t.details)}e._capability.reject(r)})),t.on("PasswordRequest",t=>{if(this._passwordCapability=(0,_util.createPromiseCapability)(),e.onPassword){const r=t=>{this._passwordCapability.resolve({password:t})};try{e.onPassword(r,t.code)}catch(t){this._passwordCapability.reject(t)}}else this._passwordCapability.reject(new _util.PasswordException(t.message,t.code));return this._passwordCapability.promise}),t.on("DataLoaded",t=>{e.onProgress&&e.onProgress({loaded:t.length,total:t.length}),this.downloadInfoCapability.resolve(t)}),t.on("StartRenderPage",t=>{this.destroyed||this.pageCache[t.pageIndex]._startRenderPage(t.transparency,t.intent)}),t.on("commonobj",e=>{if(this.destroyed)return;const[r,n,i]=e;if(!this.commonObjs.has(r))switch(n){case"Font":const e=this._params;if("error"in i){const t=i.error;(0,_util.warn)("Error during font loading: "+t),this.commonObjs.resolve(r,t);break}let s=null;e.pdfBug&&globalThis.FontInspector&&globalThis.FontInspector.enabled&&(s={registerFont(t,e){globalThis.FontInspector.fontAdded(t,e)}});const o=new _font_loader.FontFaceObject(i,{isEvalSupported:e.isEvalSupported,disableFontFace:e.disableFontFace,ignoreErrors:e.ignoreErrors,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),fontRegistry:s});this.fontLoader.bind(o).then(()=>{this.commonObjs.resolve(r,o)},e=>{t.sendWithPromise("FontFallback",{id:r}).finally(()=>{this.commonObjs.resolve(r,o)})});break;case"FontPath":case"FontType3Res":this.commonObjs.resolve(r,i);break;default:throw new Error("Got unknown common object type "+n)}}),t.on("obj",t=>{if(this.destroyed)return;const[e,r,n,i]=t,s=this.pageCache[r];if(!s.objs.has(e))switch(n){case"JpegStream":return new Promise((t,e)=>{const r=new Image;r.onload=function(){t(r)},r.onerror=function(){e(new Error("Error during JPEG image loading")),(0,_display_utils.releaseImageResources)(r)},r.src=i}).then(t=>{s.objs.resolve(e,t)});case"Image":s.objs.resolve(e,i);const t=8e6;i&&"data"in i&&i.data.length>t&&(s.cleanupAfterRender=!0);break;default:throw new Error("Got unknown object type "+n)}}),t.on("DocProgress",t=>{this.destroyed||e.onProgress&&e.onProgress({loaded:t.loaded,total:t.total})}),t.on("UnsupportedFeature",this._onUnsupportedFeature.bind(this)),t.on("JpegDecode",t=>{if(this.destroyed)return Promise.reject(new Error("Worker was destroyed"));if("undefined"==typeof document)return Promise.reject(new Error('"document" is not defined.'));const[e,r]=t;return 3!==r&&1!==r?Promise.reject(new Error("Only 3 components or 1 component can be returned")):new Promise((function(t,n){const i=new Image;i.onload=function(){const{width:e,height:n}=i,s=e*n,o=4*s,a=new Uint8ClampedArray(s*r);let c=document.createElement("canvas");c.width=e,c.height=n;let l=c.getContext("2d");l.drawImage(i,0,0);const u=l.getImageData(0,0,e,n).data;if(3===r)for(let t=0,e=0;t<o;t+=4,e+=3)a[e]=u[t],a[e+1]=u[t+1],a[e+2]=u[t+2];else if(1===r)for(let t=0,e=0;t<o;t+=4,e++)a[e]=u[t];t({data:a,width:e,height:n}),(0,_display_utils.releaseImageResources)(i),c.width=0,c.height=0,c=null,l=null},i.onerror=function(){n(new Error("JpegDecode failed to load image")),(0,_display_utils.releaseImageResources)(i)},i.src=e}))}),t.on("FetchBuiltInCMap",(t,e)=>{if(this.destroyed)return void e.error(new Error("Worker was destroyed"));let r=!1;e.onPull=()=>{r?e.close():(r=!0,this.CMapReaderFactory.fetch(t).then((function(t){e.enqueue(t,1,[t.cMapData.buffer])})).catch((function(t){e.error(t)})))}})}_onUnsupportedFeature({featureId:t}){this.destroyed||this.loadingTask.onUnsupportedFeature&&this.loadingTask.onUnsupportedFeature(t)}getData(){return this.messageHandler.sendWithPromise("GetData",null)}getPage(t){if(!Number.isInteger(t)||t<=0||t>this._numPages)return Promise.reject(new Error("Invalid page request"));const e=t-1;if(e in this.pagePromises)return this.pagePromises[e];const r=this.messageHandler.sendWithPromise("GetPage",{pageIndex:e}).then(t=>{if(this.destroyed)throw new Error("Transport destroyed");const r=new PDFPageProxy(e,t,this,this._params.pdfBug);return this.pageCache[e]=r,r});return this.pagePromises[e]=r,r}getPageIndex(t){return this.messageHandler.sendWithPromise("GetPageIndex",{ref:t}).catch((function(t){return Promise.reject(new Error(t))}))}getAnnotations(t,e){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:t,intent:e})}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(t){return"string"!=typeof t?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:t})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getJavaScript(){return this.messageHandler.sendWithPromise("GetJavaScript",null)}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){return this.messageHandler.sendWithPromise("GetMetadata",null).then(t=>({info:t[0],metadata:t[1]?new _metadata.Metadata(t[1]):null,contentDispositionFilename:this._fullReader?this._fullReader.filename:null}))}getStats(){return this.messageHandler.sendWithPromise("GetStats",null)}startCleanup(){return this.messageHandler.sendWithPromise("Cleanup",null).then(()=>{for(let t=0,e=this.pageCache.length;t<e;t++){const e=this.pageCache[t];if(e&&!e.cleanup())throw new Error(`startCleanup: Page ${t+1} is currently rendering.`)}this.commonObjs.clear(),this.fontLoader.clear()})}get loadingParams(){const t=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:t.disableAutoFetch,disableCreateObjectURL:t.disableCreateObjectURL,disableFontFace:t.disableFontFace,nativeImageDecoderSupport:t.nativeImageDecoderSupport})}}class PDFObjects{constructor(){this._objs=Object.create(null)}_ensureObj(t){return this._objs[t]?this._objs[t]:this._objs[t]={capability:(0,_util.createPromiseCapability)(),data:null,resolved:!1}}get(t,e=null){if(e)return this._ensureObj(t).capability.promise.then(e),null;const r=this._objs[t];if(!r||!r.resolved)throw new Error(`Requesting object that isn't resolved yet ${t}.`);return r.data}has(t){const e=this._objs[t];return!!e&&e.resolved}resolve(t,e){const r=this._ensureObj(t);r.resolved=!0,r.data=e,r.capability.resolve(e)}clear(){for(const t in this._objs){const{data:e}=this._objs[t];"undefined"!=typeof Image&&e instanceof Image&&(0,_display_utils.releaseImageResources)(e)}this._objs=Object.create(null)}}class RenderTask{constructor(t){this._internalRenderTask=t,this.onContinue=null}get promise(){return this._internalRenderTask.capability.promise}cancel(){this._internalRenderTask.cancel()}then(t,e){throw new Error("Removed API method: RenderTask.then, use the `promise` getter instead.")}}const InternalRenderTask=function(){const t=new WeakSet;return class{constructor({callback:t,params:e,objs:r,commonObjs:n,operatorList:i,pageIndex:s,canvasFactory:o,webGLContext:a,useRequestAnimationFrame:c=!1,pdfBug:l=!1}){this.callback=t,this.params=e,this.objs=r,this.commonObjs=n,this.operatorListIdx=null,this.operatorList=i,this._pageIndex=s,this.canvasFactory=o,this.webGLContext=a,this._pdfBug=l,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=!0===c&&"undefined"!=typeof window,this.cancelled=!1,this.capability=(0,_util.createPromiseCapability)(),this.task=new RenderTask(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=e.canvasContext.canvas}initializeGraphics(e=!1){if(this.cancelled)return;if(this._canvas){if(t.has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");t.add(this._canvas)}this._pdfBug&&globalThis.StepperManager&&globalThis.StepperManager.enabled&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:r,viewport:n,transform:i,imageLayer:s,background:o}=this.params;this.gfx=new _canvas.CanvasGraphics(r,this.commonObjs,this.objs,this.canvasFactory,this.webGLContext,s),this.gfx.beginDrawing({transform:i,viewport:n,transparency:e,background:o}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback&&this.graphicsReadyCallback()}cancel(e=null){this.running=!1,this.cancelled=!0,this.gfx&&this.gfx.endDrawing(),this._canvas&&t.delete(this._canvas),this.callback(e||new _display_utils.RenderingCancelledException("Rendering cancelled, page "+(this._pageIndex+1),"canvas"))}operatorListChanged(){this.graphicsReady?(this.stepper&&this.stepper.updateOperatorList(this.operatorList),this.running||this._continue()):this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound)}_continue(){this.running=!0,this.cancelled||(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame(()=>{this._nextBound().catch(this.cancel.bind(this))}):Promise.resolve().then(this._nextBound).catch(this.cancel.bind(this))}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),this._canvas&&t.delete(this._canvas),this.callback())))}}}(),version="2.4.456";exports.version=version;const build="228a591c";exports.build=build},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.addLinkAttributes=function(t,{url:e,target:r,rel:i,enabled:s=!0}={}){(0,n.assert)(e&&"string"==typeof e,'addLinkAttributes: A valid "url" parameter must provided.');const o=(0,n.removeNullCharacters)(e);s?t.href=t.title=o:(t.href="",t.title="Disabled: "+o,t.onclick=()=>!1);let c="";switch(r){case a.NONE:break;case a.SELF:c="_self";break;case a.BLANK:c="_blank";break;case a.PARENT:c="_parent";break;case a.TOP:c="_top"}t.target=c,t.rel="string"==typeof i?i:"noopener noreferrer nofollow"},e.getFilenameFromUrl=function(t){const e=t.indexOf("#"),r=t.indexOf("?"),n=Math.min(e>0?e:t.length,r>0?r:t.length);return t.substring(t.lastIndexOf("/",n)+1,n)},e.isFetchSupported=c,e.isValidFetchUrl=l,e.loadScript=function(t){return new Promise((e,r)=>{const n=document.createElement("script");n.src=t,n.onload=e,n.onerror=function(){r(new Error("Cannot load script at: "+n.src))},(document.head||document.documentElement).appendChild(n)})},e.deprecated=function(t){console.log("Deprecated API usage: "+t)},e.releaseImageResources=function(t){(0,n.assert)(t instanceof Image,"Invalid `img` parameter.");const e=t.src;"string"==typeof e&&e.startsWith("blob:")&&URL.revokeObjectURL&&URL.revokeObjectURL(e),t.removeAttribute("src")},e.PDFDateString=e.StatTimer=e.DOMSVGFactory=e.DOMCMapReaderFactory=e.DOMCanvasFactory=e.DEFAULT_LINK_REL=e.LinkTarget=e.RenderingCancelledException=e.PageViewport=void 0;var n=r(1);e.DEFAULT_LINK_REL="noopener noreferrer nofollow";const i="http://www.w3.org/2000/svg";e.DOMCanvasFactory=class{create(t,e){if(t<=0||e<=0)throw new Error("Invalid canvas size");const r=document.createElement("canvas"),n=r.getContext("2d");return r.width=t,r.height=e,{canvas:r,context:n}}reset(t,e,r){if(!t.canvas)throw new Error("Canvas is not specified");if(e<=0||r<=0)throw new Error("Invalid canvas size");t.canvas.width=e,t.canvas.height=r}destroy(t){if(!t.canvas)throw new Error("Canvas is not specified");t.canvas.width=0,t.canvas.height=0,t.canvas=null,t.context=null}},e.DOMCMapReaderFactory=class{constructor({baseUrl:t=null,isCompressed:e=!1}){this.baseUrl=t,this.isCompressed=e}async fetch({name:t}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!t)throw new Error("CMap name must be specified.");const e=this.baseUrl+t+(this.isCompressed?".bcmap":""),r=this.isCompressed?n.CMapCompressionType.BINARY:n.CMapCompressionType.NONE;return c()&&l(e,document.baseURI)?fetch(e).then(async t=>{if(!t.ok)throw new Error(t.statusText);let e;return e=this.isCompressed?new Uint8Array(await t.arrayBuffer()):(0,n.stringToBytes)(await t.text()),{cMapData:e,compressionType:r}}).catch(t=>{throw new Error("Unable to load "+(this.isCompressed?"binary ":"")+"CMap at: "+e)}):new Promise((t,i)=>{const s=new XMLHttpRequest;s.open("GET",e,!0),this.isCompressed&&(s.responseType="arraybuffer"),s.onreadystatechange=()=>{if(s.readyState===XMLHttpRequest.DONE){if(200===s.status||0===s.status){let e;if(this.isCompressed&&s.response?e=new Uint8Array(s.response):!this.isCompressed&&s.responseText&&(e=(0,n.stringToBytes)(s.responseText)),e)return void t({cMapData:e,compressionType:r})}i(new Error(s.statusText))}},s.send(null)}).catch(t=>{throw new Error("Unable to load "+(this.isCompressed?"binary ":"")+"CMap at: "+e)})}},e.DOMSVGFactory=class{create(t,e){(0,n.assert)(t>0&&e>0,"Invalid SVG dimensions");const r=document.createElementNS(i,"svg:svg");return r.setAttribute("version","1.1"),r.setAttribute("width",t+"px"),r.setAttribute("height",e+"px"),r.setAttribute("preserveAspectRatio","none"),r.setAttribute("viewBox","0 0 "+t+" "+e),r}createElement(t){return(0,n.assert)("string"==typeof t,"Invalid SVG element type"),document.createElementNS(i,t)}};class s{constructor({viewBox:t,scale:e,rotation:r,offsetX:n=0,offsetY:i=0,dontFlip:s=!1}){this.viewBox=t,this.scale=e,this.rotation=r,this.offsetX=n,this.offsetY=i;const o=(t[2]+t[0])/2,a=(t[3]+t[1])/2;let c,l,u,h,d,p,f,g;switch(r=(r%=360)<0?r+360:r){case 180:c=-1,l=0,u=0,h=1;break;case 90:c=0,l=1,u=1,h=0;break;case 270:c=0,l=-1,u=-1,h=0;break;default:c=1,l=0,u=0,h=-1}s&&(u=-u,h=-h),0===c?(d=Math.abs(a-t[1])*e+n,p=Math.abs(o-t[0])*e+i,f=Math.abs(t[3]-t[1])*e,g=Math.abs(t[2]-t[0])*e):(d=Math.abs(o-t[0])*e+n,p=Math.abs(a-t[1])*e+i,f=Math.abs(t[2]-t[0])*e,g=Math.abs(t[3]-t[1])*e),this.transform=[c*e,l*e,u*e,h*e,d-c*e*o-u*e*a,p-l*e*o-h*e*a],this.width=f,this.height=g}clone({scale:t=this.scale,rotation:e=this.rotation,offsetX:r=this.offsetX,offsetY:n=this.offsetY,dontFlip:i=!1}={}){return new s({viewBox:this.viewBox.slice(),scale:t,rotation:e,offsetX:r,offsetY:n,dontFlip:i})}convertToViewportPoint(t,e){return n.Util.applyTransform([t,e],this.transform)}convertToViewportRectangle(t){const e=n.Util.applyTransform([t[0],t[1]],this.transform),r=n.Util.applyTransform([t[2],t[3]],this.transform);return[e[0],e[1],r[0],r[1]]}convertToPdfPoint(t,e){return n.Util.applyInverseTransform([t,e],this.transform)}}e.PageViewport=s;class o extends n.BaseException{constructor(t,e){super(t),this.type=e}}e.RenderingCancelledException=o;const a={NONE:0,SELF:1,BLANK:2,PARENT:3,TOP:4};function c(){return"undefined"!=typeof fetch&&"undefined"!=typeof Response&&"body"in Response.prototype&&"undefined"!=typeof ReadableStream}function l(t,e){try{const{protocol:r}=e?new URL(t,e):new URL(t);return"http:"===r||"https:"===r}catch(t){return!1}}let u;e.LinkTarget=a,e.StatTimer=class{constructor(){this.started=Object.create(null),this.times=[]}time(t){t in this.started&&(0,n.warn)("Timer is already running for "+t),this.started[t]=Date.now()}timeEnd(t){t in this.started||(0,n.warn)("Timer has not been started for "+t),this.times.push({name:t,start:this.started[t],end:Date.now()}),delete this.started[t]}toString(){const t=[];let e=0;for(const t of this.times){const r=t.name;r.length>e&&(e=r.length)}for(const r of this.times){const n=r.end-r.start;t.push(`${r.name.padEnd(e)} ${n}ms\n`)}return t.join("")}},e.PDFDateString=class{static toDateObject(t){if(!t||!(0,n.isString)(t))return null;u||(u=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const e=u.exec(t);if(!e)return null;const r=parseInt(e[1],10);let i=parseInt(e[2],10);i=i>=1&&i<=12?i-1:0;let s=parseInt(e[3],10);s=s>=1&&s<=31?s:1;let o=parseInt(e[4],10);o=o>=0&&o<=23?o:0;let a=parseInt(e[5],10);a=a>=0&&a<=59?a:0;let c=parseInt(e[6],10);c=c>=0&&c<=59?c:0;const l=e[7]||"Z";let h=parseInt(e[8],10);h=h>=0&&h<=23?h:0;let d=parseInt(e[9],10)||0;return d=d>=0&&d<=59?d:0,"-"===l?(o+=h,a+=d):"+"===l&&(o-=h,a-=d),new Date(Date.UTC(r,i,s,o,a,c))}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FontLoader=e.FontFaceObject=void 0;var n=r(1);class i{constructor({docId:t,onUnsupportedFeature:e}){this.constructor===i&&(0,n.unreachable)("Cannot initialize BaseFontLoader."),this.docId=t,this._onUnsupportedFeature=e,this.nativeFontFaces=[],this.styleElement=null}addNativeFontFace(t){this.nativeFontFaces.push(t),document.fonts.add(t)}insertRule(t){let e=this.styleElement;e||(e=this.styleElement=document.createElement("style"),e.id="PDFJS_FONT_STYLE_TAG_"+this.docId,document.documentElement.getElementsByTagName("head")[0].appendChild(e));const r=e.sheet;r.insertRule(t,r.cssRules.length)}clear(){this.nativeFontFaces.forEach((function(t){document.fonts.delete(t)})),this.nativeFontFaces.length=0,this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async bind(t){if(t.attached||t.missingFile)return;if(t.attached=!0,this.isFontLoadingAPISupported){const e=t.createNativeFontFace();if(e){this.addNativeFontFace(e);try{await e.loaded}catch(r){throw this._onUnsupportedFeature({featureId:n.UNSUPPORTED_FEATURES.font}),(0,n.warn)(`Failed to load font '${e.family}': '${r}'.`),t.disableFontFace=!0,r}}return}const e=t.createFontFaceRule();if(e){if(this.insertRule(e),this.isSyncFontLoadingSupported)return;await new Promise(r=>{const n=this._queueLoadingCallback(r);this._prepareFontLoadEvent([e],[t],n)})}}_queueLoadingCallback(t){(0,n.unreachable)("Abstract method `_queueLoadingCallback`.")}get isFontLoadingAPISupported(){const t="undefined"!=typeof document&&!!document.fonts;return(0,n.shadow)(this,"isFontLoadingAPISupported",t)}get isSyncFontLoadingSupported(){(0,n.unreachable)("Abstract method `isSyncFontLoadingSupported`.")}get _loadTestFont(){(0,n.unreachable)("Abstract method `_loadTestFont`.")}_prepareFontLoadEvent(t,e,r){(0,n.unreachable)("Abstract method `_prepareFontLoadEvent`.")}}let s;e.FontLoader=s,e.FontLoader=s=class extends i{constructor(t){super(t),this.loadingContext={requests:[],nextRequestId:0},this.loadTestFontId=0}get isSyncFontLoadingSupported(){let t=!1;if("undefined"==typeof navigator)t=!0;else{const e=/Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);e&&e[1]>=14&&(t=!0)}return(0,n.shadow)(this,"isSyncFontLoadingSupported",t)}_queueLoadingCallback(t){const e=this.loadingContext,r={id:"pdfjs-font-loading-"+e.nextRequestId++,done:!1,complete:function(){for((0,n.assert)(!r.done,"completeRequest() cannot be called twice."),r.done=!0;e.requests.length>0&&e.requests[0].done;){const t=e.requests.shift();setTimeout(t.callback,0)}},callback:t};return e.requests.push(r),r}get _loadTestFont(){return(0,n.shadow)(this,"_loadTestFont",atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA=="))}_prepareFontLoadEvent(t,e,r){function i(t,e){return t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|255&t.charCodeAt(e+3)}function s(t,e,r,n){return t.substring(0,e)+n+t.substring(e+r)}let o,a;const c=document.createElement("canvas");c.width=1,c.height=1;const l=c.getContext("2d");let u=0;const h=`lt${Date.now()}${this.loadTestFontId++}`;let d=this._loadTestFont;d=s(d,976,h.length,h);let p=i(d,16);for(o=0,a=h.length-3;o<a;o+=4)p=p-1482184792+i(h,o)|0;o<h.length&&(p=p-1482184792+i(h+"XXX",o)|0),d=s(d,16,4,(0,n.string32)(p));const f=`@font-face {font-family:"${h}";src:url(data:font/opentype;base64,${btoa(d)});}`;this.insertRule(f);const g=[];for(o=0,a=e.length;o<a;o++)g.push(e[o].loadedName);g.push(h);const m=document.createElement("div");for(m.style.visibility="hidden",m.style.width=m.style.height="10px",m.style.position="absolute",m.style.top=m.style.left="0px",o=0,a=g.length;o<a;++o){const t=document.createElement("span");t.textContent="Hi",t.style.fontFamily=g[o],m.appendChild(t)}document.body.appendChild(m),function t(e,r){if(u++,u>30)return(0,n.warn)("Load test font never loaded."),void r();l.font="30px "+e,l.fillText(".",0,20),l.getImageData(0,0,1,1).data[3]>0?r():setTimeout(t.bind(null,e,r))}(h,(function(){document.body.removeChild(m),r.complete()}))}},e.FontFaceObject=class{constructor(t,{isEvalSupported:e=!0,disableFontFace:r=!1,ignoreErrors:n=!1,onUnsupportedFeature:i=null,fontRegistry:s=null}){this.compiledGlyphs=Object.create(null);for(const e in t)this[e]=t[e];this.isEvalSupported=!1!==e,this.disableFontFace=!0===r,this.ignoreErrors=!0===n,this._onUnsupportedFeature=i,this.fontRegistry=s}createNativeFontFace(){if(!this.data||this.disableFontFace)return null;const t=new FontFace(this.loadedName,this.data,{});return this.fontRegistry&&this.fontRegistry.registerFont(this),t}createFontFaceRule(){if(!this.data||this.disableFontFace)return null;const t=(0,n.bytesToString)(new Uint8Array(this.data)),e=`url(data:${this.mimetype};base64,${btoa(t)});`,r=`@font-face {font-family:"${this.loadedName}";src:${e}}`;return this.fontRegistry&&this.fontRegistry.registerFont(this,e),r}getPathGenerator(t,e){if(void 0!==this.compiledGlyphs[e])return this.compiledGlyphs[e];let r,i;try{r=t.get(this.loadedName+"_path_"+e)}catch(t){if(!this.ignoreErrors)throw t;return this._onUnsupportedFeature&&this._onUnsupportedFeature({featureId:n.UNSUPPORTED_FEATURES.font}),(0,n.warn)(`getPathGenerator - ignoring character: "${t}".`),this.compiledGlyphs[e]=function(t,e){}}if(this.isEvalSupported&&n.IsEvalSupportedCached.value){let t,n="";for(let e=0,s=r.length;e<s;e++)i=r[e],t=void 0!==i.args?i.args.join(","):"",n+="c."+i.cmd+"("+t+");\n";return this.compiledGlyphs[e]=new Function("c","size",n)}return this.compiledGlyphs[e]=function(t,e){for(let n=0,s=r.length;n<s;n++)i=r[n],"scale"===i.cmd&&(i.args=[e,-e]),t[i.cmd].apply(t,i.args)}}}},function(t,e,r){"use strict";const n=Object.create(null);{const{isNodeJS:t}=r(7),e="undefined"!=typeof navigator&&navigator.userAgent||"",i=/Trident/.test(e),s=/CriOS/.test(e);(i||s)&&(n.disableCreateObjectURL=!0),t&&(n.disableFontFace=!0,n.nativeImageDecoderSupport="none")}e.apiCompatibilityParams=Object.freeze(n)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isNodeJS=void 0;const n="object"==typeof process&&process+""=="[object process]"&&!process.versions.nw&&!process.versions.electron;e.isNodeJS=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CanvasGraphics=void 0;var n=r(1),i=r(9);function s(t){t.mozCurrentTransform||(t._originalSave=t.save,t._originalRestore=t.restore,t._originalRotate=t.rotate,t._originalScale=t.scale,t._originalTranslate=t.translate,t._originalTransform=t.transform,t._originalSetTransform=t.setTransform,t._transformMatrix=t._transformMatrix||[1,0,0,1,0,0],t._transformStack=[],Object.defineProperty(t,"mozCurrentTransform",{get:function(){return this._transformMatrix}}),Object.defineProperty(t,"mozCurrentTransformInverse",{get:function(){var t=this._transformMatrix,e=t[0],r=t[1],n=t[2],i=t[3],s=t[4],o=t[5],a=e*i-r*n,c=r*n-e*i;return[i/a,r/c,n/c,e/a,(i*s-n*o)/c,(r*s-e*o)/a]}}),t.save=function(){var t=this._transformMatrix;this._transformStack.push(t),this._transformMatrix=t.slice(0,6),this._originalSave()},t.restore=function(){var t=this._transformStack.pop();t&&(this._transformMatrix=t,this._originalRestore())},t.translate=function(t,e){var r=this._transformMatrix;r[4]=r[0]*t+r[2]*e+r[4],r[5]=r[1]*t+r[3]*e+r[5],this._originalTranslate(t,e)},t.scale=function(t,e){var r=this._transformMatrix;r[0]=r[0]*t,r[1]=r[1]*t,r[2]=r[2]*e,r[3]=r[3]*e,this._originalScale(t,e)},t.transform=function(e,r,n,i,s,o){var a=this._transformMatrix;this._transformMatrix=[a[0]*e+a[2]*r,a[1]*e+a[3]*r,a[0]*n+a[2]*i,a[1]*n+a[3]*i,a[0]*s+a[2]*o+a[4],a[1]*s+a[3]*o+a[5]],t._originalTransform(e,r,n,i,s,o)},t.setTransform=function(e,r,n,i,s,o){this._transformMatrix=[e,r,n,i,s,o],t._originalSetTransform(e,r,n,i,s,o)},t.rotate=function(t){var e=Math.cos(t),r=Math.sin(t),n=this._transformMatrix;this._transformMatrix=[n[0]*e+n[2]*r,n[1]*e+n[3]*r,n[0]*-r+n[2]*e,n[1]*-r+n[3]*e,n[4],n[5]],this._originalRotate(t)})}var o=function(){function t(t){this.canvasFactory=t,this.cache=Object.create(null)}return t.prototype={getCanvas:function(t,e,r,n){var i;return void 0!==this.cache[t]?(i=this.cache[t],this.canvasFactory.reset(i,e,r),i.context.setTransform(1,0,0,1,0,0)):(i=this.canvasFactory.create(e,r),this.cache[t]=i),n&&s(i.context),i},clear(){for(var t in this.cache){var e=this.cache[t];this.canvasFactory.destroy(e),delete this.cache[t]}}},t}(),a=function(){function t(){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=n.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=n.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=n.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.resumeSMaskCtx=null}return t.prototype={clone:function(){return Object.create(this)},setCurrentPoint:function(t,e){this.x=t,this.y=e}},t}(),c=function(){function t(t,e,r,n,i,c){this.ctx=t,this.current=new a,this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=e,this.objs=r,this.canvasFactory=n,this.webGLContext=i,this.imageLayer=c,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.cachedCanvases=new o(this.canvasFactory),t&&s(t),this._cachedGetSinglePixelWidth=null}function e(t,e){if("undefined"!=typeof ImageData&&e instanceof ImageData)t.putImageData(e,0,0);else{var r,i,s,o,a,c=e.height,l=e.width,u=c%16,h=(c-u)/16,d=0===u?h:h+1,p=t.createImageData(l,16),f=0,g=e.data,m=p.data;if(e.kind===n.ImageKind.GRAYSCALE_1BPP){var y=g.byteLength,v=new Uint32Array(m.buffer,0,m.byteLength>>2),b=v.length,A=l+7>>3,_=4294967295,w=n.IsLittleEndianCached.value?4278190080:255;for(i=0;i<d;i++){for(o=i<h?16:u,r=0,s=0;s<o;s++){for(var x=y-f,S=0,E=x>A?l:8*x-7,C=-8&E,T=0,R=0;S<C;S+=8)R=g[f++],v[r++]=128&R?_:w,v[r++]=64&R?_:w,v[r++]=32&R?_:w,v[r++]=16&R?_:w,v[r++]=8&R?_:w,v[r++]=4&R?_:w,v[r++]=2&R?_:w,v[r++]=1&R?_:w;for(;S<E;S++)0===T&&(R=g[f++],T=128),v[r++]=R&T?_:w,T>>=1}for(;r<b;)v[r++]=0;t.putImageData(p,0,16*i)}}else if(e.kind===n.ImageKind.RGBA_32BPP){for(s=0,a=16*l*4,i=0;i<h;i++)m.set(g.subarray(f,f+a)),f+=a,t.putImageData(p,0,s),s+=16;i<d&&(a=l*u*4,m.set(g.subarray(f,f+a)),t.putImageData(p,0,s))}else{if(e.kind!==n.ImageKind.RGB_24BPP)throw new Error("bad image kind: "+e.kind);for(a=l*(o=16),i=0;i<d;i++){for(i>=h&&(a=l*(o=u)),r=0,s=a;s--;)m[r++]=g[f++],m[r++]=g[f++],m[r++]=g[f++],m[r++]=255;t.putImageData(p,0,16*i)}}}}function r(t,e){for(var r=e.height,n=e.width,i=r%16,s=(r-i)/16,o=0===i?s:s+1,a=t.createImageData(n,16),c=0,l=e.data,u=a.data,h=0;h<o;h++){for(var d=h<s?16:i,p=3,f=0;f<d;f++)for(var g=0,m=0;m<n;m++){if(!g){var y=l[c++];g=128}u[p]=y&g?0:255,p+=4,g>>=1}t.putImageData(a,0,16*h)}}function c(t,e){for(var r=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font"],n=0,i=r.length;n<i;n++){var s=r[n];void 0!==t[s]&&(e[s]=t[s])}void 0!==t.setLineDash&&(e.setLineDash(t.getLineDash()),e.lineDashOffset=t.lineDashOffset)}function l(t){t.strokeStyle="#000000",t.fillStyle="#000000",t.fillRule="nonzero",t.globalAlpha=1,t.lineWidth=1,t.lineCap="butt",t.lineJoin="miter",t.miterLimit=10,t.globalCompositeOperation="source-over",t.font="10px sans-serif",void 0!==t.setLineDash&&(t.setLineDash([]),t.lineDashOffset=0)}function u(t,e,r,n){for(var i=t.length,s=3;s<i;s+=4){var o=t[s];if(0===o)t[s-3]=e,t[s-2]=r,t[s-1]=n;else if(o<255){var a=255-o;t[s-3]=t[s-3]*o+e*a>>8,t[s-2]=t[s-2]*o+r*a>>8,t[s-1]=t[s-1]*o+n*a>>8}}}function h(t,e,r){for(var n=t.length,i=3;i<n;i+=4){var s=r?r[t[i]]:t[i];e[i]=e[i]*s*(1/255)|0}}function d(t,e,r){for(var n=t.length,i=3;i<n;i+=4){var s=77*t[i-3]+152*t[i-2]+28*t[i-1];e[i]=r?e[i]*r[s>>8]>>8:e[i]*s>>16}}function p(t,e,r,n){var i=e.canvas,s=e.context;t.setTransform(e.scaleX,0,0,e.scaleY,e.offsetX,e.offsetY);var o=e.backdrop||null;if(!e.transferMap&&n.isEnabled){const s=n.composeSMask({layer:r.canvas,mask:i,properties:{subtype:e.subtype,backdrop:o}});return t.setTransform(1,0,0,1,0,0),void t.drawImage(s,e.offsetX,e.offsetY)}!function(t,e,r,n,i,s,o){var a,c=!!s,l=c?s[0]:0,p=c?s[1]:0,f=c?s[2]:0;a="Luminosity"===i?d:h;for(var g=Math.min(n,Math.ceil(1048576/r)),m=0;m<n;m+=g){var y=Math.min(g,n-m),v=t.getImageData(0,m,r,y),b=e.getImageData(0,m,r,y);c&&u(v.data,l,p,f),a(v.data,b.data,o),t.putImageData(b,0,m)}}(s,r,i.width,i.height,e.subtype,o,e.transferMap),t.drawImage(i,0,0)}var f=["butt","round","square"],g=["miter","round","bevel"],m={},y={};for(var v in t.prototype={beginDrawing({transform:t,viewport:e,transparency:r=!1,background:n=null}){var i=this.ctx.canvas.width,s=this.ctx.canvas.height;if(this.ctx.save(),this.ctx.fillStyle=n||"rgb(255, 255, 255)",this.ctx.fillRect(0,0,i,s),this.ctx.restore(),r){var o=this.cachedCanvases.getCanvas("transparent",i,s,!0);this.compositeCtx=this.ctx,this.transparentCanvas=o.canvas,this.ctx=o.context,this.ctx.save(),this.ctx.transform.apply(this.ctx,this.compositeCtx.mozCurrentTransform)}this.ctx.save(),l(this.ctx),t&&this.ctx.transform.apply(this.ctx,t),this.ctx.transform.apply(this.ctx,e.transform),this.baseTransform=this.ctx.mozCurrentTransform.slice(),this.imageLayer&&this.imageLayer.beginLayout()},executeOperatorList:function(t,e,r,i){var s=t.argsArray,o=t.fnArray,a=e||0,c=s.length;if(c===a)return a;for(var l,u=c-a>10&&"function"==typeof r,h=u?Date.now()+15:0,d=0,p=this.commonObjs,f=this.objs;;){if(void 0!==i&&a===i.nextBreakPoint)return i.breakIt(a,r),a;if((l=o[a])!==n.OPS.dependency)this[l].apply(this,s[a]);else for(const t of s[a]){const e=t.startsWith("g_")?p:f;if(!e.has(t))return e.get(t,r),a}if(++a===c)return a;if(u&&++d>10){if(Date.now()>h)return r(),a;d=0}}},endDrawing:function(){null!==this.current.activeSMask&&this.endSMaskGroup(),this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null),this.cachedCanvases.clear(),this.webGLContext.clear(),this.imageLayer&&this.imageLayer.endLayout()},setLineWidth:function(t){this.current.lineWidth=t,this.ctx.lineWidth=t},setLineCap:function(t){this.ctx.lineCap=f[t]},setLineJoin:function(t){this.ctx.lineJoin=g[t]},setMiterLimit:function(t){this.ctx.miterLimit=t},setDash:function(t,e){var r=this.ctx;void 0!==r.setLineDash&&(r.setLineDash(t),r.lineDashOffset=e)},setRenderingIntent(t){},setFlatness(t){},setGState:function(t){for(var e=0,r=t.length;e<r;e++){var n=t[e],i=n[0],s=n[1];switch(i){case"LW":this.setLineWidth(s);break;case"LC":this.setLineCap(s);break;case"LJ":this.setLineJoin(s);break;case"ML":this.setMiterLimit(s);break;case"D":this.setDash(s[0],s[1]);break;case"RI":this.setRenderingIntent(s);break;case"FL":this.setFlatness(s);break;case"Font":this.setFont(s[0],s[1]);break;case"CA":this.current.strokeAlpha=n[1];break;case"ca":this.current.fillAlpha=n[1],this.ctx.globalAlpha=n[1];break;case"BM":this.ctx.globalCompositeOperation=s;break;case"SMask":this.current.activeSMask&&(this.stateStack.length>0&&this.stateStack[this.stateStack.length-1].activeSMask===this.current.activeSMask?this.suspendSMaskGroup():this.endSMaskGroup()),this.current.activeSMask=s?this.tempSMask:null,this.current.activeSMask&&this.beginSMaskGroup(),this.tempSMask=null}}},beginSMaskGroup:function(){var t=this.current.activeSMask,e=t.canvas.width,r=t.canvas.height,n="smaskGroupAt"+this.groupLevel,i=this.cachedCanvases.getCanvas(n,e,r,!0),s=this.ctx,o=s.mozCurrentTransform;this.ctx.save();var a=i.context;a.scale(1/t.scaleX,1/t.scaleY),a.translate(-t.offsetX,-t.offsetY),a.transform.apply(a,o),t.startTransformInverse=a.mozCurrentTransformInverse,c(s,a),this.ctx=a,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(s),this.groupLevel++},suspendSMaskGroup:function(){var t=this.ctx;this.groupLevel--,this.ctx=this.groupStack.pop(),p(this.ctx,this.current.activeSMask,t,this.webGLContext),this.ctx.restore(),this.ctx.save(),c(t,this.ctx),this.current.resumeSMaskCtx=t;var e=n.Util.transform(this.current.activeSMask.startTransformInverse,t.mozCurrentTransform);this.ctx.transform.apply(this.ctx,e),t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,t.canvas.width,t.canvas.height),t.restore()},resumeSMaskGroup:function(){var t=this.current.resumeSMaskCtx,e=this.ctx;this.ctx=t,this.groupStack.push(e),this.groupLevel++},endSMaskGroup:function(){var t=this.ctx;this.groupLevel--,this.ctx=this.groupStack.pop(),p(this.ctx,this.current.activeSMask,t,this.webGLContext),this.ctx.restore(),c(t,this.ctx);var e=n.Util.transform(this.current.activeSMask.startTransformInverse,t.mozCurrentTransform);this.ctx.transform.apply(this.ctx,e)},save:function(){this.ctx.save();var t=this.current;this.stateStack.push(t),this.current=t.clone(),this.current.resumeSMaskCtx=null},restore:function(){this.current.resumeSMaskCtx&&this.resumeSMaskGroup(),null===this.current.activeSMask||0!==this.stateStack.length&&this.stateStack[this.stateStack.length-1].activeSMask===this.current.activeSMask||this.endSMaskGroup(),0!==this.stateStack.length&&(this.current=this.stateStack.pop(),this.ctx.restore(),this.pendingClip=null,this._cachedGetSinglePixelWidth=null)},transform:function(t,e,r,n,i,s){this.ctx.transform(t,e,r,n,i,s),this._cachedGetSinglePixelWidth=null},constructPath:function(t,e){for(var r=this.ctx,i=this.current,s=i.x,o=i.y,a=0,c=0,l=t.length;a<l;a++)switch(0|t[a]){case n.OPS.rectangle:s=e[c++],o=e[c++];var u=e[c++],h=e[c++];0===u&&(u=this.getSinglePixelWidth()),0===h&&(h=this.getSinglePixelWidth());var d=s+u,p=o+h;this.ctx.moveTo(s,o),this.ctx.lineTo(d,o),this.ctx.lineTo(d,p),this.ctx.lineTo(s,p),this.ctx.lineTo(s,o),this.ctx.closePath();break;case n.OPS.moveTo:s=e[c++],o=e[c++],r.moveTo(s,o);break;case n.OPS.lineTo:s=e[c++],o=e[c++],r.lineTo(s,o);break;case n.OPS.curveTo:s=e[c+4],o=e[c+5],r.bezierCurveTo(e[c],e[c+1],e[c+2],e[c+3],s,o),c+=6;break;case n.OPS.curveTo2:r.bezierCurveTo(s,o,e[c],e[c+1],e[c+2],e[c+3]),s=e[c+2],o=e[c+3],c+=4;break;case n.OPS.curveTo3:s=e[c+2],o=e[c+3],r.bezierCurveTo(e[c],e[c+1],s,o,s,o),c+=4;break;case n.OPS.closePath:r.closePath()}i.setCurrentPoint(s,o)},closePath:function(){this.ctx.closePath()},stroke:function(t){t=void 0===t||t;var e=this.ctx,r=this.current.strokeColor;if(e.globalAlpha=this.current.strokeAlpha,r&&r.hasOwnProperty("type")&&"Pattern"===r.type){e.save();const t=e.mozCurrentTransform,i=n.Util.singularValueDecompose2dScale(t)[0];e.strokeStyle=r.getPattern(e,this),e.lineWidth=Math.max(.65*this.getSinglePixelWidth(),this.current.lineWidth*i),e.stroke(),e.restore()}else e.lineWidth=Math.max(.65*this.getSinglePixelWidth(),this.current.lineWidth),e.stroke();t&&this.consumePath(),e.globalAlpha=this.current.fillAlpha},closeStroke:function(){this.closePath(),this.stroke()},fill:function(t){t=void 0===t||t;var e=this.ctx,r=this.current.fillColor,n=!1;this.current.patternFill&&(e.save(),this.baseTransform&&e.setTransform.apply(e,this.baseTransform),e.fillStyle=r.getPattern(e,this),n=!0),this.pendingEOFill?(e.fill("evenodd"),this.pendingEOFill=!1):e.fill(),n&&e.restore(),t&&this.consumePath()},eoFill:function(){this.pendingEOFill=!0,this.fill()},fillStroke:function(){this.fill(!1),this.stroke(!1),this.consumePath()},eoFillStroke:function(){this.pendingEOFill=!0,this.fillStroke()},closeFillStroke:function(){this.closePath(),this.fillStroke()},closeEOFillStroke:function(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()},endPath:function(){this.consumePath()},clip:function(){this.pendingClip=m},eoClip:function(){this.pendingClip=y},beginText:function(){this.current.textMatrix=n.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0},endText:function(){var t=this.pendingTextPaths,e=this.ctx;if(void 0!==t){e.save(),e.beginPath();for(var r=0;r<t.length;r++){var n=t[r];e.setTransform.apply(e,n.transform),e.translate(n.x,n.y),n.addToPath(e,n.fontSize)}e.restore(),e.clip(),e.beginPath(),delete this.pendingTextPaths}else e.beginPath()},setCharSpacing:function(t){this.current.charSpacing=t},setWordSpacing:function(t){this.current.wordSpacing=t},setHScale:function(t){this.current.textHScale=t/100},setLeading:function(t){this.current.leading=-t},setFont:function(t,e){var r=this.commonObjs.get(t),i=this.current;if(!r)throw new Error("Can't find font for "+t);if(i.fontMatrix=r.fontMatrix?r.fontMatrix:n.FONT_IDENTITY_MATRIX,0!==i.fontMatrix[0]&&0!==i.fontMatrix[3]||(0,n.warn)("Invalid font matrix for font "+t),e<0?(e=-e,i.fontDirection=-1):i.fontDirection=1,this.current.font=r,this.current.fontSize=e,r.isType3Font)return;var s=r.loadedName||"sans-serif";let o="normal";r.black?o="900":r.bold&&(o="bold");var a=r.italic?"italic":"normal",c=`"${s}", ${r.fallbackName}`;let l=e;e<16?l=16:e>100&&(l=100),this.current.fontSizeScale=e/l,this.ctx.font=`${a} ${o} ${l}px ${c}`},setTextRenderingMode:function(t){this.current.textRenderingMode=t},setTextRise:function(t){this.current.textRise=t},moveText:function(t,e){this.current.x=this.current.lineX+=t,this.current.y=this.current.lineY+=e},setLeadingMoveText:function(t,e){this.setLeading(-e),this.moveText(t,e)},setTextMatrix:function(t,e,r,n,i,s){this.current.textMatrix=[t,e,r,n,i,s],this.current.textMatrixScale=Math.sqrt(t*t+e*e),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0},nextLine:function(){this.moveText(0,this.current.leading)},paintChar(t,e,r,i){var s=this.ctx,o=this.current,a=o.font,c=o.textRenderingMode,l=o.fontSize/o.fontSizeScale,u=c&n.TextRenderingMode.FILL_STROKE_MASK,h=!!(c&n.TextRenderingMode.ADD_TO_PATH_FLAG);const d=o.patternFill&&a.data;var p;(a.disableFontFace||h||d)&&(p=a.getPathGenerator(this.commonObjs,t)),a.disableFontFace||d?(s.save(),s.translate(e,r),s.beginPath(),p(s,l),i&&s.setTransform.apply(s,i),u!==n.TextRenderingMode.FILL&&u!==n.TextRenderingMode.FILL_STROKE||s.fill(),u!==n.TextRenderingMode.STROKE&&u!==n.TextRenderingMode.FILL_STROKE||s.stroke(),s.restore()):(u!==n.TextRenderingMode.FILL&&u!==n.TextRenderingMode.FILL_STROKE||s.fillText(t,e,r),u!==n.TextRenderingMode.STROKE&&u!==n.TextRenderingMode.FILL_STROKE||s.strokeText(t,e,r)),h&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:s.mozCurrentTransform,x:e,y:r,fontSize:l,addToPath:p})},get isFontSubpixelAAEnabled(){const{context:t}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);t.scale(1.5,1),t.fillText("I",0,10);for(var e=t.getImageData(0,0,10,10).data,r=!1,i=3;i<e.length;i+=4)if(e[i]>0&&e[i]<255){r=!0;break}return(0,n.shadow)(this,"isFontSubpixelAAEnabled",r)},showText:function(t){var e=this.current,r=e.font;if(r.isType3Font)return this.showType3Text(t);var i=e.fontSize;if(0===i)return;var s=this.ctx,o=e.fontSizeScale,a=e.charSpacing,c=e.wordSpacing,l=e.fontDirection,u=e.textHScale*l,h=t.length,d=r.vertical,p=d?1:-1,f=r.defaultVMetrics,g=i*e.fontMatrix[0],m=e.textRenderingMode===n.TextRenderingMode.FILL&&!r.disableFontFace&&!e.patternFill;let y;if(s.save(),e.patternFill){s.save();const t=e.fillColor.getPattern(s,this);y=s.mozCurrentTransform,s.restore(),s.fillStyle=t}s.transform.apply(s,e.textMatrix),s.translate(e.x,e.y+e.textRise),l>0?s.scale(u,-1):s.scale(u,1);var v=e.lineWidth,b=e.textMatrixScale;if(0===b||0===v){var A=e.textRenderingMode&n.TextRenderingMode.FILL_STROKE_MASK;A!==n.TextRenderingMode.STROKE&&A!==n.TextRenderingMode.FILL_STROKE||(this._cachedGetSinglePixelWidth=null,v=.65*this.getSinglePixelWidth())}else v/=b;1!==o&&(s.scale(o,o),v/=o),s.lineWidth=v;var _,w=0;for(_=0;_<h;++_){var x=t[_];if((0,n.isNum)(x))w+=p*x*i/1e3;else{var S,E,C,T,R,k,P,L=!1,I=(x.isSpace?c:0)+a,O=x.fontChar,F=x.accent,M=x.width;if(d?(R=x.vmetric||f,k=-(k=x.vmetric?R[1]:.5*M)*g,P=R[2]*g,M=R?-R[0]:M,S=k/o,E=(w+P)/o):(S=w/o,E=0),r.remeasure&&M>0){var N=1e3*s.measureText(O).width/i*o;if(M<N&&this.isFontSubpixelAAEnabled){var D=M/N;L=!0,s.save(),s.scale(D,1),S/=D}else M!==N&&(S+=(M-N)/2e3*i/o)}(x.isInFont||r.missingFile)&&(m&&!F?s.fillText(O,S,E):(this.paintChar(O,S,E,y),F&&(C=S+F.offset.x/o,T=E-F.offset.y/o,this.paintChar(F.fontChar,C,T,y)))),w+=d?M*g-I*l:M*g+I*l,L&&s.restore()}}d?e.y-=w:e.x+=w*u,s.restore()},showType3Text:function(t){var e,r,i,s,o=this.ctx,a=this.current,c=a.font,l=a.fontSize,u=a.fontDirection,h=c.vertical?1:-1,d=a.charSpacing,p=a.wordSpacing,f=a.textHScale*u,g=a.fontMatrix||n.FONT_IDENTITY_MATRIX,m=t.length;if(a.textRenderingMode!==n.TextRenderingMode.INVISIBLE&&0!==l){for(this._cachedGetSinglePixelWidth=null,o.save(),o.transform.apply(o,a.textMatrix),o.translate(a.x,a.y),o.scale(f,u),e=0;e<m;++e)if(r=t[e],(0,n.isNum)(r))s=h*r*l/1e3,this.ctx.translate(s,0),a.x+=s*f;else{var y=(r.isSpace?p:0)+d,v=c.charProcOperatorList[r.operatorListId];v?(this.processingType3=r,this.save(),o.scale(l,l),o.transform.apply(o,g),this.executeOperatorList(v),this.restore(),i=n.Util.applyTransform([r.width,0],g)[0]*l+y,o.translate(i,0),a.x+=i*f):(0,n.warn)(`Type3 character "${r.operatorListId}" is not available.`)}o.restore(),this.processingType3=null}},setCharWidth:function(t,e){},setCharWidthAndBounds:function(t,e,r,n,i,s){this.ctx.rect(r,n,i-r,s-n),this.clip(),this.endPath()},getColorN_Pattern:function(e){var r;if("TilingPattern"===e[0]){var n=e[1],s=this.baseTransform||this.ctx.mozCurrentTransform.slice(),o={createCanvasGraphics:e=>new t(e,this.commonObjs,this.objs,this.canvasFactory,this.webGLContext)};r=new i.TilingPattern(e,n,this.ctx,o,s)}else r=(0,i.getShadingPatternFromIR)(e);return r},setStrokeColorN:function(){this.current.strokeColor=this.getColorN_Pattern(arguments)},setFillColorN:function(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0},setStrokeRGBColor:function(t,e,r){var i=n.Util.makeCssRgb(t,e,r);this.ctx.strokeStyle=i,this.current.strokeColor=i},setFillRGBColor:function(t,e,r){var i=n.Util.makeCssRgb(t,e,r);this.ctx.fillStyle=i,this.current.fillColor=i,this.current.patternFill=!1},shadingFill:function(t){var e=this.ctx;this.save();var r=(0,i.getShadingPatternFromIR)(t);e.fillStyle=r.getPattern(e,this,!0);var s=e.mozCurrentTransformInverse;if(s){var o=e.canvas,a=o.width,c=o.height,l=n.Util.applyTransform([0,0],s),u=n.Util.applyTransform([0,c],s),h=n.Util.applyTransform([a,0],s),d=n.Util.applyTransform([a,c],s),p=Math.min(l[0],u[0],h[0],d[0]),f=Math.min(l[1],u[1],h[1],d[1]),g=Math.max(l[0],u[0],h[0],d[0]),m=Math.max(l[1],u[1],h[1],d[1]);this.ctx.fillRect(p,f,g-p,m-f)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.restore()},beginInlineImage:function(){(0,n.unreachable)("Should not call beginInlineImage")},beginImageData:function(){(0,n.unreachable)("Should not call beginImageData")},paintFormXObjectBegin:function(t,e){if(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(t)&&6===t.length&&this.transform.apply(this,t),this.baseTransform=this.ctx.mozCurrentTransform,e){var r=e[2]-e[0],n=e[3]-e[1];this.ctx.rect(e[0],e[1],r,n),this.clip(),this.endPath()}},paintFormXObjectEnd:function(){this.restore(),this.baseTransform=this.baseTransformStack.pop()},beginGroup:function(t){this.save();var e=this.ctx;t.isolated||(0,n.info)("TODO: Support non-isolated groups."),t.knockout&&(0,n.warn)("Knockout groups not supported.");var r=e.mozCurrentTransform;if(t.matrix&&e.transform.apply(e,t.matrix),!t.bbox)throw new Error("Bounding box is required.");var i=n.Util.getAxialAlignedBoundingBox(t.bbox,e.mozCurrentTransform),s=[0,0,e.canvas.width,e.canvas.height];i=n.Util.intersect(i,s)||[0,0,0,0];var o=Math.floor(i[0]),a=Math.floor(i[1]),l=Math.max(Math.ceil(i[2])-o,1),u=Math.max(Math.ceil(i[3])-a,1),h=1,d=1;l>4096&&(h=l/4096,l=4096),u>4096&&(d=u/4096,u=4096);var p="groupAt"+this.groupLevel;t.smask&&(p+="_smask_"+this.smaskCounter++%2);var f=this.cachedCanvases.getCanvas(p,l,u,!0),g=f.context;g.scale(1/h,1/d),g.translate(-o,-a),g.transform.apply(g,r),t.smask?this.smaskStack.push({canvas:f.canvas,context:g,offsetX:o,offsetY:a,scaleX:h,scaleY:d,subtype:t.smask.subtype,backdrop:t.smask.backdrop,transferMap:t.smask.transferMap||null,startTransformInverse:null}):(e.setTransform(1,0,0,1,0,0),e.translate(o,a),e.scale(h,d)),c(e,g),this.ctx=g,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(e),this.groupLevel++,this.current.activeSMask=null},endGroup:function(t){this.groupLevel--;var e=this.ctx;this.ctx=this.groupStack.pop(),void 0!==this.ctx.imageSmoothingEnabled?this.ctx.imageSmoothingEnabled=!1:this.ctx.mozImageSmoothingEnabled=!1,t.smask?this.tempSMask=this.smaskStack.pop():this.ctx.drawImage(e.canvas,0,0),this.restore()},beginAnnotations:function(){this.save(),this.baseTransform&&this.ctx.setTransform.apply(this.ctx,this.baseTransform)},endAnnotations:function(){this.restore()},beginAnnotation:function(t,e,r){if(this.save(),l(this.ctx),this.current=new a,Array.isArray(t)&&4===t.length){var n=t[2]-t[0],i=t[3]-t[1];this.ctx.rect(t[0],t[1],n,i),this.clip(),this.endPath()}this.transform.apply(this,e),this.transform.apply(this,r)},endAnnotation:function(){this.restore()},paintJpegXObject:function(t,e,r){const i=this.processingType3?this.commonObjs.get(t):this.objs.get(t);if(i){this.save();var s=this.ctx;if(s.scale(1/e,-1/r),s.drawImage(i,0,0,i.width,i.height,0,-r,e,r),this.imageLayer){var o=s.mozCurrentTransformInverse,a=this.getCanvasPosition(0,0);this.imageLayer.appendImage({objId:t,left:a[0],top:a[1],width:e/o[0],height:r/o[3]})}this.restore()}else(0,n.warn)("Dependent image isn't ready yet")},paintImageMaskXObject:function(t){var e=this.ctx,n=t.width,i=t.height,s=this.current.fillColor,o=this.current.patternFill,a=this.processingType3;if(a&&void 0===a.compiled&&(a.compiled=n<=1e3&&i<=1e3?function(t){var e,r,n,i,s=t.width,o=t.height,a=s+1,c=new Uint8Array(a*(o+1)),l=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),u=s+7&-8,h=t.data,d=new Uint8Array(u*o),p=0;for(e=0,i=h.length;e<i;e++)for(var f=128,g=h[e];f>0;)d[p++]=g&f?0:255,f>>=1;var m=0;for(0!==d[p=0]&&(c[0]=1,++m),r=1;r<s;r++)d[p]!==d[p+1]&&(c[r]=d[p]?2:1,++m),p++;for(0!==d[p]&&(c[r]=2,++m),e=1;e<o;e++){n=e*a,d[(p=e*u)-u]!==d[p]&&(c[n]=d[p]?1:8,++m);var y=(d[p]?4:0)+(d[p-u]?8:0);for(r=1;r<s;r++)l[y=(y>>2)+(d[p+1]?4:0)+(d[p-u+1]?8:0)]&&(c[n+r]=l[y],++m),p++;if(d[p-u]!==d[p]&&(c[n+r]=d[p]?2:4,++m),m>1e3)return null}for(n=e*a,0!==d[p=u*(o-1)]&&(c[n]=8,++m),r=1;r<s;r++)d[p]!==d[p+1]&&(c[n+r]=d[p]?4:8,++m),p++;if(0!==d[p]&&(c[n+r]=4,++m),m>1e3)return null;var v=new Int32Array([0,a,-1,0,-a,0,0,0,1]),b=[];for(e=0;m&&e<=o;e++){for(var A=e*a,_=A+s;A<_&&!c[A];)A++;if(A!==_){var w,x=[A%a,e],S=c[A],E=A;do{var C=v[S];do{A+=C}while(!c[A]);5!==(w=c[A])&&10!==w?(S=w,c[A]=0):(S=w&51*S>>4,c[A]&=S>>2|S<<2),x.push(A%a),x.push(A/a|0),c[A]||--m}while(E!==A);b.push(x),--e}}return function(t){t.save(),t.scale(1/s,-1/o),t.translate(0,-o),t.beginPath();for(var e=0,r=b.length;e<r;e++){var n=b[e];t.moveTo(n[0],n[1]);for(var i=2,a=n.length;i<a;i+=2)t.lineTo(n[i],n[i+1])}t.fill(),t.beginPath(),t.restore()}}({data:t.data,width:n,height:i}):null),a&&a.compiled)a.compiled(e);else{var c=this.cachedCanvases.getCanvas("maskCanvas",n,i),l=c.context;l.save(),r(l,t),l.globalCompositeOperation="source-in",l.fillStyle=o?s.getPattern(l,this):s,l.fillRect(0,0,n,i),l.restore(),this.paintInlineImageXObject(c.canvas)}},paintImageMaskXObjectRepeat:function(t,e,n,i){var s=t.width,o=t.height,a=this.current.fillColor,c=this.current.patternFill,l=this.cachedCanvases.getCanvas("maskCanvas",s,o),u=l.context;u.save(),r(u,t),u.globalCompositeOperation="source-in",u.fillStyle=c?a.getPattern(u,this):a,u.fillRect(0,0,s,o),u.restore();for(var h=this.ctx,d=0,p=i.length;d<p;d+=2)h.save(),h.transform(e,0,0,n,i[d],i[d+1]),h.scale(1,-1),h.drawImage(l.canvas,0,0,s,o,0,-1,1,1),h.restore()},paintImageMaskXObjectGroup:function(t){for(var e=this.ctx,n=this.current.fillColor,i=this.current.patternFill,s=0,o=t.length;s<o;s++){var a=t[s],c=a.width,l=a.height,u=this.cachedCanvases.getCanvas("maskCanvas",c,l),h=u.context;h.save(),r(h,a),h.globalCompositeOperation="source-in",h.fillStyle=i?n.getPattern(h,this):n,h.fillRect(0,0,c,l),h.restore(),e.save(),e.transform.apply(e,a.transform),e.scale(1,-1),e.drawImage(u.canvas,0,0,c,l,0,-1,1,1),e.restore()}},paintImageXObject:function(t){const e=this.processingType3?this.commonObjs.get(t):this.objs.get(t);e?this.paintInlineImageXObject(e):(0,n.warn)("Dependent image isn't ready yet")},paintImageXObjectRepeat:function(t,e,r,i){const s=this.processingType3?this.commonObjs.get(t):this.objs.get(t);if(s){for(var o=s.width,a=s.height,c=[],l=0,u=i.length;l<u;l+=2)c.push({transform:[e,0,0,r,i[l],i[l+1]],x:0,y:0,w:o,h:a});this.paintInlineImageXObjectGroup(s,c)}else(0,n.warn)("Dependent image isn't ready yet")},paintInlineImageXObject:function(t){var r=t.width,n=t.height,i=this.ctx;this.save(),i.scale(1/r,-1/n);var s,o,a=i.mozCurrentTransformInverse,c=a[0],l=a[1],u=Math.max(Math.sqrt(c*c+l*l),1),h=a[2],d=a[3],p=Math.max(Math.sqrt(h*h+d*d),1);if("function"==typeof HTMLElement&&t instanceof HTMLElement||!t.data)s=t;else{var f=(o=this.cachedCanvases.getCanvas("inlineImage",r,n)).context;e(f,t),s=o.canvas}for(var g=r,m=n,y="prescale1";u>2&&g>1||p>2&&m>1;){var v=g,b=m;u>2&&g>1&&(u/=g/(v=Math.ceil(g/2))),p>2&&m>1&&(p/=m/(b=Math.ceil(m/2))),(f=(o=this.cachedCanvases.getCanvas(y,v,b)).context).clearRect(0,0,v,b),f.drawImage(s,0,0,g,m,0,0,v,b),s=o.canvas,g=v,m=b,y="prescale1"===y?"prescale2":"prescale1"}if(i.drawImage(s,0,0,g,m,0,-n,r,n),this.imageLayer){var A=this.getCanvasPosition(0,-n);this.imageLayer.appendImage({imgData:t,left:A[0],top:A[1],width:r/a[0],height:n/a[3]})}this.restore()},paintInlineImageXObjectGroup:function(t,r){var n=this.ctx,i=t.width,s=t.height,o=this.cachedCanvases.getCanvas("inlineImage",i,s);e(o.context,t);for(var a=0,c=r.length;a<c;a++){var l=r[a];if(n.save(),n.transform.apply(n,l.transform),n.scale(1,-1),n.drawImage(o.canvas,l.x,l.y,l.w,l.h,0,-1,1,1),this.imageLayer){var u=this.getCanvasPosition(l.x,l.y);this.imageLayer.appendImage({imgData:t,left:u[0],top:u[1],width:i,height:s})}n.restore()}},paintSolidColorImageMask:function(){this.ctx.fillRect(0,0,1,1)},paintXObject:function(){(0,n.warn)("Unsupported 'paintXObject' command.")},markPoint:function(t){},markPointProps:function(t,e){},beginMarkedContent:function(t){},beginMarkedContentProps:function(t,e){},endMarkedContent:function(){},beginCompat:function(){},endCompat:function(){},consumePath:function(){var t=this.ctx;this.pendingClip&&(this.pendingClip===y?t.clip("evenodd"):t.clip(),this.pendingClip=null),t.beginPath()},getSinglePixelWidth(t){if(null===this._cachedGetSinglePixelWidth){const t=this.ctx.mozCurrentTransformInverse;this._cachedGetSinglePixelWidth=Math.sqrt(Math.max(t[0]*t[0]+t[1]*t[1],t[2]*t[2]+t[3]*t[3]))}return this._cachedGetSinglePixelWidth},getCanvasPosition:function(t,e){var r=this.ctx.mozCurrentTransform;return[r[0]*t+r[2]*e+r[4],r[1]*t+r[3]*e+r[5]]}},n.OPS)t.prototype[n.OPS[v]]=t.prototype[v];return t}();e.CanvasGraphics=c},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getShadingPatternFromIR=function(t){var e=i[t[0]];if(!e)throw new Error("Unknown IR type: "+t[0]);return e.fromIR(t)},e.TilingPattern=void 0;var n=r(1),i={};function s(t,e){if(!e||"undefined"==typeof Path2D)return;const r=e[2]-e[0],n=e[3]-e[1],i=new Path2D;i.rect(e[0],e[1],r,n),t.clip(i)}i.RadialAxial={fromIR:function(t){var e=t[1],r=t[2],n=t[3],i=t[4],o=t[5],a=t[6],c=t[7];return{type:"Pattern",getPattern:function(t){var l;s(t,r),"axial"===e?l=t.createLinearGradient(i[0],i[1],o[0],o[1]):"radial"===e&&(l=t.createRadialGradient(i[0],i[1],a,o[0],o[1],c));for(var u=0,h=n.length;u<h;++u){var d=n[u];l.addColorStop(d[0],d[1])}return l}}}};var o=function(){function t(t,e,r,n,i,s,o,a){var c,l=e.coords,u=e.colors,h=t.data,d=4*t.width;l[r+1]>l[n+1]&&(c=r,r=n,n=c,c=s,s=o,o=c),l[n+1]>l[i+1]&&(c=n,n=i,i=c,c=o,o=a,a=c),l[r+1]>l[n+1]&&(c=r,r=n,n=c,c=s,s=o,o=c);var p=(l[r]+e.offsetX)*e.scaleX,f=(l[r+1]+e.offsetY)*e.scaleY,g=(l[n]+e.offsetX)*e.scaleX,m=(l[n+1]+e.offsetY)*e.scaleY,y=(l[i]+e.offsetX)*e.scaleX,v=(l[i+1]+e.offsetY)*e.scaleY;if(!(f>=v))for(var b,A,_,w,x,S,E,C,T=u[s],R=u[s+1],k=u[s+2],P=u[o],L=u[o+1],I=u[o+2],O=u[a],F=u[a+1],M=u[a+2],N=Math.round(f),D=Math.round(v),B=N;B<=D;B++){if(B<m){let t;t=B<f?0:f===m?1:(f-B)/(f-m),b=p-(p-g)*t,A=T-(T-P)*t,_=R-(R-L)*t,w=k-(k-I)*t}else{let t;t=B>v?1:m===v?0:(m-B)/(m-v),b=g-(g-y)*t,A=P-(P-O)*t,_=L-(L-F)*t,w=I-(I-M)*t}let t;t=B<f?0:B>v?1:(f-B)/(f-v),x=p-(p-y)*t,S=T-(T-O)*t,E=R-(R-F)*t,C=k-(k-M)*t;for(var U=Math.round(Math.min(b,x)),j=Math.round(Math.max(b,x)),q=d*B+4*U,W=U;W<=j;W++){let t=(b-W)/(b-x);t<0?t=0:t>1&&(t=1),h[q++]=A-(A-S)*t|0,h[q++]=_-(_-E)*t|0,h[q++]=w-(w-C)*t|0,h[q++]=255}}}function e(e,r,n){var i,s,o=r.coords,a=r.colors;switch(r.type){case"lattice":var c=r.verticesPerRow,l=Math.floor(o.length/c)-1,u=c-1;for(i=0;i<l;i++)for(var h=i*c,d=0;d<u;d++,h++)t(e,n,o[h],o[h+1],o[h+c],a[h],a[h+1],a[h+c]),t(e,n,o[h+c+1],o[h+1],o[h+c],a[h+c+1],a[h+1],a[h+c]);break;case"triangles":for(i=0,s=o.length;i<s;i+=3)t(e,n,o[i],o[i+1],o[i+2],a[i],a[i+1],a[i+2]);break;default:throw new Error("illegal figure")}}return function(t,r,n,i,s,o,a,c){var l,u,h,d,p=Math.floor(t[0]),f=Math.floor(t[1]),g=Math.ceil(t[2])-p,m=Math.ceil(t[3])-f,y=Math.min(Math.ceil(Math.abs(g*r[0]*1.1)),3e3),v=Math.min(Math.ceil(Math.abs(m*r[1]*1.1)),3e3),b=g/y,A=m/v,_={coords:n,colors:i,offsetX:-p,offsetY:-f,scaleX:1/b,scaleY:1/A},w=y+4,x=v+4;if(c.isEnabled)l=c.drawFigures({width:y,height:v,backgroundColor:o,figures:s,context:_}),(u=a.getCanvas("mesh",w,x,!1)).context.drawImage(l,2,2),l=u.canvas;else{var S=(u=a.getCanvas("mesh",w,x,!1)).context,E=S.createImageData(y,v);if(o){var C=E.data;for(h=0,d=C.length;h<d;h+=4)C[h]=o[0],C[h+1]=o[1],C[h+2]=o[2],C[h+3]=255}for(h=0;h<s.length;h++)e(E,s[h],_);S.putImageData(E,2,2),l=u.canvas}return{canvas:l,offsetX:p-2*b,offsetY:f-2*A,scaleX:b,scaleY:A}}}();i.Mesh={fromIR:function(t){var e=t[2],r=t[3],i=t[4],a=t[5],c=t[6],l=t[7],u=t[8];return{type:"Pattern",getPattern:function(t,h,d){var p;if(s(t,l),d)p=n.Util.singularValueDecompose2dScale(t.mozCurrentTransform);else if(p=n.Util.singularValueDecompose2dScale(h.baseTransform),c){var f=n.Util.singularValueDecompose2dScale(c);p=[p[0]*f[0],p[1]*f[1]]}var g=o(a,p,e,r,i,d?null:u,h.cachedCanvases,h.webGLContext);return d||(t.setTransform.apply(t,h.baseTransform),c&&t.transform.apply(t,c)),t.translate(g.offsetX,g.offsetY),t.scale(g.scaleX,g.scaleY),t.createPattern(g.canvas,"no-repeat")}}}},i.Dummy={fromIR:function(){return{type:"Pattern",getPattern:function(){return"hotpink"}}}};var a=function(){var t=1,e=2;function r(t,e,r,n,i){this.operatorList=t[2],this.matrix=t[3]||[1,0,0,1,0,0],this.bbox=t[4],this.xstep=t[5],this.ystep=t[6],this.paintType=t[7],this.tilingType=t[8],this.color=e,this.canvasGraphicsFactory=n,this.baseTransform=i,this.type="Pattern",this.ctx=r}return r.prototype={createPatternCanvas:function(t){var e=this.operatorList,r=this.bbox,i=this.xstep,s=this.ystep,o=this.paintType,a=this.tilingType,c=this.color,l=this.canvasGraphicsFactory;(0,n.info)("TilingType: "+a);var u=r[0],h=r[1],d=r[2],p=r[3],f=n.Util.singularValueDecompose2dScale(this.matrix),g=n.Util.singularValueDecompose2dScale(this.baseTransform),m=[f[0]*g[0],f[1]*g[1]],y=this.getSizeAndScale(i,this.ctx.canvas.width,m[0]),v=this.getSizeAndScale(s,this.ctx.canvas.height,m[1]),b=t.cachedCanvases.getCanvas("pattern",y.size,v.size,!0),A=b.context,_=l.createCanvasGraphics(A);return _.groupLevel=t.groupLevel,this.setFillAndStrokeStyleToContext(_,o,c),_.transform(y.scale,0,0,v.scale,0,0),_.transform(1,0,0,1,-u,-h),this.clipBbox(_,r,u,h,d,p),_.executeOperatorList(e),this.ctx.transform(1,0,0,1,u,h),this.ctx.scale(1/y.scale,1/v.scale),b.canvas},getSizeAndScale:function(t,e,r){t=Math.abs(t);var n=Math.max(3e3,e),i=Math.ceil(t*r);return i>=n?i=n:r=i/t,{scale:r,size:i}},clipBbox:function(t,e,r,n,i,s){if(Array.isArray(e)&&4===e.length){var o=i-r,a=s-n;t.ctx.rect(r,n,o,a),t.clip(),t.endPath()}},setFillAndStrokeStyleToContext:function(r,i,s){const o=r.ctx,a=r.current;switch(i){case t:var c=this.ctx;o.fillStyle=c.fillStyle,o.strokeStyle=c.strokeStyle,a.fillColor=c.fillStyle,a.strokeColor=c.strokeStyle;break;case e:var l=n.Util.makeCssRgb(s[0],s[1],s[2]);o.fillStyle=l,o.strokeStyle=l,a.fillColor=l,a.strokeColor=l;break;default:throw new n.FormatError("Unsupported paint type: "+i)}},getPattern:function(t,e){(t=this.ctx).setTransform.apply(t,this.baseTransform),t.transform.apply(t,this.matrix);var r=this.createPatternCanvas(e);return t.createPattern(r,"repeat")}},r}();e.TilingPattern=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GlobalWorkerOptions=void 0;const n=Object.create(null);e.GlobalWorkerOptions=n,n.workerPort=void 0===n.workerPort?null:n.workerPort,n.workerSrc=void 0===n.workerSrc?"":n.workerSrc},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MessageHandler=void 0;var n=r(1);const i=1,s=2,o=1,a=2,c=3,l=4,u=5,h=6,d=7,p=8;function f(t){if("object"!=typeof t||null===t)return t;switch(t.name){case"AbortException":return new n.AbortException(t.message);case"MissingPDFException":return new n.MissingPDFException(t.message);case"UnexpectedResponseException":return new n.UnexpectedResponseException(t.message,t.status);case"UnknownErrorException":return new n.UnknownErrorException(t.message,t.details);default:return new n.UnknownErrorException(t.message,t.toString())}}e.MessageHandler=class{constructor(t,e,r){this.sourceName=t,this.targetName=e,this.comObj=r,this.callbackId=1,this.streamId=1,this.postMessageTransfers=!0,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=t=>{const e=t.data;if(e.targetName!==this.sourceName)return;if(e.stream)return void this._processStreamMessage(e);if(e.callback){const t=e.callbackId,r=this.callbackCapabilities[t];if(!r)throw new Error("Cannot resolve callback "+t);if(delete this.callbackCapabilities[t],e.callback===i)r.resolve(e.data);else{if(e.callback!==s)throw new Error("Unexpected callback case");r.reject(f(e.reason))}return}const n=this.actionHandler[e.action];if(!n)throw new Error("Unknown action from worker: "+e.action);if(e.callbackId){const t=this.sourceName,o=e.sourceName;new Promise((function(t){t(n(e.data))})).then((function(n){r.postMessage({sourceName:t,targetName:o,callback:i,callbackId:e.callbackId,data:n})}),(function(n){r.postMessage({sourceName:t,targetName:o,callback:s,callbackId:e.callbackId,reason:f(n)})}))}else e.streamId?this._createStreamSink(e):n(e.data)},r.addEventListener("message",this._onComObjOnMessage)}on(t,e){const r=this.actionHandler;if(r[t])throw new Error(`There is already an actionName called "${t}"`);r[t]=e}send(t,e,r){this._postMessage({sourceName:this.sourceName,targetName:this.targetName,action:t,data:e},r)}sendWithPromise(t,e,r){const i=this.callbackId++,s=(0,n.createPromiseCapability)();this.callbackCapabilities[i]=s;try{this._postMessage({sourceName:this.sourceName,targetName:this.targetName,action:t,callbackId:i,data:e},r)}catch(t){s.reject(t)}return s.promise}sendWithStream(t,e,r,i){const s=this.streamId++,a=this.sourceName,c=this.targetName,l=this.comObj;return new ReadableStream({start:r=>{const o=(0,n.createPromiseCapability)();return this.streamControllers[s]={controller:r,startCall:o,pullCall:null,cancelCall:null,isClosed:!1},this._postMessage({sourceName:a,targetName:c,action:t,streamId:s,data:e,desiredSize:r.desiredSize},i),o.promise},pull:t=>{const e=(0,n.createPromiseCapability)();return this.streamControllers[s].pullCall=e,l.postMessage({sourceName:a,targetName:c,stream:h,streamId:s,desiredSize:t.desiredSize}),e.promise},cancel:t=>{(0,n.assert)(t instanceof Error,"cancel must have a valid reason");const e=(0,n.createPromiseCapability)();return this.streamControllers[s].cancelCall=e,this.streamControllers[s].isClosed=!0,l.postMessage({sourceName:a,targetName:c,stream:o,streamId:s,reason:f(t)}),e.promise}},r)}_createStreamSink(t){const e=this,r=this.actionHandler[t.action],i=t.streamId,s=this.sourceName,o=t.sourceName,a=this.comObj,h={enqueue(t,r=1,a){if(this.isCancelled)return;const c=this.desiredSize;this.desiredSize-=r,c>0&&this.desiredSize<=0&&(this.sinkCapability=(0,n.createPromiseCapability)(),this.ready=this.sinkCapability.promise),e._postMessage({sourceName:s,targetName:o,stream:l,streamId:i,chunk:t},a)},close(){this.isCancelled||(this.isCancelled=!0,a.postMessage({sourceName:s,targetName:o,stream:c,streamId:i}),delete e.streamSinks[i])},error(t){(0,n.assert)(t instanceof Error,"error must have a valid reason"),this.isCancelled||(this.isCancelled=!0,a.postMessage({sourceName:s,targetName:o,stream:u,streamId:i,reason:f(t)}))},sinkCapability:(0,n.createPromiseCapability)(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:t.desiredSize,ready:null};h.sinkCapability.resolve(),h.ready=h.sinkCapability.promise,this.streamSinks[i]=h,new Promise((function(e){e(r(t.data,h))})).then((function(){a.postMessage({sourceName:s,targetName:o,stream:p,streamId:i,success:!0})}),(function(t){a.postMessage({sourceName:s,targetName:o,stream:p,streamId:i,reason:f(t)})}))}_processStreamMessage(t){const e=t.streamId,r=this.sourceName,i=t.sourceName,s=this.comObj;switch(t.stream){case p:t.success?this.streamControllers[e].startCall.resolve():this.streamControllers[e].startCall.reject(f(t.reason));break;case d:t.success?this.streamControllers[e].pullCall.resolve():this.streamControllers[e].pullCall.reject(f(t.reason));break;case h:if(!this.streamSinks[e]){s.postMessage({sourceName:r,targetName:i,stream:d,streamId:e,success:!0});break}this.streamSinks[e].desiredSize<=0&&t.desiredSize>0&&this.streamSinks[e].sinkCapability.resolve(),this.streamSinks[e].desiredSize=t.desiredSize;const{onPull:g}=this.streamSinks[t.streamId];new Promise((function(t){t(g&&g())})).then((function(){s.postMessage({sourceName:r,targetName:i,stream:d,streamId:e,success:!0})}),(function(t){s.postMessage({sourceName:r,targetName:i,stream:d,streamId:e,reason:f(t)})}));break;case l:if((0,n.assert)(this.streamControllers[e],"enqueue should have stream controller"),this.streamControllers[e].isClosed)break;this.streamControllers[e].controller.enqueue(t.chunk);break;case c:if((0,n.assert)(this.streamControllers[e],"close should have stream controller"),this.streamControllers[e].isClosed)break;this.streamControllers[e].isClosed=!0,this.streamControllers[e].controller.close(),this._deleteStreamController(e);break;case u:(0,n.assert)(this.streamControllers[e],"error should have stream controller"),this.streamControllers[e].controller.error(f(t.reason)),this._deleteStreamController(e);break;case a:t.success?this.streamControllers[e].cancelCall.resolve():this.streamControllers[e].cancelCall.reject(f(t.reason)),this._deleteStreamController(e);break;case o:if(!this.streamSinks[e])break;const{onCancel:m}=this.streamSinks[t.streamId];new Promise((function(e){e(m&&m(f(t.reason)))})).then((function(){s.postMessage({sourceName:r,targetName:i,stream:a,streamId:e,success:!0})}),(function(t){s.postMessage({sourceName:r,targetName:i,stream:a,streamId:e,reason:f(t)})})),this.streamSinks[e].sinkCapability.reject(f(t.reason)),this.streamSinks[e].isCancelled=!0,delete this.streamSinks[e];break;default:throw new Error("Unexpected stream case")}}async _deleteStreamController(t){await Promise.allSettled([this.streamControllers[t].startCall,this.streamControllers[t].pullCall,this.streamControllers[t].cancelCall].map((function(t){return t&&t.promise}))),delete this.streamControllers[t]}_postMessage(t,e){e&&this.postMessageTransfers?this.comObj.postMessage(t,e):this.comObj.postMessage(t)}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Metadata=void 0;var n=r(1),i=r(13);e.Metadata=class{constructor(t){(0,n.assert)("string"==typeof t,"Metadata: input is not a string"),t=this._repair(t);const e=(new i.SimpleXMLParser).parseFromString(t);this._metadataMap=new Map,e&&this._parse(e)}_repair(t){return t.replace(/^[^<]+/,"").replace(/>\\376\\377([^<]+)/g,(function(t,e){const r=e.replace(/\\([0-3])([0-7])([0-7])/g,(function(t,e,r,n){return String.fromCharCode(64*e+8*r+1*n)})).replace(/&(amp|apos|gt|lt|quot);/g,(function(t,e){switch(e){case"amp":return"&";case"apos":return"'";case"gt":return">";case"lt":return"<";case"quot":return'"'}throw new Error(`_repair: ${e} isn't defined.`)}));let n="";for(let t=0,e=r.length;t<e;t+=2){const e=256*r.charCodeAt(t)+r.charCodeAt(t+1);n+=e>=32&&e<127&&60!==e&&62!==e&&38!==e?String.fromCharCode(e):"&#x"+(65536+e).toString(16).substring(1)+";"}return">"+n}))}_parse(t){let e=t.documentElement;if("rdf:rdf"!==e.nodeName.toLowerCase())for(e=e.firstChild;e&&"rdf:rdf"!==e.nodeName.toLowerCase();)e=e.nextSibling;const r=e?e.nodeName.toLowerCase():null;if(!e||"rdf:rdf"!==r||!e.hasChildNodes())return;const n=e.childNodes;for(let t=0,e=n.length;t<e;t++){const e=n[t];if("rdf:description"===e.nodeName.toLowerCase())for(let t=0,r=e.childNodes.length;t<r;t++)if("#text"!==e.childNodes[t].nodeName.toLowerCase()){const r=e.childNodes[t],n=r.nodeName.toLowerCase();this._metadataMap.set(n,r.textContent.trim())}}}get(t){return this._metadataMap.has(t)?this._metadataMap.get(t):null}getAll(){const t=Object.create(null);for(const[e,r]of this._metadataMap)t[e]=r;return t}has(t){return this._metadataMap.has(t)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleXMLParser=void 0;const n=0,i=-2,s=-3,o=-4,a=-5,c=-6,l=-9;function u(t,e){const r=t[e];return" "===r||"\n"===r||"\r"===r||"\t"===r}class h{constructor(t,e){this.nodeName=t,this.nodeValue=e,Object.defineProperty(this,"parentNode",{value:null,writable:!0})}get firstChild(){return this.childNodes&&this.childNodes[0]}get nextSibling(){const t=this.parentNode.childNodes;if(!t)return;const e=t.indexOf(this);return-1!==e?t[e+1]:void 0}get textContent(){return this.childNodes?this.childNodes.map((function(t){return t.textContent})).join(""):this.nodeValue||""}hasChildNodes(){return this.childNodes&&this.childNodes.length>0}}e.SimpleXMLParser=class extends class{_resolveEntities(t){return t.replace(/&([^;]+);/g,(t,e)=>{if("#x"===e.substring(0,2))return String.fromCharCode(parseInt(e.substring(2),16));if("#"===e.substring(0,1))return String.fromCharCode(parseInt(e.substring(1),10));switch(e){case"lt":return"<";case"gt":return">";case"amp":return"&";case"quot":return'"'}return this.onResolveEntity(e)})}_parseContent(t,e){const r=[];let n=e;function i(){for(;n<t.length&&u(t,n);)++n}for(;n<t.length&&!u(t,n)&&">"!==t[n]&&"/"!==t[n];)++n;const s=t.substring(e,n);for(i();n<t.length&&">"!==t[n]&&"/"!==t[n]&&"?"!==t[n];){i();let e="",s="";for(;n<t.length&&!u(t,n)&&"="!==t[n];)e+=t[n],++n;if(i(),"="!==t[n])return null;++n,i();const o=t[n];if('"'!==o&&"'"!==o)return null;const a=t.indexOf(o,++n);if(a<0)return null;s=t.substring(n,a),r.push({name:e,value:this._resolveEntities(s)}),n=a+1,i()}return{name:s,attributes:r,parsed:n-e}}_parseProcessingInstruction(t,e){let r=e;for(;r<t.length&&!u(t,r)&&">"!==t[r]&&"/"!==t[r];)++r;const n=t.substring(e,r);!function(){for(;r<t.length&&u(t,r);)++r}();const i=r;for(;r<t.length&&("?"!==t[r]||">"!==t[r+1]);)++r;return{name:n,value:t.substring(i,r),parsed:r-e}}parseXml(t){let e=0;for(;e<t.length;){let r=e;if("<"===t[e]){let e;switch(++r,t[r]){case"/":if(++r,e=t.indexOf(">",r),e<0)return void this.onError(l);this.onEndElement(t.substring(r,e)),r=e+1;break;case"?":++r;const n=this._parseProcessingInstruction(t,r);if("?>"!==t.substring(r+n.parsed,r+n.parsed+2))return void this.onError(s);this.onPi(n.name,n.value),r+=n.parsed+2;break;case"!":if("--"===t.substring(r+1,r+3)){if(e=t.indexOf("--\x3e",r+3),e<0)return void this.onError(a);this.onComment(t.substring(r+3,e)),r=e+3}else if("[CDATA["===t.substring(r+1,r+8)){if(e=t.indexOf("]]>",r+8),e<0)return void this.onError(i);this.onCdata(t.substring(r+8,e)),r=e+3}else{if("DOCTYPE"!==t.substring(r+1,r+8))return void this.onError(c);{const n=t.indexOf("[",r+8);let i=!1;if(e=t.indexOf(">",r+8),e<0)return void this.onError(o);if(n>0&&e>n){if(e=t.indexOf("]>",r+8),e<0)return void this.onError(o);i=!0}const s=t.substring(r+8,e+(i?1:0));this.onDoctype(s),r=e+(i?2:1)}}break;default:const u=this._parseContent(t,r);if(null===u)return void this.onError(c);let h=!1;if("/>"===t.substring(r+u.parsed,r+u.parsed+2))h=!0;else if(">"!==t.substring(r+u.parsed,r+u.parsed+1))return void this.onError(l);this.onBeginElement(u.name,u.attributes,h),r+=u.parsed+(h?2:1)}}else{for(;r<t.length&&"<"!==t[r];)r++;const n=t.substring(e,r);this.onText(this._resolveEntities(n))}e=r}}onResolveEntity(t){return`&${t};`}onPi(t,e){}onComment(t){}onCdata(t){}onDoctype(t){}onText(t){}onBeginElement(t,e,r){}onEndElement(t){}onError(t){}}{constructor(){super(),this._currentFragment=null,this._stack=null,this._errorCode=n}parseFromString(t){if(this._currentFragment=[],this._stack=[],this._errorCode=n,this.parseXml(t),this._errorCode!==n)return;const[e]=this._currentFragment;return e?{documentElement:e}:void 0}onResolveEntity(t){switch(t){case"apos":return"'"}return super.onResolveEntity(t)}onText(t){if(function(t){for(let e=0,r=t.length;e<r;e++)if(!u(t,e))return!1;return!0}(t))return;const e=new h("#text",t);this._currentFragment.push(e)}onCdata(t){const e=new h("#text",t);this._currentFragment.push(e)}onBeginElement(t,e,r){const n=new h(t);n.childNodes=[],this._currentFragment.push(n),r||(this._stack.push(this._currentFragment),this._currentFragment=n.childNodes)}onEndElement(t){this._currentFragment=this._stack.pop()||[];const e=this._currentFragment[this._currentFragment.length-1];if(e)for(let t=0,r=e.childNodes.length;t<r;t++)e.childNodes[t].parentNode=e}onError(t){this._errorCode=t}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PDFDataTransportStream=void 0;var n=r(1);e.PDFDataTransportStream=class{constructor(t,e){(0,n.assert)(e),this._queuedChunks=[],this._progressiveDone=t.progressiveDone||!1;const r=t.initialData;if(r&&r.length>0){const t=new Uint8Array(r).buffer;this._queuedChunks.push(t)}this._pdfDataRangeTransport=e,this._isStreamingSupported=!t.disableStream,this._isRangeSupported=!t.disableRange,this._contentLength=t.length,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener((t,e)=>{this._onReceiveData({begin:t,chunk:e})}),this._pdfDataRangeTransport.addProgressListener((t,e)=>{this._onProgress({loaded:t,total:e})}),this._pdfDataRangeTransport.addProgressiveReadListener(t=>{this._onReceiveData({chunk:t})}),this._pdfDataRangeTransport.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),this._pdfDataRangeTransport.transportReady()}_onReceiveData(t){const e=new Uint8Array(t.chunk).buffer;if(void 0===t.begin)this._fullRequestReader?this._fullRequestReader._enqueue(e):this._queuedChunks.push(e);else{const r=this._rangeReaders.some((function(r){return r._begin===t.begin&&(r._enqueue(e),!0)}));(0,n.assert)(r)}}get _progressiveDataLength(){return this._fullRequestReader?this._fullRequestReader._loaded:0}_onProgress(t){if(void 0===t.total){const e=this._rangeReaders[0];e&&e.onProgress&&e.onProgress({loaded:t.loaded})}else{const e=this._fullRequestReader;e&&e.onProgress&&e.onProgress({loaded:t.loaded,total:t.total})}}_onProgressiveDone(){this._fullRequestReader&&this._fullRequestReader.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(t){const e=this._rangeReaders.indexOf(t);e>=0&&this._rangeReaders.splice(e,1)}getFullReader(){(0,n.assert)(!this._fullRequestReader);const t=this._queuedChunks;return this._queuedChunks=null,new i(this,t,this._progressiveDone)}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const r=new s(this,t,e);return this._pdfDataRangeTransport.requestDataRange(t,e),this._rangeReaders.push(r),r}cancelAllRequests(t){this._fullRequestReader&&this._fullRequestReader.cancel(t),this._rangeReaders.slice(0).forEach((function(e){e.cancel(t)})),this._pdfDataRangeTransport.abort()}};class i{constructor(t,e,r=!1){this._stream=t,this._done=r||!1,this._filename=null,this._queuedChunks=e||[],this._loaded=0;for(const t of this._queuedChunks)this._loaded+=t.byteLength;this._requests=[],this._headersReady=Promise.resolve(),t._fullRequestReader=this,this.onProgress=null}_enqueue(t){this._done||(this._requests.length>0?this._requests.shift().resolve({value:t,done:!1}):this._queuedChunks.push(t),this._loaded+=t.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const t=(0,n.createPromiseCapability)();return this._requests.push(t),t.promise}cancel(t){this._done=!0,this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[]}progressiveDone(){this._done||(this._done=!0)}}class s{constructor(t,e,r){this._stream=t,this._begin=e,this._end=r,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(t){this._done||(0===this._requests.length?this._queuedChunk=t:(this._requests.shift().resolve({value:t,done:!1}),this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[]),this._done=!0,this._stream._removeRangeReader(this))}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const t=this._queuedChunk;return this._queuedChunk=null,{value:t,done:!1}}if(this._done)return{value:void 0,done:!0};const t=(0,n.createPromiseCapability)();return this._requests.push(t),t.promise}cancel(t){this._done=!0,this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[],this._stream._removeRangeReader(this)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WebGLContext=void 0;var n=r(1);e.WebGLContext=class{constructor({enable:t=!1}){this._enabled=!0===t}get isEnabled(){let t=this._enabled;return t&&(t=i.tryInitGL()),(0,n.shadow)(this,"isEnabled",t)}composeSMask({layer:t,mask:e,properties:r}){return i.composeSMask(t,e,r)}drawFigures({width:t,height:e,backgroundColor:r,figures:n,context:s}){return i.drawFigures(t,e,r,n,s)}clear(){i.cleanup()}};var i=function(){function t(t,e,r){var n=t.createShader(r);if(t.shaderSource(n,e),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS)){var i=t.getShaderInfoLog(n);throw new Error("Error during shader compilation: "+i)}return n}function e(e,r){return t(e,r,e.VERTEX_SHADER)}function r(e,r){return t(e,r,e.FRAGMENT_SHADER)}function n(t,e){for(var r=t.createProgram(),n=0,i=e.length;n<i;++n)t.attachShader(r,e[n]);if(t.linkProgram(r),!t.getProgramParameter(r,t.LINK_STATUS)){var s=t.getProgramInfoLog(r);throw new Error("Error during program linking: "+s)}return r}function i(t,e,r){t.activeTexture(r);var n=t.createTexture();return t.bindTexture(t.TEXTURE_2D,n),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e),n}var s,o;function a(){s||(o=document.createElement("canvas"),s=o.getContext("webgl",{premultipliedalpha:!1}))}var c=null,l=null;return{tryInitGL(){try{return a(),!!s}catch(t){}return!1},composeSMask:function(t,l,u){var h=t.width,d=t.height;c||function(){var t,i;a(),t=o,o=null,i=s,s=null;var l=n(i,[e(i,"  attribute vec2 a_position;                                      attribute vec2 a_texCoord;                                                                                                      uniform vec2 u_resolution;                                                                                                      varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_texCoord = a_texCoord;                                      }                                                             "),r(i,"  precision mediump float;                                                                                                        uniform vec4 u_backdrop;                                        uniform int u_subtype;                                          uniform sampler2D u_image;                                      uniform sampler2D u_mask;                                                                                                       varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec4 imageColor = texture2D(u_image, v_texCoord);               vec4 maskColor = texture2D(u_mask, v_texCoord);                 if (u_backdrop.a > 0.0) {                                         maskColor.rgb = maskColor.rgb * maskColor.a +                                   u_backdrop.rgb * (1.0 - maskColor.a);         }                                                               float lum;                                                      if (u_subtype == 0) {                                             lum = maskColor.a;                                            } else {                                                          lum = maskColor.r * 0.3 + maskColor.g * 0.59 +                        maskColor.b * 0.11;                                     }                                                               imageColor.a *= lum;                                            imageColor.rgb *= imageColor.a;                                 gl_FragColor = imageColor;                                    }                                                             ")]);i.useProgram(l);var u={};u.gl=i,u.canvas=t,u.resolutionLocation=i.getUniformLocation(l,"u_resolution"),u.positionLocation=i.getAttribLocation(l,"a_position"),u.backdropLocation=i.getUniformLocation(l,"u_backdrop"),u.subtypeLocation=i.getUniformLocation(l,"u_subtype");var h=i.getAttribLocation(l,"a_texCoord"),d=i.getUniformLocation(l,"u_image"),p=i.getUniformLocation(l,"u_mask"),f=i.createBuffer();i.bindBuffer(i.ARRAY_BUFFER,f),i.bufferData(i.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),i.STATIC_DRAW),i.enableVertexAttribArray(h),i.vertexAttribPointer(h,2,i.FLOAT,!1,0,0),i.uniform1i(d,0),i.uniform1i(p,1),c=u}();var p=c,f=p.canvas,g=p.gl;f.width=h,f.height=d,g.viewport(0,0,g.drawingBufferWidth,g.drawingBufferHeight),g.uniform2f(p.resolutionLocation,h,d),u.backdrop?g.uniform4f(p.resolutionLocation,u.backdrop[0],u.backdrop[1],u.backdrop[2],1):g.uniform4f(p.resolutionLocation,0,0,0,0),g.uniform1i(p.subtypeLocation,"Luminosity"===u.subtype?1:0);var m=i(g,t,g.TEXTURE0),y=i(g,l,g.TEXTURE1),v=g.createBuffer();return g.bindBuffer(g.ARRAY_BUFFER,v),g.bufferData(g.ARRAY_BUFFER,new Float32Array([0,0,h,0,0,d,0,d,h,0,h,d]),g.STATIC_DRAW),g.enableVertexAttribArray(p.positionLocation),g.vertexAttribPointer(p.positionLocation,2,g.FLOAT,!1,0,0),g.clearColor(0,0,0,0),g.enable(g.BLEND),g.blendFunc(g.ONE,g.ONE_MINUS_SRC_ALPHA),g.clear(g.COLOR_BUFFER_BIT),g.drawArrays(g.TRIANGLES,0,6),g.flush(),g.deleteTexture(m),g.deleteTexture(y),g.deleteBuffer(v),f},drawFigures:function(t,i,c,u,h){l||function(){var t,i;a(),t=o,o=null,i=s,s=null;var c=n(i,[e(i,"  attribute vec2 a_position;                                      attribute vec3 a_color;                                                                                                         uniform vec2 u_resolution;                                      uniform vec2 u_scale;                                           uniform vec2 u_offset;                                                                                                          varying vec4 v_color;                                                                                                           void main() {                                                     vec2 position = (a_position + u_offset) * u_scale;              vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;         gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_color = vec4(a_color / 255.0, 1.0);                         }                                                             "),r(i,"  precision mediump float;                                                                                                        varying vec4 v_color;                                                                                                           void main() {                                                     gl_FragColor = v_color;                                       }                                                             ")]);i.useProgram(c);var u={};u.gl=i,u.canvas=t,u.resolutionLocation=i.getUniformLocation(c,"u_resolution"),u.scaleLocation=i.getUniformLocation(c,"u_scale"),u.offsetLocation=i.getUniformLocation(c,"u_offset"),u.positionLocation=i.getAttribLocation(c,"a_position"),u.colorLocation=i.getAttribLocation(c,"a_color"),l=u}();var d=l,p=d.canvas,f=d.gl;p.width=t,p.height=i,f.viewport(0,0,f.drawingBufferWidth,f.drawingBufferHeight),f.uniform2f(d.resolutionLocation,t,i);var g,m,y,v=0;for(g=0,m=u.length;g<m;g++)switch(u[g].type){case"lattice":v+=((y=u[g].coords.length/u[g].verticesPerRow|0)-1)*(u[g].verticesPerRow-1)*6;break;case"triangles":v+=u[g].coords.length}var b=new Float32Array(2*v),A=new Uint8Array(3*v),_=h.coords,w=h.colors,x=0,S=0;for(g=0,m=u.length;g<m;g++){var E=u[g],C=E.coords,T=E.colors;switch(E.type){case"lattice":var R=E.verticesPerRow;y=C.length/R|0;for(var k=1;k<y;k++)for(var P=k*R+1,L=1;L<R;L++,P++)b[x]=_[C[P-R-1]],b[x+1]=_[C[P-R-1]+1],b[x+2]=_[C[P-R]],b[x+3]=_[C[P-R]+1],b[x+4]=_[C[P-1]],b[x+5]=_[C[P-1]+1],A[S]=w[T[P-R-1]],A[S+1]=w[T[P-R-1]+1],A[S+2]=w[T[P-R-1]+2],A[S+3]=w[T[P-R]],A[S+4]=w[T[P-R]+1],A[S+5]=w[T[P-R]+2],A[S+6]=w[T[P-1]],A[S+7]=w[T[P-1]+1],A[S+8]=w[T[P-1]+2],b[x+6]=b[x+2],b[x+7]=b[x+3],b[x+8]=b[x+4],b[x+9]=b[x+5],b[x+10]=_[C[P]],b[x+11]=_[C[P]+1],A[S+9]=A[S+3],A[S+10]=A[S+4],A[S+11]=A[S+5],A[S+12]=A[S+6],A[S+13]=A[S+7],A[S+14]=A[S+8],A[S+15]=w[T[P]],A[S+16]=w[T[P]+1],A[S+17]=w[T[P]+2],x+=12,S+=18;break;case"triangles":for(var I=0,O=C.length;I<O;I++)b[x]=_[C[I]],b[x+1]=_[C[I]+1],A[S]=w[T[I]],A[S+1]=w[T[I]+1],A[S+2]=w[T[I]+2],x+=2,S+=3}}c?f.clearColor(c[0]/255,c[1]/255,c[2]/255,1):f.clearColor(0,0,0,0),f.clear(f.COLOR_BUFFER_BIT);var F=f.createBuffer();f.bindBuffer(f.ARRAY_BUFFER,F),f.bufferData(f.ARRAY_BUFFER,b,f.STATIC_DRAW),f.enableVertexAttribArray(d.positionLocation),f.vertexAttribPointer(d.positionLocation,2,f.FLOAT,!1,0,0);var M=f.createBuffer();return f.bindBuffer(f.ARRAY_BUFFER,M),f.bufferData(f.ARRAY_BUFFER,A,f.STATIC_DRAW),f.enableVertexAttribArray(d.colorLocation),f.vertexAttribPointer(d.colorLocation,3,f.UNSIGNED_BYTE,!1,0,0),f.uniform2f(d.scaleLocation,h.scaleX,h.scaleY),f.uniform2f(d.offsetLocation,h.offsetX,h.offsetY),f.drawArrays(f.TRIANGLES,0,v),f.flush(),f.deleteBuffer(F),f.deleteBuffer(M),p},cleanup(){c&&c.canvas&&(c.canvas.width=0,c.canvas.height=0),l&&l.canvas&&(l.canvas.width=0,l.canvas.height=0),c=null,l=null}}}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.renderTextLayer=void 0;var n=r(1),i=function(){var t=/\S/;function e(e,r,i){var s,o=document.createElement("span"),a={angle:0,canvasWidth:0,isWhitespace:!1,originalTransform:null,paddingBottom:0,paddingLeft:0,paddingRight:0,paddingTop:0,scale:1};if(e._textDivs.push(o),s=r.str,!t.test(s))return a.isWhitespace=!0,void e._textDivProperties.set(o,a);var c=n.Util.transform(e._viewport.transform,r.transform),l=Math.atan2(c[1],c[0]),u=i[r.fontName];u.vertical&&(l+=Math.PI/2);var h=Math.sqrt(c[2]*c[2]+c[3]*c[3]),d=h;let p,f;if(u.ascent?d=u.ascent*d:u.descent&&(d=(1+u.descent)*d),0===l?(p=c[4],f=c[5]-d):(p=c[4]+d*Math.sin(l),f=c[5]-d*Math.cos(l)),o.style.left=p+"px",o.style.top=f+"px",o.style.fontSize=h+"px",o.style.fontFamily=u.fontFamily,o.textContent=r.str,e._fontInspectorEnabled&&(o.dataset.fontName=r.fontName),0!==l&&(a.angle=l*(180/Math.PI)),r.str.length>1&&(u.vertical?a.canvasWidth=r.height*e._viewport.scale:a.canvasWidth=r.width*e._viewport.scale),e._textDivProperties.set(o,a),e._textContentStream&&e._layoutText(o),e._enhanceTextSelection){var g=1,m=0;0!==l&&(g=Math.cos(l),m=Math.sin(l));var y,v,b=(u.vertical?r.height:r.width)*e._viewport.scale,A=h;0!==l?(y=[g,m,-m,g,p,f],v=n.Util.getAxialAlignedBoundingBox([0,0,b,A],y)):v=[p,f,p+b,f+A],e._bounds.push({left:v[0],top:v[1],right:v[2],bottom:v[3],div:o,size:[b,A],m:y})}}function r(t){if(!t._canceled){var e=t._textDivs,r=t._capability,n=e.length;if(n>1e5)return t._renderingDone=!0,void r.resolve();if(!t._textContentStream)for(var i=0;i<n;i++)t._layoutText(e[i]);t._renderingDone=!0,r.resolve()}}function i(t){for(var e=t._bounds,r=t._viewport,i=function(t,e,r){var n=r.map((function(t,e){return{x1:t.left,y1:t.top,x2:t.right,y2:t.bottom,index:e,x1New:void 0,x2New:void 0}}));s(t,n);var i=new Array(r.length);return n.forEach((function(t){var e=t.index;i[e]={left:t.x1New,top:0,right:t.x2New,bottom:0}})),r.map((function(e,r){var s=i[r],o=n[r];o.x1=e.top,o.y1=t-s.right,o.x2=e.bottom,o.y2=t-s.left,o.index=r,o.x1New=void 0,o.x2New=void 0})),s(e,n),n.forEach((function(t){var e=t.index;i[e].top=t.x1New,i[e].bottom=t.x2New})),i}(r.width,r.height,e),o=0;o<i.length;o++){var a=e[o].div,c=t._textDivProperties.get(a);if(0!==c.angle){var l=i[o],u=e[o],h=u.m,d=h[0],p=h[1],f=[[0,0],[0,u.size[1]],[u.size[0],0],u.size],g=new Float64Array(64);f.forEach((function(t,e){var r=n.Util.applyTransform(t,h);g[e+0]=d&&(l.left-r[0])/d,g[e+4]=p&&(l.top-r[1])/p,g[e+8]=d&&(l.right-r[0])/d,g[e+12]=p&&(l.bottom-r[1])/p,g[e+16]=p&&(l.left-r[0])/-p,g[e+20]=d&&(l.top-r[1])/d,g[e+24]=p&&(l.right-r[0])/-p,g[e+28]=d&&(l.bottom-r[1])/d,g[e+32]=d&&(l.left-r[0])/-d,g[e+36]=p&&(l.top-r[1])/-p,g[e+40]=d&&(l.right-r[0])/-d,g[e+44]=p&&(l.bottom-r[1])/-p,g[e+48]=p&&(l.left-r[0])/p,g[e+52]=d&&(l.top-r[1])/-d,g[e+56]=p&&(l.right-r[0])/p,g[e+60]=d&&(l.bottom-r[1])/-d}));var m=function(t,e,r){for(var n=0,i=0;i<r;i++){var s=t[e++];s>0&&(n=n?Math.min(s,n):s)}return n},y=1+Math.min(Math.abs(d),Math.abs(p));c.paddingLeft=m(g,32,16)/y,c.paddingTop=m(g,48,16)/y,c.paddingRight=m(g,0,16)/y,c.paddingBottom=m(g,16,16)/y,t._textDivProperties.set(a,c)}else c.paddingLeft=e[o].left-i[o].left,c.paddingTop=e[o].top-i[o].top,c.paddingRight=i[o].right-e[o].right,c.paddingBottom=i[o].bottom-e[o].bottom,t._textDivProperties.set(a,c)}}function s(t,e){e.sort((function(t,e){return t.x1-e.x1||t.index-e.index}));var r=[{start:-1/0,end:1/0,boundary:{x1:-1/0,y1:-1/0,x2:0,y2:1/0,index:-1,x1New:0,x2New:0}}];e.forEach((function(t){for(var e=0;e<r.length&&r[e].end<=t.y1;)e++;for(var n,i,s=r.length-1;s>=0&&r[s].start>=t.y2;)s--;var o,a,c=-1/0;for(o=e;o<=s;o++){var l;(l=(i=(n=r[o]).boundary).x2>t.x1?i.index>t.index?i.x1New:t.x1:void 0===i.x2New?(i.x2+t.x1)/2:i.x2New)>c&&(c=l)}for(t.x1New=c,o=e;o<=s;o++)void 0===(i=(n=r[o]).boundary).x2New?i.x2>t.x1?i.index>t.index&&(i.x2New=i.x2):i.x2New=c:i.x2New>c&&(i.x2New=Math.max(c,i.x2));var u=[],h=null;for(o=e;o<=s;o++){var d=(i=(n=r[o]).boundary).x2>t.x2?i:t;h===d?u[u.length-1].end=n.end:(u.push({start:n.start,end:n.end,boundary:d}),h=d)}for(r[e].start<t.y1&&(u[0].start=t.y1,u.unshift({start:r[e].start,end:t.y1,boundary:r[e].boundary})),t.y2<r[s].end&&(u[u.length-1].end=t.y2,u.push({start:t.y2,end:r[s].end,boundary:r[s].boundary})),o=e;o<=s;o++)if(void 0===(i=(n=r[o]).boundary).x2New){var p=!1;for(a=e-1;!p&&a>=0&&r[a].start>=i.y1;a--)p=r[a].boundary===i;for(a=s+1;!p&&a<r.length&&r[a].end<=i.y2;a++)p=r[a].boundary===i;for(a=0;!p&&a<u.length;a++)p=u[a].boundary===i;p||(i.x2New=c)}Array.prototype.splice.apply(r,[e,s-e+1].concat(u))})),r.forEach((function(e){var r=e.boundary;void 0===r.x2New&&(r.x2New=Math.max(t,r.x2))}))}function o({textContent:t,textContentStream:e,container:r,viewport:i,textDivs:s,textContentItemsStr:o,enhanceTextSelection:a}){this._textContent=t,this._textContentStream=e,this._container=r,this._viewport=i,this._textDivs=s||[],this._textContentItemsStr=o||[],this._enhanceTextSelection=!!a,this._fontInspectorEnabled=!(!globalThis.FontInspector||!globalThis.FontInspector.enabled),this._reader=null,this._layoutTextLastFontSize=null,this._layoutTextLastFontFamily=null,this._layoutTextCtx=null,this._textDivProperties=new WeakMap,this._renderingDone=!1,this._canceled=!1,this._capability=(0,n.createPromiseCapability)(),this._renderTimer=null,this._bounds=[],this._capability.promise.finally(()=>{this._layoutTextCtx&&(this._layoutTextCtx.canvas.width=0,this._layoutTextCtx.canvas.height=0,this._layoutTextCtx=null)}).catch(()=>{})}return o.prototype={get promise(){return this._capability.promise},cancel:function(){this._canceled=!0,this._reader&&(this._reader.cancel(new n.AbortException("TextLayer task cancelled.")),this._reader=null),null!==this._renderTimer&&(clearTimeout(this._renderTimer),this._renderTimer=null),this._capability.reject(new Error("TextLayer task cancelled."))},_processItems(t,r){for(let n=0,i=t.length;n<i;n++)this._textContentItemsStr.push(t[n].str),e(this,t[n],r)},_layoutText(t){const e=this._textDivProperties.get(t);if(e.isWhitespace)return;let r="";if(0!==e.canvasWidth){const{fontSize:n,fontFamily:i}=t.style;n===this._layoutTextLastFontSize&&i===this._layoutTextLastFontFamily||(this._layoutTextCtx.font=`${n} ${i}`,this._layoutTextLastFontSize=n,this._layoutTextLastFontFamily=i);const{width:s}=this._layoutTextCtx.measureText(t.textContent);s>0&&(e.scale=e.canvasWidth/s,r=`scaleX(${e.scale})`)}0!==e.angle&&(r=`rotate(${e.angle}deg) ${r}`),r.length>0&&(this._enhanceTextSelection&&(e.originalTransform=r),t.style.transform=r),this._textDivProperties.set(t,e),this._container.appendChild(t)},_render:function(t){const e=(0,n.createPromiseCapability)();let i=Object.create(null);const s=document.createElement("canvas");if(s.mozOpaque=!0,this._layoutTextCtx=s.getContext("2d",{alpha:!1}),this._textContent){const t=this._textContent.items,r=this._textContent.styles;this._processItems(t,r),e.resolve()}else{if(!this._textContentStream)throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');{const t=()=>{this._reader.read().then(({value:r,done:n})=>{n?e.resolve():(Object.assign(i,r.styles),this._processItems(r.items,i),t())},e.reject)};this._reader=this._textContentStream.getReader(),t()}}e.promise.then(()=>{i=null,t?this._renderTimer=setTimeout(()=>{r(this),this._renderTimer=null},t):r(this)},this._capability.reject)},expandTextDivs:function(t){if(!this._enhanceTextSelection||!this._renderingDone)return;null!==this._bounds&&(i(this),this._bounds=null);const e=[],r=[];for(var n=0,s=this._textDivs.length;n<s;n++){const i=this._textDivs[n],s=this._textDivProperties.get(i);s.isWhitespace||(t?(e.length=0,r.length=0,s.originalTransform&&e.push(s.originalTransform),s.paddingTop>0?(r.push(s.paddingTop+"px"),e.push(`translateY(${-s.paddingTop}px)`)):r.push(0),s.paddingRight>0?r.push(s.paddingRight/s.scale+"px"):r.push(0),s.paddingBottom>0?r.push(s.paddingBottom+"px"):r.push(0),s.paddingLeft>0?(r.push(s.paddingLeft/s.scale+"px"),e.push(`translateX(${-s.paddingLeft/s.scale}px)`)):r.push(0),i.style.padding=r.join(" "),e.length&&(i.style.transform=e.join(" "))):(i.style.padding=null,i.style.transform=s.originalTransform))}}},function(t){var e=new o({textContent:t.textContent,textContentStream:t.textContentStream,container:t.container,viewport:t.viewport,textDivs:t.textDivs,textContentItemsStr:t.textContentItemsStr,enhanceTextSelection:t.enhanceTextSelection});return e._render(t.timeout),e}}();e.renderTextLayer=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AnnotationLayer=void 0;var n=r(4),i=r(1);class s{static create(t){switch(t.data.annotationType){case i.AnnotationType.LINK:return new a(t);case i.AnnotationType.TEXT:return new c(t);case i.AnnotationType.WIDGET:switch(t.data.fieldType){case"Tx":return new u(t);case"Btn":return t.data.radioButton?new d(t):t.data.checkBox?new h(t):new p(t);case"Ch":return new f(t)}return new l(t);case i.AnnotationType.POPUP:return new g(t);case i.AnnotationType.FREETEXT:return new y(t);case i.AnnotationType.LINE:return new v(t);case i.AnnotationType.SQUARE:return new b(t);case i.AnnotationType.CIRCLE:return new A(t);case i.AnnotationType.POLYLINE:return new _(t);case i.AnnotationType.CARET:return new x(t);case i.AnnotationType.INK:return new S(t);case i.AnnotationType.POLYGON:return new w(t);case i.AnnotationType.HIGHLIGHT:return new E(t);case i.AnnotationType.UNDERLINE:return new C(t);case i.AnnotationType.SQUIGGLY:return new T(t);case i.AnnotationType.STRIKEOUT:return new R(t);case i.AnnotationType.STAMP:return new k(t);case i.AnnotationType.FILEATTACHMENT:return new P(t);default:return new o(t)}}}class o{constructor(t,e=!1,r=!1){this.isRenderable=e,this.data=t.data,this.layer=t.layer,this.page=t.page,this.viewport=t.viewport,this.linkService=t.linkService,this.downloadManager=t.downloadManager,this.imageResourcesPath=t.imageResourcesPath,this.renderInteractiveForms=t.renderInteractiveForms,this.svgFactory=t.svgFactory,e&&(this.container=this._createContainer(r))}_createContainer(t=!1){const e=this.data,r=this.page,n=this.viewport,s=document.createElement("section");let o=e.rect[2]-e.rect[0],a=e.rect[3]-e.rect[1];s.setAttribute("data-annotation-id",e.id);const c=i.Util.normalizeRect([e.rect[0],r.view[3]-e.rect[1]+r.view[1],e.rect[2],r.view[3]-e.rect[3]+r.view[1]]);if(s.style.transform=`matrix(${n.transform.join(",")})`,s.style.transformOrigin=`-${c[0]}px -${c[1]}px`,!t&&e.borderStyle.width>0){s.style.borderWidth=e.borderStyle.width+"px",e.borderStyle.style!==i.AnnotationBorderStyleType.UNDERLINE&&(o-=2*e.borderStyle.width,a-=2*e.borderStyle.width);const t=e.borderStyle.horizontalCornerRadius,r=e.borderStyle.verticalCornerRadius;if(t>0||r>0){const e=`${t}px / ${r}px`;s.style.borderRadius=e}switch(e.borderStyle.style){case i.AnnotationBorderStyleType.SOLID:s.style.borderStyle="solid";break;case i.AnnotationBorderStyleType.DASHED:s.style.borderStyle="dashed";break;case i.AnnotationBorderStyleType.BEVELED:(0,i.warn)("Unimplemented border style: beveled");break;case i.AnnotationBorderStyleType.INSET:(0,i.warn)("Unimplemented border style: inset");break;case i.AnnotationBorderStyleType.UNDERLINE:s.style.borderBottomStyle="solid"}e.color?s.style.borderColor=i.Util.makeCssRgb(0|e.color[0],0|e.color[1],0|e.color[2]):s.style.borderWidth=0}return s.style.left=c[0]+"px",s.style.top=c[1]+"px",s.style.width=o+"px",s.style.height=a+"px",s}_createPopup(t,e,r){e||((e=document.createElement("div")).style.height=t.style.height,e.style.width=t.style.width,t.appendChild(e));const n=new m({container:t,trigger:e,color:r.color,title:r.title,modificationDate:r.modificationDate,contents:r.contents,hideWrapper:!0}).render();n.style.left=t.style.width,t.appendChild(n)}render(){(0,i.unreachable)("Abstract method `AnnotationElement.render` called")}}class a extends o{constructor(t){super(t,!!(t.data.url||t.data.dest||t.data.action))}render(){this.container.className="linkAnnotation";const{data:t,linkService:e}=this,r=document.createElement("a");return t.url?(0,n.addLinkAttributes)(r,{url:t.url,target:t.newWindow?n.LinkTarget.BLANK:e.externalLinkTarget,rel:e.externalLinkRel,enabled:e.externalLinkEnabled}):t.action?this._bindNamedAction(r,t.action):this._bindLink(r,t.dest),this.container.appendChild(r),this.container}_bindLink(t,e){t.href=this.linkService.getDestinationHash(e),t.onclick=()=>(e&&this.linkService.navigateTo(e),!1),e&&(t.className="internalLink")}_bindNamedAction(t,e){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.linkService.executeNamedAction(e),!1),t.className="internalLink"}}class c extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents))}render(){this.container.className="textAnnotation";const t=document.createElement("img");return t.style.height=this.container.style.height,t.style.width=this.container.style.width,t.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",t.alt="[{{type}} Annotation]",t.dataset.l10nId="text_annotation_type",t.dataset.l10nArgs=JSON.stringify({type:this.data.name}),this.data.hasPopup||this._createPopup(this.container,t,this.data),this.container.appendChild(t),this.container}}class l extends o{render(){return this.container}}class u extends l{constructor(t){super(t,t.renderInteractiveForms||!t.data.hasAppearance&&!!t.data.fieldValue)}render(){const t=["left","center","right"];this.container.className="textWidgetAnnotation";let e=null;if(this.renderInteractiveForms){if(this.data.multiLine?(e=document.createElement("textarea"),e.textContent=this.data.fieldValue):(e=document.createElement("input"),e.type="text",e.setAttribute("value",this.data.fieldValue)),e.disabled=this.data.readOnly,null!==this.data.maxLen&&(e.maxLength=this.data.maxLen),this.data.comb){const t=(this.data.rect[2]-this.data.rect[0])/this.data.maxLen;e.classList.add("comb"),e.style.letterSpacing=`calc(${t}px - 1ch)`}}else{e=document.createElement("div"),e.textContent=this.data.fieldValue,e.style.verticalAlign="middle",e.style.display="table-cell";let t=null;this.data.fontRefName&&this.page.commonObjs.has(this.data.fontRefName)&&(t=this.page.commonObjs.get(this.data.fontRefName)),this._setTextStyle(e,t)}return null!==this.data.textAlignment&&(e.style.textAlign=t[this.data.textAlignment]),this.container.appendChild(e),this.container}_setTextStyle(t,e){const r=t.style;if(r.fontSize=this.data.fontSize+"px",r.direction=this.data.fontDirection<0?"rtl":"ltr",!e)return;let n="normal";e.black?n="900":e.bold&&(n="bold"),r.fontWeight=n,r.fontStyle=e.italic?"italic":"normal";const i=e.loadedName?`"${e.loadedName}", `:"",s=e.fallbackName||"Helvetica, sans-serif";r.fontFamily=i+s}}class h extends l{constructor(t){super(t,t.renderInteractiveForms)}render(){this.container.className="buttonWidgetAnnotation checkBox";const t=document.createElement("input");return t.disabled=this.data.readOnly,t.type="checkbox",this.data.fieldValue&&"Off"!==this.data.fieldValue&&t.setAttribute("checked",!0),this.container.appendChild(t),this.container}}class d extends l{constructor(t){super(t,t.renderInteractiveForms)}render(){this.container.className="buttonWidgetAnnotation radioButton";const t=document.createElement("input");return t.disabled=this.data.readOnly,t.type="radio",t.name=this.data.fieldName,this.data.fieldValue===this.data.buttonValue&&t.setAttribute("checked",!0),this.container.appendChild(t),this.container}}class p extends a{render(){const t=super.render();return t.className="buttonWidgetAnnotation pushButton",t}}class f extends l{constructor(t){super(t,t.renderInteractiveForms)}render(){this.container.className="choiceWidgetAnnotation";const t=document.createElement("select");t.disabled=this.data.readOnly,this.data.combo||(t.size=this.data.options.length,this.data.multiSelect&&(t.multiple=!0));for(const e of this.data.options){const r=document.createElement("option");r.textContent=e.displayValue,r.value=e.exportValue,this.data.fieldValue.includes(e.displayValue)&&r.setAttribute("selected",!0),t.appendChild(r)}return this.container.appendChild(t),this.container}}class g extends o{constructor(t){super(t,!(!t.data.title&&!t.data.contents))}render(){if(this.container.className="popupAnnotation",["Line","Square","Circle","PolyLine","Polygon","Ink"].includes(this.data.parentType))return this.container;const t=`[data-annotation-id="${this.data.parentId}"]`,e=this.layer.querySelector(t);if(!e)return this.container;const r=new m({container:this.container,trigger:e,color:this.data.color,title:this.data.title,modificationDate:this.data.modificationDate,contents:this.data.contents}),n=parseFloat(e.style.left),i=parseFloat(e.style.width);return this.container.style.transformOrigin=`-${n+i}px -${e.style.top}`,this.container.style.left=n+i+"px",this.container.appendChild(r.render()),this.container}}class m{constructor(t){this.container=t.container,this.trigger=t.trigger,this.color=t.color,this.title=t.title,this.modificationDate=t.modificationDate,this.contents=t.contents,this.hideWrapper=t.hideWrapper||!1,this.pinned=!1}render(){const t=document.createElement("div");t.className="popupWrapper",this.hideElement=this.hideWrapper?t:this.container,this.hideElement.setAttribute("hidden",!0);const e=document.createElement("div");e.className="popup";const r=this.color;if(r){const t=.7*(255-r[0])+r[0],n=.7*(255-r[1])+r[1],s=.7*(255-r[2])+r[2];e.style.backgroundColor=i.Util.makeCssRgb(0|t,0|n,0|s)}const s=document.createElement("h1");s.textContent=this.title,e.appendChild(s);const o=n.PDFDateString.toDateObject(this.modificationDate);if(o){const t=document.createElement("span");t.textContent="{{date}}, {{time}}",t.dataset.l10nId="annotation_date_string",t.dataset.l10nArgs=JSON.stringify({date:o.toLocaleDateString(),time:o.toLocaleTimeString()}),e.appendChild(t)}const a=this._formatContents(this.contents);return e.appendChild(a),this.trigger.addEventListener("click",this._toggle.bind(this)),this.trigger.addEventListener("mouseover",this._show.bind(this,!1)),this.trigger.addEventListener("mouseout",this._hide.bind(this,!1)),e.addEventListener("click",this._hide.bind(this,!0)),t.appendChild(e),t}_formatContents(t){const e=document.createElement("p"),r=t.split(/(?:\r\n?|\n)/);for(let t=0,n=r.length;t<n;++t){const i=r[t];e.appendChild(document.createTextNode(i)),t<n-1&&e.appendChild(document.createElement("br"))}return e}_toggle(){this.pinned?this._hide(!0):this._show(!0)}_show(t=!1){t&&(this.pinned=!0),this.hideElement.hasAttribute("hidden")&&(this.hideElement.removeAttribute("hidden"),this.container.style.zIndex+=1)}_hide(t=!0){t&&(this.pinned=!1),this.hideElement.hasAttribute("hidden")||this.pinned||(this.hideElement.setAttribute("hidden",!0),this.container.style.zIndex-=1)}}class y extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="freeTextAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class v extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){this.container.className="lineAnnotation";const t=this.data,e=t.rect[2]-t.rect[0],r=t.rect[3]-t.rect[1],n=this.svgFactory.create(e,r),i=this.svgFactory.createElement("svg:line");return i.setAttribute("x1",t.rect[2]-t.lineCoordinates[0]),i.setAttribute("y1",t.rect[3]-t.lineCoordinates[1]),i.setAttribute("x2",t.rect[2]-t.lineCoordinates[2]),i.setAttribute("y2",t.rect[3]-t.lineCoordinates[3]),i.setAttribute("stroke-width",t.borderStyle.width||1),i.setAttribute("stroke","transparent"),n.appendChild(i),this.container.append(n),this._createPopup(this.container,i,t),this.container}}class b extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){this.container.className="squareAnnotation";const t=this.data,e=t.rect[2]-t.rect[0],r=t.rect[3]-t.rect[1],n=this.svgFactory.create(e,r),i=t.borderStyle.width,s=this.svgFactory.createElement("svg:rect");return s.setAttribute("x",i/2),s.setAttribute("y",i/2),s.setAttribute("width",e-i),s.setAttribute("height",r-i),s.setAttribute("stroke-width",i||1),s.setAttribute("stroke","transparent"),s.setAttribute("fill","none"),n.appendChild(s),this.container.append(n),this._createPopup(this.container,s,t),this.container}}class A extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){this.container.className="circleAnnotation";const t=this.data,e=t.rect[2]-t.rect[0],r=t.rect[3]-t.rect[1],n=this.svgFactory.create(e,r),i=t.borderStyle.width,s=this.svgFactory.createElement("svg:ellipse");return s.setAttribute("cx",e/2),s.setAttribute("cy",r/2),s.setAttribute("rx",e/2-i/2),s.setAttribute("ry",r/2-i/2),s.setAttribute("stroke-width",i||1),s.setAttribute("stroke","transparent"),s.setAttribute("fill","none"),n.appendChild(s),this.container.append(n),this._createPopup(this.container,s,t),this.container}}class _ extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;const t=this.data,e=t.rect[2]-t.rect[0],r=t.rect[3]-t.rect[1],n=this.svgFactory.create(e,r);let i=[];for(const e of t.vertices){const r=e.x-t.rect[0],n=t.rect[3]-e.y;i.push(r+","+n)}i=i.join(" ");const s=this.svgFactory.createElement(this.svgElementName);return s.setAttribute("points",i),s.setAttribute("stroke-width",t.borderStyle.width||1),s.setAttribute("stroke","transparent"),s.setAttribute("fill","none"),n.appendChild(s),this.container.append(n),this._createPopup(this.container,s,t),this.container}}class w extends _{constructor(t){super(t),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class x extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="caretAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class S extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;const t=this.data,e=t.rect[2]-t.rect[0],r=t.rect[3]-t.rect[1],n=this.svgFactory.create(e,r);for(const e of t.inkLists){let r=[];for(const n of e){const e=n.x-t.rect[0],i=t.rect[3]-n.y;r.push(`${e},${i}`)}r=r.join(" ");const i=this.svgFactory.createElement(this.svgElementName);i.setAttribute("points",r),i.setAttribute("stroke-width",t.borderStyle.width||1),i.setAttribute("stroke","transparent"),i.setAttribute("fill","none"),this._createPopup(this.container,i,t),n.appendChild(i)}return this.container.append(n),this.container}}class E extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="highlightAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class C extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="underlineAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class T extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="squigglyAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class R extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="strikeoutAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class k extends o{constructor(t){super(t,!!(t.data.hasPopup||t.data.title||t.data.contents),!0)}render(){return this.container.className="stampAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}class P extends o{constructor(t){super(t,!0);const{filename:e,content:r}=this.data.file;this.filename=(0,n.getFilenameFromUrl)(e),this.content=r,this.linkService.eventBus&&this.linkService.eventBus.dispatch("fileattachmentannotation",{source:this,id:(0,i.stringToPDFString)(e),filename:e,content:r})}render(){this.container.className="fileAttachmentAnnotation";const t=document.createElement("div");return t.style.height=this.container.style.height,t.style.width=this.container.style.width,t.addEventListener("dblclick",this._download.bind(this)),this.data.hasPopup||!this.data.title&&!this.data.contents||this._createPopup(this.container,t,this.data),this.container.appendChild(t),this.container}_download(){this.downloadManager?this.downloadManager.downloadData(this.content,this.filename,""):(0,i.warn)("Download cannot be started due to unavailable download manager")}}e.AnnotationLayer=class{static render(t){const e=[],r=[];for(const n of t.annotations)n&&(n.annotationType!==i.AnnotationType.POPUP?e.push(n):r.push(n));r.length&&e.push(...r);for(const r of e){const e=s.create({data:r,layer:t.div,page:t.page,viewport:t.viewport,linkService:t.linkService,downloadManager:t.downloadManager,imageResourcesPath:t.imageResourcesPath||"",renderInteractiveForms:t.renderInteractiveForms||!1,svgFactory:new n.DOMSVGFactory});e.isRenderable&&t.div.appendChild(e.render())}}static update(t){for(const e of t.annotations){const r=t.div.querySelector(`[data-annotation-id="${e.id}"]`);r&&(r.style.transform=`matrix(${t.viewport.transform.join(",")})`)}t.div.removeAttribute("hidden")}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SVGGraphics=void 0;var n=r(1),i=r(4),s=r(7);let o=function(){throw new Error("Not implemented: SVGGraphics")};e.SVGGraphics=o;{const t={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},r="http://www.w3.org/XML/1998/namespace",l="http://www.w3.org/1999/xlink",u=["butt","round","square"],h=["miter","round","bevel"],d=function(){const t=new Uint8Array([137,80,78,71,13,10,26,10]),e=new Int32Array(256);for(let t=0;t<256;t++){let r=t;for(let t=0;t<8;t++)r=1&r?3988292384^r>>1&2147483647:r>>1&2147483647;e[t]=r}function r(t,r,n,i){let s=i;const o=r.length;n[s]=o>>24&255,n[s+1]=o>>16&255,n[s+2]=o>>8&255,n[s+3]=255&o,s+=4,n[s]=255&t.charCodeAt(0),n[s+1]=255&t.charCodeAt(1),n[s+2]=255&t.charCodeAt(2),n[s+3]=255&t.charCodeAt(3),s+=4,n.set(r,s),s+=r.length;const a=function(t,r,n){let i=-1;for(let s=r;s<n;s++){const r=255&(i^t[s]);i=i>>>8^e[r]}return-1^i}(n,i+4,s);n[s]=a>>24&255,n[s+1]=a>>16&255,n[s+2]=a>>8&255,n[s+3]=255&a}function i(t){let e=t.length;const r=Math.ceil(e/65535),n=new Uint8Array(2+e+5*r+4);let i=0;n[i++]=120,n[i++]=156;let s=0;for(;e>65535;)n[i++]=0,n[i++]=255,n[i++]=255,n[i++]=0,n[i++]=0,n.set(t.subarray(s,s+65535),i),i+=65535,s+=65535,e-=65535;n[i++]=1,n[i++]=255&e,n[i++]=e>>8&255,n[i++]=255&~e,n[i++]=(65535&~e)>>8&255,n.set(t.subarray(s),i),i+=t.length-s;const o=function(t,e,r){let n=1,i=0;for(let s=e;s<r;++s)n=(n+(255&t[s]))%65521,i=(i+n)%65521;return i<<16|n}(t,0,t.length);return n[i++]=o>>24&255,n[i++]=o>>16&255,n[i++]=o>>8&255,n[i++]=255&o,n}function o(e,o,a,c){const l=e.width,u=e.height;let h,d,p;const f=e.data;switch(o){case n.ImageKind.GRAYSCALE_1BPP:d=0,h=1,p=l+7>>3;break;case n.ImageKind.RGB_24BPP:d=2,h=8,p=3*l;break;case n.ImageKind.RGBA_32BPP:d=6,h=8,p=4*l;break;default:throw new Error("invalid format")}const g=new Uint8Array((1+p)*u);let m=0,y=0;for(let t=0;t<u;++t)g[m++]=0,g.set(f.subarray(y,y+p),m),y+=p,m+=p;if(o===n.ImageKind.GRAYSCALE_1BPP&&c){m=0;for(let t=0;t<u;t++){m++;for(let t=0;t<p;t++)g[m++]^=255}}const v=new Uint8Array([l>>24&255,l>>16&255,l>>8&255,255&l,u>>24&255,u>>16&255,u>>8&255,255&u,h,d,0,0,0]),b=function(t){if(!s.isNodeJS)return i(t);try{let e;e=parseInt(process.versions.node)>=8?t:Buffer.from(t);const r=__webpack_require__(196).deflateSync(e,{level:9});return r instanceof Uint8Array?r:new Uint8Array(r)}catch(t){(0,n.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+t)}return i(t)}(g),A=t.length+36+v.length+b.length,_=new Uint8Array(A);let w=0;return _.set(t,w),w+=t.length,r("IHDR",v,_,w),w+=12+v.length,r("IDATA",b,_,w),w+=12+b.length,r("IEND",new Uint8Array(0),_,w),(0,n.createObjectURL)(_,"image/png",a)}return function(t,e,r){return o(t,void 0===t.kind?n.ImageKind.GRAYSCALE_1BPP:t.kind,e,r)}}();class p{constructor(){this.fontSizeScale=1,this.fontWeight=t.fontWeight,this.fontSize=0,this.textMatrix=n.IDENTITY_MATRIX,this.fontMatrix=n.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=n.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=t.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(t,e){this.x=t,this.y=e}}function a(t){if(Number.isInteger(t))return t.toString();const e=t.toFixed(10);let r=e.length-1;if("0"!==e[r])return e;do{r--}while("0"===e[r]);return e.substring(0,"."===e[r]?r:r+1)}function c(t){if(0===t[4]&&0===t[5]){if(0===t[1]&&0===t[2])return 1===t[0]&&1===t[3]?"":`scale(${a(t[0])} ${a(t[3])})`;if(t[0]===t[3]&&t[1]===-t[2])return`rotate(${a(180*Math.acos(t[0])/Math.PI)})`}else if(1===t[0]&&0===t[1]&&0===t[2]&&1===t[3])return`translate(${a(t[4])} ${a(t[5])})`;return`matrix(${a(t[0])} ${a(t[1])} ${a(t[2])} ${a(t[3])} ${a(t[4])} `+a(t[5])+")"}let f=0,g=0,m=0;e.SVGGraphics=o=class{constructor(t,e,r){this.svgFactory=new i.DOMSVGFactory,this.current=new p,this.transformMatrix=n.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=t,this.objs=e,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!r,this._operatorIdMapping=[];for(const t in n.OPS)this._operatorIdMapping[n.OPS[t]]=t}save(){this.transformStack.push(this.transformMatrix);const t=this.current;this.extraStack.push(t),this.current=t.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(t){this.save(),this.executeOpTree(t),this.restore()}loadDependencies(t){const e=t.fnArray,r=t.argsArray;for(let t=0,i=e.length;t<i;t++)if(e[t]===n.OPS.dependency)for(const e of r[t]){const t=e.startsWith("g_")?this.commonObjs:this.objs,r=new Promise(r=>{t.get(e,r)});this.current.dependencies.push(r)}return Promise.all(this.current.dependencies)}transform(t,e,r,i,s,o){const a=[t,e,r,i,s,o];this.transformMatrix=n.Util.transform(this.transformMatrix,a),this.tgrp=null}getSVG(t,e){this.viewport=e;const r=this._initialize(e);return this.loadDependencies(t).then(()=>(this.transformMatrix=n.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(t)),r))}convertOpList(t){const e=this._operatorIdMapping,r=t.argsArray,n=t.fnArray,i=[];for(let t=0,s=n.length;t<s;t++){const s=n[t];i.push({fnId:s,fn:e[s],args:r[t]})}return function(t){let e=[];const r=[];for(const n of t)"save"!==n.fn?"restore"===n.fn?e=r.pop():e.push(n):(e.push({fnId:92,fn:"group",items:[]}),r.push(e),e=e[e.length-1].items);return e}(i)}executeOpTree(t){for(const e of t){const t=e.fn,r=e.fnId,i=e.args;switch(0|r){case n.OPS.beginText:this.beginText();break;case n.OPS.dependency:break;case n.OPS.setLeading:this.setLeading(i);break;case n.OPS.setLeadingMoveText:this.setLeadingMoveText(i[0],i[1]);break;case n.OPS.setFont:this.setFont(i);break;case n.OPS.showText:case n.OPS.showSpacedText:this.showText(i[0]);break;case n.OPS.endText:this.endText();break;case n.OPS.moveText:this.moveText(i[0],i[1]);break;case n.OPS.setCharSpacing:this.setCharSpacing(i[0]);break;case n.OPS.setWordSpacing:this.setWordSpacing(i[0]);break;case n.OPS.setHScale:this.setHScale(i[0]);break;case n.OPS.setTextMatrix:this.setTextMatrix(i[0],i[1],i[2],i[3],i[4],i[5]);break;case n.OPS.setTextRise:this.setTextRise(i[0]);break;case n.OPS.setTextRenderingMode:this.setTextRenderingMode(i[0]);break;case n.OPS.setLineWidth:this.setLineWidth(i[0]);break;case n.OPS.setLineJoin:this.setLineJoin(i[0]);break;case n.OPS.setLineCap:this.setLineCap(i[0]);break;case n.OPS.setMiterLimit:this.setMiterLimit(i[0]);break;case n.OPS.setFillRGBColor:this.setFillRGBColor(i[0],i[1],i[2]);break;case n.OPS.setStrokeRGBColor:this.setStrokeRGBColor(i[0],i[1],i[2]);break;case n.OPS.setStrokeColorN:this.setStrokeColorN(i);break;case n.OPS.setFillColorN:this.setFillColorN(i);break;case n.OPS.shadingFill:this.shadingFill(i[0]);break;case n.OPS.setDash:this.setDash(i[0],i[1]);break;case n.OPS.setRenderingIntent:this.setRenderingIntent(i[0]);break;case n.OPS.setFlatness:this.setFlatness(i[0]);break;case n.OPS.setGState:this.setGState(i[0]);break;case n.OPS.fill:this.fill();break;case n.OPS.eoFill:this.eoFill();break;case n.OPS.stroke:this.stroke();break;case n.OPS.fillStroke:this.fillStroke();break;case n.OPS.eoFillStroke:this.eoFillStroke();break;case n.OPS.clip:this.clip("nonzero");break;case n.OPS.eoClip:this.clip("evenodd");break;case n.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case n.OPS.paintJpegXObject:this.paintJpegXObject(i[0],i[1],i[2]);break;case n.OPS.paintImageXObject:this.paintImageXObject(i[0]);break;case n.OPS.paintInlineImageXObject:this.paintInlineImageXObject(i[0]);break;case n.OPS.paintImageMaskXObject:this.paintImageMaskXObject(i[0]);break;case n.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(i[0],i[1]);break;case n.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case n.OPS.closePath:this.closePath();break;case n.OPS.closeStroke:this.closeStroke();break;case n.OPS.closeFillStroke:this.closeFillStroke();break;case n.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case n.OPS.nextLine:this.nextLine();break;case n.OPS.transform:this.transform(i[0],i[1],i[2],i[3],i[4],i[5]);break;case n.OPS.constructPath:this.constructPath(i[0],i[1]);break;case n.OPS.endPath:this.endPath();break;case 92:this.group(e.items);break;default:(0,n.warn)("Unimplemented operator "+t)}}}setWordSpacing(t){this.current.wordSpacing=t}setCharSpacing(t){this.current.charSpacing=t}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(t,e,r,n,i,s){const o=this.current;o.textMatrix=o.lineMatrix=[t,e,r,n,i,s],o.textMatrixScale=Math.sqrt(t*t+e*e),o.x=o.lineX=0,o.y=o.lineY=0,o.xcoords=[],o.tspan=this.svgFactory.createElement("svg:tspan"),o.tspan.setAttributeNS(null,"font-family",o.fontFamily),o.tspan.setAttributeNS(null,"font-size",a(o.fontSize)+"px"),o.tspan.setAttributeNS(null,"y",a(-o.y)),o.txtElement=this.svgFactory.createElement("svg:text"),o.txtElement.appendChild(o.tspan)}beginText(){const t=this.current;t.x=t.lineX=0,t.y=t.lineY=0,t.textMatrix=n.IDENTITY_MATRIX,t.lineMatrix=n.IDENTITY_MATRIX,t.textMatrixScale=1,t.tspan=this.svgFactory.createElement("svg:tspan"),t.txtElement=this.svgFactory.createElement("svg:text"),t.txtgrp=this.svgFactory.createElement("svg:g"),t.xcoords=[]}moveText(t,e){const r=this.current;r.x=r.lineX+=t,r.y=r.lineY+=e,r.xcoords=[],r.tspan=this.svgFactory.createElement("svg:tspan"),r.tspan.setAttributeNS(null,"font-family",r.fontFamily),r.tspan.setAttributeNS(null,"font-size",a(r.fontSize)+"px"),r.tspan.setAttributeNS(null,"y",a(-r.y))}showText(e){const i=this.current,s=i.font,o=i.fontSize;if(0===o)return;const l=i.charSpacing,u=i.wordSpacing,h=i.fontDirection,d=i.textHScale*h,p=s.vertical,f=o*i.fontMatrix[0];let g=0;for(const t of e){if(null===t){g+=h*u;continue}if((0,n.isNum)(t)){g+=-t*o*.001;continue}const e=t.width,r=t.fontChar,a=e*f+((t.isSpace?u:0)+l)*h;t.isInFont||s.missingFile?(i.xcoords.push(i.x+g),i.tspan.textContent+=r,g+=a):g+=a}p?i.y-=g*d:i.x+=g*d,i.tspan.setAttributeNS(null,"x",i.xcoords.map(a).join(" ")),i.tspan.setAttributeNS(null,"y",a(-i.y)),i.tspan.setAttributeNS(null,"font-family",i.fontFamily),i.tspan.setAttributeNS(null,"font-size",a(i.fontSize)+"px"),i.fontStyle!==t.fontStyle&&i.tspan.setAttributeNS(null,"font-style",i.fontStyle),i.fontWeight!==t.fontWeight&&i.tspan.setAttributeNS(null,"font-weight",i.fontWeight);const m=i.textRenderingMode&n.TextRenderingMode.FILL_STROKE_MASK;if(m===n.TextRenderingMode.FILL||m===n.TextRenderingMode.FILL_STROKE?(i.fillColor!==t.fillColor&&i.tspan.setAttributeNS(null,"fill",i.fillColor),i.fillAlpha<1&&i.tspan.setAttributeNS(null,"fill-opacity",i.fillAlpha)):i.textRenderingMode===n.TextRenderingMode.ADD_TO_PATH?i.tspan.setAttributeNS(null,"fill","transparent"):i.tspan.setAttributeNS(null,"fill","none"),m===n.TextRenderingMode.STROKE||m===n.TextRenderingMode.FILL_STROKE){const t=1/(i.textMatrixScale||1);this._setStrokeAttributes(i.tspan,t)}let y=i.textMatrix;0!==i.textRise&&(y=y.slice(),y[5]+=i.textRise),i.txtElement.setAttributeNS(null,"transform",`${c(y)} scale(${a(d)}, -1)`),i.txtElement.setAttributeNS(r,"xml:space","preserve"),i.txtElement.appendChild(i.tspan),i.txtgrp.appendChild(i.txtElement),this._ensureTransformGroup().appendChild(i.txtElement)}setLeadingMoveText(t,e){this.setLeading(-e),this.moveText(t,e)}addFontStyle(t){this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.appendChild(this.cssStyle));const e=(0,n.createObjectURL)(t.data,t.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${t.loadedName}"; src: url(${e}); }\n`}setFont(t){const e=this.current,r=this.commonObjs.get(t[0]);let i=t[1];e.font=r,this.embedFonts&&r.data&&!this.embeddedFonts[r.loadedName]&&(this.addFontStyle(r),this.embeddedFonts[r.loadedName]=r),e.fontMatrix=r.fontMatrix?r.fontMatrix:n.FONT_IDENTITY_MATRIX;let s="normal";r.black?s="900":r.bold&&(s="bold");const o=r.italic?"italic":"normal";i<0?(i=-i,e.fontDirection=-1):e.fontDirection=1,e.fontSize=i,e.fontFamily=r.loadedName,e.fontWeight=s,e.fontStyle=o,e.tspan=this.svgFactory.createElement("svg:tspan"),e.tspan.setAttributeNS(null,"y",a(-e.y)),e.xcoords=[]}endText(){const t=this.current;t.textRenderingMode&n.TextRenderingMode.ADD_TO_PATH_FLAG&&t.txtElement&&t.txtElement.hasChildNodes()&&(t.element=t.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(t){t>0&&(this.current.lineWidth=t)}setLineCap(t){this.current.lineCap=u[t]}setLineJoin(t){this.current.lineJoin=h[t]}setMiterLimit(t){this.current.miterLimit=t}setStrokeAlpha(t){this.current.strokeAlpha=t}setStrokeRGBColor(t,e,r){this.current.strokeColor=n.Util.makeCssRgb(t,e,r)}setFillAlpha(t){this.current.fillAlpha=t}setFillRGBColor(t,e,r){this.current.fillColor=n.Util.makeCssRgb(t,e,r),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[]}setStrokeColorN(t){this.current.strokeColor=this._makeColorN_Pattern(t)}setFillColorN(t){this.current.fillColor=this._makeColorN_Pattern(t)}shadingFill(t){const e=this.viewport.width,r=this.viewport.height,i=n.Util.inverseTransform(this.transformMatrix),s=n.Util.applyTransform([0,0],i),o=n.Util.applyTransform([0,r],i),a=n.Util.applyTransform([e,0],i),c=n.Util.applyTransform([e,r],i),l=Math.min(s[0],o[0],a[0],c[0]),u=Math.min(s[1],o[1],a[1],c[1]),h=Math.max(s[0],o[0],a[0],c[0]),d=Math.max(s[1],o[1],a[1],c[1]),p=this.svgFactory.createElement("svg:rect");p.setAttributeNS(null,"x",l),p.setAttributeNS(null,"y",u),p.setAttributeNS(null,"width",h-l),p.setAttributeNS(null,"height",d-u),p.setAttributeNS(null,"fill",this._makeShadingPattern(t)),this._ensureTransformGroup().appendChild(p)}_makeColorN_Pattern(t){return"TilingPattern"===t[0]?this._makeTilingPattern(t):this._makeShadingPattern(t)}_makeTilingPattern(t){const e=t[1],r=t[2],i=t[3]||n.IDENTITY_MATRIX,[s,o,a,c]=t[4],l=t[5],u=t[6],h=t[7],d="shading"+m++,[p,f]=n.Util.applyTransform([s,o],i),[g,y]=n.Util.applyTransform([a,c],i),[v,b]=n.Util.singularValueDecompose2dScale(i),A=l*v,_=u*b,w=this.svgFactory.createElement("svg:pattern");w.setAttributeNS(null,"id",d),w.setAttributeNS(null,"patternUnits","userSpaceOnUse"),w.setAttributeNS(null,"width",A),w.setAttributeNS(null,"height",_),w.setAttributeNS(null,"x",""+p),w.setAttributeNS(null,"y",""+f);const x=this.svg,S=this.transformMatrix,E=this.current.fillColor,C=this.current.strokeColor,T=this.svgFactory.create(g-p,y-f);if(this.svg=T,this.transformMatrix=i,2===h){const t=n.Util.makeCssRgb(...e);this.current.fillColor=t,this.current.strokeColor=t}return this.executeOpTree(this.convertOpList(r)),this.svg=x,this.transformMatrix=S,this.current.fillColor=E,this.current.strokeColor=C,w.appendChild(T.childNodes[0]),this.defs.appendChild(w),`url(#${d})`}_makeShadingPattern(t){switch(t[0]){case"RadialAxial":const e="shading"+m++,r=t[3];let i;switch(t[1]){case"axial":const r=t[4],n=t[5];i=this.svgFactory.createElement("svg:linearGradient"),i.setAttributeNS(null,"id",e),i.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),i.setAttributeNS(null,"x1",r[0]),i.setAttributeNS(null,"y1",r[1]),i.setAttributeNS(null,"x2",n[0]),i.setAttributeNS(null,"y2",n[1]);break;case"radial":const s=t[4],o=t[5],a=t[6],c=t[7];i=this.svgFactory.createElement("svg:radialGradient"),i.setAttributeNS(null,"id",e),i.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),i.setAttributeNS(null,"cx",o[0]),i.setAttributeNS(null,"cy",o[1]),i.setAttributeNS(null,"r",c),i.setAttributeNS(null,"fx",s[0]),i.setAttributeNS(null,"fy",s[1]),i.setAttributeNS(null,"fr",a);break;default:throw new Error("Unknown RadialAxial type: "+t[1])}for(const t of r){const e=this.svgFactory.createElement("svg:stop");e.setAttributeNS(null,"offset",t[0]),e.setAttributeNS(null,"stop-color",t[1]),i.appendChild(e)}return this.defs.appendChild(i),`url(#${e})`;case"Mesh":return(0,n.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error("Unknown IR type: "+t[0])}}setDash(t,e){this.current.dashArray=t,this.current.dashPhase=e}constructPath(t,e){const r=this.current;let i=r.x,s=r.y,o=[],c=0;for(const r of t)switch(0|r){case n.OPS.rectangle:i=e[c++],s=e[c++];const t=i+e[c++],r=s+e[c++];o.push("M",a(i),a(s),"L",a(t),a(s),"L",a(t),a(r),"L",a(i),a(r),"Z");break;case n.OPS.moveTo:i=e[c++],s=e[c++],o.push("M",a(i),a(s));break;case n.OPS.lineTo:i=e[c++],s=e[c++],o.push("L",a(i),a(s));break;case n.OPS.curveTo:i=e[c+4],s=e[c+5],o.push("C",a(e[c]),a(e[c+1]),a(e[c+2]),a(e[c+3]),a(i),a(s)),c+=6;break;case n.OPS.curveTo2:o.push("C",a(i),a(s),a(e[c]),a(e[c+1]),a(e[c+2]),a(e[c+3])),i=e[c+2],s=e[c+3],c+=4;break;case n.OPS.curveTo3:i=e[c+2],s=e[c+3],o.push("C",a(e[c]),a(e[c+1]),a(i),a(s),a(i),a(s)),c+=4;break;case n.OPS.closePath:o.push("Z")}o=o.join(" "),r.path&&t.length>0&&t[0]!==n.OPS.rectangle&&t[0]!==n.OPS.moveTo?o=r.path.getAttributeNS(null,"d")+o:(r.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().appendChild(r.path)),r.path.setAttributeNS(null,"d",o),r.path.setAttributeNS(null,"fill","none"),r.element=r.path,r.setCurrentPoint(i,s)}endPath(){const t=this.current;if(t.path=null,!this.pendingClip)return;if(!t.element)return void(this.pendingClip=null);const e="clippath"+f++,r=this.svgFactory.createElement("svg:clipPath");r.setAttributeNS(null,"id",e),r.setAttributeNS(null,"transform",c(this.transformMatrix));const n=t.element.cloneNode(!0);"evenodd"===this.pendingClip?n.setAttributeNS(null,"clip-rule","evenodd"):n.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,r.appendChild(n),this.defs.appendChild(r),t.activeClipUrl&&(t.clipGroup=null,this.extraStack.forEach((function(t){t.clipGroup=null})),r.setAttributeNS(null,"clip-path",t.activeClipUrl)),t.activeClipUrl=`url(#${e})`,this.tgrp=null}clip(t){this.pendingClip=t}closePath(){const t=this.current;if(t.path){const e=t.path.getAttributeNS(null,"d")+"Z";t.path.setAttributeNS(null,"d",e)}}setLeading(t){this.current.leading=-t}setTextRise(t){this.current.textRise=t}setTextRenderingMode(t){this.current.textRenderingMode=t}setHScale(t){this.current.textHScale=t/100}setRenderingIntent(t){}setFlatness(t){}setGState(t){for(const[e,r]of t)switch(e){case"LW":this.setLineWidth(r);break;case"LC":this.setLineCap(r);break;case"LJ":this.setLineJoin(r);break;case"ML":this.setMiterLimit(r);break;case"D":this.setDash(r[0],r[1]);break;case"RI":this.setRenderingIntent(r);break;case"FL":this.setFlatness(r);break;case"Font":this.setFont(r);break;case"CA":this.setStrokeAlpha(r);break;case"ca":this.setFillAlpha(r);break;default:(0,n.warn)("Unimplemented graphic state operator "+e)}}fill(){const t=this.current;t.element&&(t.element.setAttributeNS(null,"fill",t.fillColor),t.element.setAttributeNS(null,"fill-opacity",t.fillAlpha),this.endPath())}stroke(){const t=this.current;t.element&&(this._setStrokeAttributes(t.element),t.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(t,e=1){const r=this.current;let n=r.dashArray;1!==e&&n.length>0&&(n=n.map((function(t){return e*t}))),t.setAttributeNS(null,"stroke",r.strokeColor),t.setAttributeNS(null,"stroke-opacity",r.strokeAlpha),t.setAttributeNS(null,"stroke-miterlimit",a(r.miterLimit)),t.setAttributeNS(null,"stroke-linecap",r.lineCap),t.setAttributeNS(null,"stroke-linejoin",r.lineJoin),t.setAttributeNS(null,"stroke-width",a(e*r.lineWidth)+"px"),t.setAttributeNS(null,"stroke-dasharray",n.map(a).join(" ")),t.setAttributeNS(null,"stroke-dashoffset",a(e*r.dashPhase)+"px")}eoFill(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){const t=this.svgFactory.createElement("svg:rect");t.setAttributeNS(null,"x","0"),t.setAttributeNS(null,"y","0"),t.setAttributeNS(null,"width","1px"),t.setAttributeNS(null,"height","1px"),t.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().appendChild(t)}paintJpegXObject(t,e,r){const n=this.objs.get(t),i=this.svgFactory.createElement("svg:image");i.setAttributeNS(l,"xlink:href",n.src),i.setAttributeNS(null,"width",a(e)),i.setAttributeNS(null,"height",a(r)),i.setAttributeNS(null,"x","0"),i.setAttributeNS(null,"y",a(-r)),i.setAttributeNS(null,"transform",`scale(${a(1/e)} ${a(-1/r)})`),this._ensureTransformGroup().appendChild(i)}paintImageXObject(t){const e=this.objs.get(t);e?this.paintInlineImageXObject(e):(0,n.warn)(`Dependent image with object ID ${t} is not ready yet`)}paintInlineImageXObject(t,e){const r=t.width,n=t.height,i=d(t,this.forceDataSchema,!!e),s=this.svgFactory.createElement("svg:rect");s.setAttributeNS(null,"x","0"),s.setAttributeNS(null,"y","0"),s.setAttributeNS(null,"width",a(r)),s.setAttributeNS(null,"height",a(n)),this.current.element=s,this.clip("nonzero");const o=this.svgFactory.createElement("svg:image");o.setAttributeNS(l,"xlink:href",i),o.setAttributeNS(null,"x","0"),o.setAttributeNS(null,"y",a(-n)),o.setAttributeNS(null,"width",a(r)+"px"),o.setAttributeNS(null,"height",a(n)+"px"),o.setAttributeNS(null,"transform",`scale(${a(1/r)} ${a(-1/n)})`),e?e.appendChild(o):this._ensureTransformGroup().appendChild(o)}paintImageMaskXObject(t){const e=this.current,r=t.width,n=t.height,i=e.fillColor;e.maskId="mask"+g++;const s=this.svgFactory.createElement("svg:mask");s.setAttributeNS(null,"id",e.maskId);const o=this.svgFactory.createElement("svg:rect");o.setAttributeNS(null,"x","0"),o.setAttributeNS(null,"y","0"),o.setAttributeNS(null,"width",a(r)),o.setAttributeNS(null,"height",a(n)),o.setAttributeNS(null,"fill",i),o.setAttributeNS(null,"mask",`url(#${e.maskId})`),this.defs.appendChild(s),this._ensureTransformGroup().appendChild(o),this.paintInlineImageXObject(t,s)}paintFormXObjectBegin(t,e){if(Array.isArray(t)&&6===t.length&&this.transform(t[0],t[1],t[2],t[3],t[4],t[5]),e){const t=e[2]-e[0],r=e[3]-e[1],n=this.svgFactory.createElement("svg:rect");n.setAttributeNS(null,"x",e[0]),n.setAttributeNS(null,"y",e[1]),n.setAttributeNS(null,"width",a(t)),n.setAttributeNS(null,"height",a(r)),this.current.element=n,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(t){const e=this.svgFactory.create(t.width,t.height),r=this.svgFactory.createElement("svg:defs");e.appendChild(r),this.defs=r;const n=this.svgFactory.createElement("svg:g");return n.setAttributeNS(null,"transform",c(t.transform)),e.appendChild(n),this.svg=n,e}_ensureClipGroup(){if(!this.current.clipGroup){const t=this.svgFactory.createElement("svg:g");t.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.appendChild(t),this.current.clipGroup=t}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",c(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().appendChild(this.tgrp):this.svg.appendChild(this.tgrp)),this.tgrp}}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PDFNodeStream=void 0;var n=r(1),i=r(20);const s=__webpack_require__(197),o=__webpack_require__(198),a=__webpack_require__(199),c=__webpack_require__(200),l=/^file:\/\/\/[a-zA-Z]:\//;e.PDFNodeStream=class{constructor(t){this.source=t,this.url=function(t){const e=c.parse(t);return"file:"===e.protocol||e.host?e:/^[a-z]:[/\\]/i.test(t)?c.parse("file:///"+t):(e.host||(e.protocol="file:"),e)}(t.url),this.isHttp="http:"===this.url.protocol||"https:"===this.url.protocol,this.isFsUrl="file:"===this.url.protocol,this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?this._fullRequestReader._loaded:0}getFullReader(){return(0,n.assert)(!this._fullRequestReader),this._fullRequestReader=this.isFsUrl?new g(this):new p(this),this._fullRequestReader}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const r=this.isFsUrl?new m(this,t,e):new f(this,t,e);return this._rangeRequestReaders.push(r),r}cancelAllRequests(t){this._fullRequestReader&&this._fullRequestReader.cancel(t),this._rangeRequestReaders.slice(0).forEach((function(e){e.cancel(t)}))}};class u{constructor(t){this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null;const e=t.source;this._contentLength=e.length,this._loaded=0,this._filename=null,this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._readableStream=null,this._readCapability=(0,n.createPromiseCapability)(),this._headersCapability=(0,n.createPromiseCapability)()}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const t=this._readableStream.read();return null===t?(this._readCapability=(0,n.createPromiseCapability)(),this.read()):(this._loaded+=t.length,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._readableStream?this._readableStream.destroy(t):this._error(t)}_error(t){this._storedError=t,this._readCapability.resolve()}_setReadableStream(t){this._readableStream=t,t.on("readable",()=>{this._readCapability.resolve()}),t.on("end",()=>{t.destroy(),this._done=!0,this._readCapability.resolve()}),t.on("error",t=>{this._error(t)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new n.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class h{constructor(t){this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=(0,n.createPromiseCapability)();const e=t.source;this._isStreamingSupported=!e.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const t=this._readableStream.read();return null===t?(this._readCapability=(0,n.createPromiseCapability)(),this.read()):(this._loaded+=t.length,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._readableStream?this._readableStream.destroy(t):this._error(t)}_error(t){this._storedError=t,this._readCapability.resolve()}_setReadableStream(t){this._readableStream=t,t.on("readable",()=>{this._readCapability.resolve()}),t.on("end",()=>{t.destroy(),this._done=!0,this._readCapability.resolve()}),t.on("error",t=>{this._error(t)}),this._storedError&&this._readableStream.destroy(this._storedError)}}function d(t,e){return{protocol:t.protocol,auth:t.auth,host:t.hostname,port:t.port,path:t.path,method:"GET",headers:e}}class p extends u{constructor(t){super(t);const e=e=>{if(404===e.statusCode){const t=new n.MissingPDFException(`Missing PDF "${this._url}".`);return this._storedError=t,void this._headersCapability.reject(t)}this._headersCapability.resolve(),this._setReadableStream(e);const r=t=>this._readableStream.headers[t.toLowerCase()],{allowRangeRequests:s,suggestedLength:o}=(0,i.validateRangeRequestCapabilities)({getResponseHeader:r,isHttp:t.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=s,this._contentLength=o||this._contentLength,this._filename=(0,i.extractFilenameFromHeader)(r)};this._request=null,"http:"===this._url.protocol?this._request=o.request(d(this._url,t.httpHeaders),e):this._request=a.request(d(this._url,t.httpHeaders),e),this._request.on("error",t=>{this._storedError=t,this._headersCapability.reject(t)}),this._request.end()}}class f extends h{constructor(t,e,r){super(t),this._httpHeaders={};for(const e in t.httpHeaders){const r=t.httpHeaders[e];void 0!==r&&(this._httpHeaders[e]=r)}this._httpHeaders.Range=`bytes=${e}-${r-1}`;const i=t=>{if(404!==t.statusCode)this._setReadableStream(t);else{const t=new n.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=t}};this._request=null,"http:"===this._url.protocol?this._request=o.request(d(this._url,this._httpHeaders),i):this._request=a.request(d(this._url,this._httpHeaders),i),this._request.on("error",t=>{this._storedError=t}),this._request.end()}}class g extends u{constructor(t){super(t);let e=decodeURIComponent(this._url.path);l.test(this._url.href)&&(e=e.replace(/^\//,"")),s.lstat(e,(t,r)=>{if(t)return"ENOENT"===t.code&&(t=new n.MissingPDFException(`Missing PDF "${e}".`)),this._storedError=t,void this._headersCapability.reject(t);this._contentLength=r.size,this._setReadableStream(s.createReadStream(e)),this._headersCapability.resolve()})}}class m extends h{constructor(t,e,r){super(t);let n=decodeURIComponent(this._url.path);l.test(this._url.href)&&(n=n.replace(/^\//,"")),this._setReadableStream(s.createReadStream(n,{start:e,end:r-1}))}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createResponseStatusError=function(t,e){return 404===t||0===t&&e.startsWith("file:")?new n.MissingPDFException('Missing PDF "'+e+'".'):new n.UnexpectedResponseException("Unexpected server response ("+t+') while retrieving PDF "'+e+'".',t)},e.extractFilenameFromHeader=function(t){const e=t("Content-Disposition");if(e){let t=(0,i.getFilenameFromContentDispositionHeader)(e);if(t.includes("%"))try{t=decodeURIComponent(t)}catch(t){}if(/\.pdf$/i.test(t))return t}return null},e.validateRangeRequestCapabilities=function({getResponseHeader:t,isHttp:e,rangeChunkSize:r,disableRange:i}){(0,n.assert)(r>0,"Range chunk size must be larger than zero");const s={allowRangeRequests:!1,suggestedLength:void 0},o=parseInt(t("Content-Length"),10);return Number.isInteger(o)?(s.suggestedLength=o,o<=2*r||i||!e||"bytes"!==t("Accept-Ranges")||"identity"!==(t("Content-Encoding")||"identity")||(s.allowRangeRequests=!0),s):s},e.validateResponseStatus=function(t){return 200===t||206===t};var n=r(1),i=r(21)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getFilenameFromContentDispositionHeader=function(t){let e=!0,r=n("filename\\*","i").exec(t);if(r){r=r[1];let t=o(r);return t=unescape(t),t=a(t),t=c(t),s(t)}if(r=function(t){const e=[];let r;const i=n("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;null!==(r=i.exec(t));){let[,t,n,i]=r;if(t=parseInt(t,10),t in e){if(0===t)break}else e[t]=[n,i]}const s=[];for(let t=0;t<e.length&&t in e;++t){let[r,n]=e[t];n=o(n),r&&(n=unescape(n),0===t&&(n=a(n))),s.push(n)}return s.join("")}(t),r)return s(c(r));if(r=n("filename","i").exec(t),r){r=r[1];let t=o(r);return t=c(t),s(t)}function n(t,e){return new RegExp("(?:^|;)\\s*"+t+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',e)}function i(t,r){if(t){if(!/^[\x00-\xFF]+$/.test(r))return r;try{const n=new TextDecoder(t,{fatal:!0}),i=Array.from(r,(function(t){return 255&t.charCodeAt(0)}));r=n.decode(new Uint8Array(i)),e=!1}catch(n){if(/^utf-?8$/i.test(t))try{r=decodeURIComponent(escape(r)),e=!1}catch(t){}}}return r}function s(t){return e&&/[\x80-\xff]/.test(t)&&(t=i("utf-8",t),e&&(t=i("iso-8859-1",t))),t}function o(t){if(t.startsWith('"')){const e=t.slice(1).split('\\"');for(let t=0;t<e.length;++t){const r=e[t].indexOf('"');-1!==r&&(e[t]=e[t].slice(0,r),e.length=t+1),e[t]=e[t].replace(/\\(.)/g,"$1")}t=e.join('"')}return t}function a(t){const e=t.indexOf("'");return-1===e?t:i(t.slice(0,e),t.slice(e+1).replace(/^[^']*'/,""))}function c(t){return!t.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(t)?t:t.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,(function(t,e,r,n){if("q"===r||"Q"===r)return i(e,n=(n=n.replace(/_/g," ")).replace(/=([0-9a-fA-F]{2})/g,(function(t,e){return String.fromCharCode(parseInt(e,16))})));try{n=atob(n)}catch(t){}return i(e,n)}))}return""}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PDFNetworkStream=void 0;var n=r(1),i=r(20);class s{constructor(t,e){this.url=t,e=e||{},this.isHttp=/^https?:/i.test(t),this.httpHeaders=this.isHttp&&e.httpHeaders||{},this.withCredentials=e.withCredentials||!1,this.getXhr=e.getXhr||function(){return new XMLHttpRequest},this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(t,e,r){const n={begin:t,end:e};for(const t in r)n[t]=r[t];return this.request(n)}requestFull(t){return this.request(t)}request(t){const e=this.getXhr(),r=this.currXhrId++,n=this.pendingRequests[r]={xhr:e};e.open("GET",this.url),e.withCredentials=this.withCredentials;for(const t in this.httpHeaders){const r=this.httpHeaders[t];void 0!==r&&e.setRequestHeader(t,r)}return this.isHttp&&"begin"in t&&"end"in t?(e.setRequestHeader("Range",`bytes=${t.begin}-${t.end-1}`),n.expectedStatus=206):n.expectedStatus=200,e.responseType="arraybuffer",t.onError&&(e.onerror=function(r){t.onError(e.status)}),e.onreadystatechange=this.onStateChange.bind(this,r),e.onprogress=this.onProgress.bind(this,r),n.onHeadersReceived=t.onHeadersReceived,n.onDone=t.onDone,n.onError=t.onError,n.onProgress=t.onProgress,e.send(null),r}onProgress(t,e){const r=this.pendingRequests[t];r&&r.onProgress&&r.onProgress(e)}onStateChange(t,e){const r=this.pendingRequests[t];if(!r)return;const i=r.xhr;if(i.readyState>=2&&r.onHeadersReceived&&(r.onHeadersReceived(),delete r.onHeadersReceived),4!==i.readyState)return;if(!(t in this.pendingRequests))return;if(delete this.pendingRequests[t],0===i.status&&this.isHttp)return void(r.onError&&r.onError(i.status));const s=i.status||200;if((200!==s||206!==r.expectedStatus)&&s!==r.expectedStatus)return void(r.onError&&r.onError(i.status));const o=function(t){const e=t.response;return"string"!=typeof e?e:(0,n.stringToBytes)(e).buffer}(i);if(206===s){const t=i.getResponseHeader("Content-Range"),e=/bytes (\d+)-(\d+)\/(\d+)/.exec(t);r.onDone({begin:parseInt(e[1],10),chunk:o})}else o?r.onDone({begin:0,chunk:o}):r.onError&&r.onError(i.status)}hasPendingRequests(){for(const t in this.pendingRequests)return!0;return!1}getRequestXhr(t){return this.pendingRequests[t].xhr}isPendingRequest(t){return t in this.pendingRequests}abortAllRequests(){for(const t in this.pendingRequests)this.abortRequest(0|t)}abortRequest(t){const e=this.pendingRequests[t].xhr;delete this.pendingRequests[t],e.abort()}}e.PDFNetworkStream=class{constructor(t){this._source=t,this._manager=new s(t.url,{httpHeaders:t.httpHeaders,withCredentials:t.withCredentials}),this._rangeChunkSize=t.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(t){const e=this._rangeRequestReaders.indexOf(t);e>=0&&this._rangeRequestReaders.splice(e,1)}getFullReader(){return(0,n.assert)(!this._fullRequestReader),this._fullRequestReader=new o(this._manager,this._source),this._fullRequestReader}getRangeReader(t,e){const r=new a(this._manager,t,e);return r.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(r),r}cancelAllRequests(t){this._fullRequestReader&&this._fullRequestReader.cancel(t),this._rangeRequestReaders.slice(0).forEach((function(e){e.cancel(t)}))}};class o{constructor(t,e){this._manager=t;const r={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=e.url,this._fullRequestId=t.requestFull(r),this._headersReceivedCapability=(0,n.createPromiseCapability)(),this._disableRange=e.disableRange||!1,this._contentLength=e.length,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const t=this._fullRequestId,e=this._manager.getRequestXhr(t),r=t=>e.getResponseHeader(t),{allowRangeRequests:n,suggestedLength:s}=(0,i.validateRangeRequestCapabilities)({getResponseHeader:r,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});n&&(this._isRangeSupported=!0),this._contentLength=s||this._contentLength,this._filename=(0,i.extractFilenameFromHeader)(r),this._isRangeSupported&&this._manager.abortRequest(t),this._headersReceivedCapability.resolve()}_onDone(t){t&&(this._requests.length>0?this._requests.shift().resolve({value:t.chunk,done:!1}):this._cachedChunks.push(t.chunk)),this._done=!0,this._cachedChunks.length>0||(this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[])}_onError(t){const e=this._url,r=(0,i.createResponseStatusError)(t,e);this._storedError=r,this._headersReceivedCapability.reject(r),this._requests.forEach((function(t){t.reject(r)})),this._requests=[],this._cachedChunks=[]}_onProgress(t){this.onProgress&&this.onProgress({loaded:t.loaded,total:t.lengthComputable?t.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const t=(0,n.createPromiseCapability)();return this._requests.push(t),t.promise}cancel(t){this._done=!0,this._headersReceivedCapability.reject(t),this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[],this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class a{constructor(t,e,r){this._manager=t;const n={onDone:this._onDone.bind(this),onProgress:this._onProgress.bind(this)};this._requestId=t.requestRange(e,r,n),this._requests=[],this._queuedChunk=null,this._done=!1,this.onProgress=null,this.onClosed=null}_close(){this.onClosed&&this.onClosed(this)}_onDone(t){const e=t.chunk;this._requests.length>0?this._requests.shift().resolve({value:e,done:!1}):this._queuedChunk=e,this._done=!0,this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[],this._close()}_onProgress(t){!this.isStreamingSupported&&this.onProgress&&this.onProgress({loaded:t.loaded})}get isStreamingSupported(){return!1}async read(){if(null!==this._queuedChunk){const t=this._queuedChunk;return this._queuedChunk=null,{value:t,done:!1}}if(this._done)return{value:void 0,done:!0};const t=(0,n.createPromiseCapability)();return this._requests.push(t),t.promise}cancel(t){this._done=!0,this._requests.forEach((function(t){t.resolve({value:void 0,done:!0})})),this._requests=[],this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PDFFetchStream=void 0;var n=r(1),i=r(20);function s(t,e,r){return{method:"GET",headers:t,signal:r&&r.signal,mode:"cors",credentials:e?"include":"same-origin",redirect:"follow"}}function o(t){const e=new Headers;for(const r in t){const n=t[r];void 0!==n&&e.append(r,n)}return e}e.PDFFetchStream=class{constructor(t){this.source=t,this.isHttp=/^https?:/i.test(t.url),this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?this._fullRequestReader._loaded:0}getFullReader(){return(0,n.assert)(!this._fullRequestReader),this._fullRequestReader=new a(this),this._fullRequestReader}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const r=new c(this,t,e);return this._rangeRequestReaders.push(r),r}cancelAllRequests(t){this._fullRequestReader&&this._fullRequestReader.cancel(t),this._rangeRequestReaders.slice(0).forEach((function(e){e.cancel(t)}))}};class a{constructor(t){this._stream=t,this._reader=null,this._loaded=0,this._filename=null;const e=t.source;this._withCredentials=e.withCredentials||!1,this._contentLength=e.length,this._headersCapability=(0,n.createPromiseCapability)(),this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),"undefined"!=typeof AbortController&&(this._abortController=new AbortController),this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._headers=o(this._stream.httpHeaders);const r=e.url;fetch(r,s(this._headers,this._withCredentials,this._abortController)).then(t=>{if(!(0,i.validateResponseStatus)(t.status))throw(0,i.createResponseStatusError)(t.status,r);this._reader=t.body.getReader(),this._headersCapability.resolve();const e=e=>t.headers.get(e),{allowRangeRequests:s,suggestedLength:o}=(0,i.validateRangeRequestCapabilities)({getResponseHeader:e,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=s,this._contentLength=o||this._contentLength,this._filename=(0,i.extractFilenameFromHeader)(e),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new n.AbortException("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._headersCapability.promise;const{value:t,done:e}=await this._reader.read();return e?{value:t,done:e}:(this._loaded+=t.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._reader&&this._reader.cancel(t),this._abortController&&this._abortController.abort()}}class c{constructor(t,e,r){this._stream=t,this._reader=null,this._loaded=0;const a=t.source;this._withCredentials=a.withCredentials||!1,this._readCapability=(0,n.createPromiseCapability)(),this._isStreamingSupported=!a.disableStream,"undefined"!=typeof AbortController&&(this._abortController=new AbortController),this._headers=o(this._stream.httpHeaders),this._headers.append("Range",`bytes=${e}-${r-1}`);const c=a.url;fetch(c,s(this._headers,this._withCredentials,this._abortController)).then(t=>{if(!(0,i.validateResponseStatus)(t.status))throw(0,i.createResponseStatusError)(t.status,c);this._readCapability.resolve(),this._reader=t.body.getReader()}),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._readCapability.promise;const{value:t,done:e}=await this._reader.read();return e?{value:t,done:e}:(this._loaded+=t.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._reader&&this._reader.cancel(t),this._abortController&&this._abortController.abort()}}}])},module.exports=factory()}).call(this,__webpack_require__(167),__webpack_require__(192).Buffer)},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(193),i=r(194),s=r(195);function o(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=c.prototype:(null===t&&(t=new c(e)),t.length=e),t}function c(t,e,r){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return l(this,t,e,r)}function l(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);c.TYPED_ARRAY_SUPPORT?(t=e).__proto__=c.prototype:t=d(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!c.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|f(e,r),i=(t=a(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(c.isBuffer(e)){var r=0|p(e.length);return 0===(t=a(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?a(t,0):d(t,e);if("Buffer"===e.type&&s(e.data))return d(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function u(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(u(e),t=a(t,e<0?0:0|p(e)),!c.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function d(t,e){var r=e.length<0?0:0|p(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function f(t,e){if(c.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return j(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(t).length;default:if(n)return j(t).length;e=(""+e).toLowerCase(),n=!0}}function g(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return k(this,e,r);case"utf8":case"utf-8":return C(this,e,r);case"ascii":return T(this,e,r);case"latin1":case"binary":return R(this,e,r);case"base64":return E(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function m(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function y(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=c.from(e,n)),c.isBuffer(e))return 0===e.length?-1:v(t,e,r,n,i);if("number"==typeof e)return e&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):v(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function v(t,e,r,n,i){var s,o=1,a=t.length,c=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;o=2,a/=2,c/=2,r/=2}function l(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var u=-1;for(s=r;s<a;s++)if(l(t,s)===l(e,-1===u?0:s-u)){if(-1===u&&(u=s),s-u+1===c)return u*o}else-1!==u&&(s-=s-u),u=-1}else for(r+c>a&&(r=a-c),s=r;s>=0;s--){for(var h=!0,d=0;d<c;d++)if(l(t,s+d)!==l(e,d)){h=!1;break}if(h)return s}return-1}function b(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var s=e.length;if(s%2!=0)throw new TypeError("Invalid hex string");n>s/2&&(n=s/2);for(var o=0;o<n;++o){var a=parseInt(e.substr(2*o,2),16);if(isNaN(a))return o;t[r+o]=a}return o}function A(t,e,r,n){return W(j(e,t.length-r),t,r,n)}function _(t,e,r,n){return W(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function w(t,e,r,n){return _(t,e,r,n)}function x(t,e,r,n){return W(q(e),t,r,n)}function S(t,e,r,n){return W(function(t,e){for(var r,n,i,s=[],o=0;o<t.length&&!((e-=2)<0);++o)r=t.charCodeAt(o),n=r>>8,i=r%256,s.push(i),s.push(n);return s}(e,t.length-r),t,r,n)}function E(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function C(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var s,o,a,c,l=t[i],u=null,h=l>239?4:l>223?3:l>191?2:1;if(i+h<=r)switch(h){case 1:l<128&&(u=l);break;case 2:128==(192&(s=t[i+1]))&&(c=(31&l)<<6|63&s)>127&&(u=c);break;case 3:s=t[i+1],o=t[i+2],128==(192&s)&&128==(192&o)&&(c=(15&l)<<12|(63&s)<<6|63&o)>2047&&(c<55296||c>57343)&&(u=c);break;case 4:s=t[i+1],o=t[i+2],a=t[i+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(c=(15&l)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&c<1114112&&(u=c)}null===u?(u=65533,h=1):u>65535&&(u-=65536,n.push(u>>>10&1023|55296),u=56320|1023&u),n.push(u),i+=h}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=4096));return r}(n)}e.Buffer=c,e.SlowBuffer=function(t){+t!=t&&(t=0);return c.alloc(+t)},e.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),c.poolSize=8192,c._augment=function(t){return t.__proto__=c.prototype,t},c.from=function(t,e,r){return l(null,t,e,r)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(t,e,r){return function(t,e,r,n){return u(e),e<=0?a(t,e):void 0!==r?"string"==typeof n?a(t,e).fill(r,n):a(t,e).fill(r):a(t,e)}(null,t,e,r)},c.allocUnsafe=function(t){return h(null,t)},c.allocUnsafeSlow=function(t){return h(null,t)},c.isBuffer=function(t){return!(null==t||!t._isBuffer)},c.compare=function(t,e){if(!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,s=Math.min(r,n);i<s;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!s(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=c.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var o=t[r];if(!c.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},c.byteLength=f,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)m(this,e,e+1);return this},c.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},c.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},c.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?C(this,0,t):g.apply(this,arguments)},c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},c.prototype.compare=function(t,e,r,n,i){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(n>>>=0),o=(r>>>=0)-(e>>>=0),a=Math.min(s,o),l=this.slice(n,i),u=t.slice(e,r),h=0;h<a;++h)if(l[h]!==u[h]){s=l[h],o=u[h];break}return s<o?-1:o<s?1:0},c.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},c.prototype.indexOf=function(t,e,r){return y(this,t,e,r,!0)},c.prototype.lastIndexOf=function(t,e,r){return y(this,t,e,r,!1)},c.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var s=!1;;)switch(n){case"hex":return b(this,t,e,r);case"utf8":case"utf-8":return A(this,t,e,r);case"ascii":return _(this,t,e,r);case"latin1":case"binary":return w(this,t,e,r);case"base64":return x(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function T(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function R(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function k(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",s=e;s<r;++s)i+=U(t[s]);return i}function P(t,e,r){for(var n=t.slice(e,r),i="",s=0;s<n.length;s+=2)i+=String.fromCharCode(n[s]+256*n[s+1]);return i}function L(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,r,n,i,s){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<s)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function O(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,s=Math.min(t.length-r,2);i<s;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function F(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,s=Math.min(t.length-r,4);i<s;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function M(t,e,r,n,i,s){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function N(t,e,r,n,s){return s||M(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function D(t,e,r,n,s){return s||M(t,0,r,8),i.write(t,e,r,n,52,8),r+8}c.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),c.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=c.prototype;else{var i=e-t;r=new c(i,void 0);for(var s=0;s<i;++s)r[s]=this[s+t]}return r},c.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||L(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n},c.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||L(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},c.prototype.readUInt8=function(t,e){return e||L(t,1,this.length),this[t]},c.prototype.readUInt16LE=function(t,e){return e||L(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUInt16BE=function(t,e){return e||L(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUInt32LE=function(t,e){return e||L(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUInt32BE=function(t,e){return e||L(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||L(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},c.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||L(t,e,this.length);for(var n=e,i=1,s=this[t+--n];n>0&&(i*=256);)s+=this[t+--n]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*e)),s},c.prototype.readInt8=function(t,e){return e||L(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){e||L(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(t,e){e||L(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(t,e){return e||L(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return e||L(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readFloatLE=function(t,e){return e||L(t,4,this.length),i.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return e||L(t,4,this.length),i.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return e||L(t,8,this.length),i.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return e||L(t,8,this.length),i.read(this,t,!1,52,8)},c.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||I(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,s=0;for(this[e]=255&t;++s<r&&(i*=256);)this[e+s]=t/i&255;return e+r},c.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||I(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,s=1;for(this[e+i]=255&t;--i>=0&&(s*=256);)this[e+i]=t/s&255;return e+r},c.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,1,255,0),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},c.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):O(this,t,e,!0),e+2},c.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):O(this,t,e,!1),e+2},c.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):F(this,t,e,!0),e+4},c.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):F(this,t,e,!1),e+4},c.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);I(this,t,e,r,i-1,-i)}var s=0,o=1,a=0;for(this[e]=255&t;++s<r&&(o*=256);)t<0&&0===a&&0!==this[e+s-1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},c.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);I(this,t,e,r,i-1,-i)}var s=r-1,o=1,a=0;for(this[e+s]=255&t;--s>=0&&(o*=256);)t<0&&0===a&&0!==this[e+s+1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},c.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,1,127,-128),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},c.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):O(this,t,e,!0),e+2},c.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):O(this,t,e,!1),e+2},c.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):F(this,t,e,!0),e+4},c.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):F(this,t,e,!1),e+4},c.prototype.writeFloatLE=function(t,e,r){return N(this,t,e,!0,r)},c.prototype.writeFloatBE=function(t,e,r){return N(this,t,e,!1,r)},c.prototype.writeDoubleLE=function(t,e,r){return D(this,t,e,!0,r)},c.prototype.writeDoubleBE=function(t,e,r){return D(this,t,e,!1,r)},c.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,s=n-r;if(this===t&&r<e&&e<n)for(i=s-1;i>=0;--i)t[i+e]=this[i+r];else if(s<1e3||!c.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+s),e);return s},c.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var s;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(s=e;s<r;++s)this[s]=t;else{var o=c.isBuffer(t)?t:j(new c(t,n).toString()),a=o.length;for(s=0;s<r-e;++s)this[s+e]=o[s%a]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function U(t){return t<16?"0"+t.toString(16):t.toString(16)}function j(t,e){var r;e=e||1/0;for(var n=t.length,i=null,s=[],o=0;o<n;++o){if((r=t.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&s.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&s.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&s.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;s.push(r)}else if(r<2048){if((e-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function q(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function W(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(120))},function(t,e,r){"use strict";e.byteLength=function(t){var e=l(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=l(t),o=n[0],a=n[1],c=new s(function(t,e,r){return 3*(e+r)/4-r}(0,o,a)),u=0,h=a>0?o-4:o;for(r=0;r<h;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],c[u++]=e>>16&255,c[u++]=e>>8&255,c[u++]=255&e;2===a&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,c[u++]=255&e);1===a&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,c[u++]=e>>8&255,c[u++]=255&e);return c},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,s=[],o=0,a=r-i;o<a;o+=16383)s.push(u(t,o,o+16383>a?a:o+16383));1===i?(e=t[r-1],s.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],s.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return s.join("")};for(var n=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,c=o.length;a<c;++a)n[a]=o[a],i[o.charCodeAt(a)]=a;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function u(t,e,r){for(var i,s,o=[],a=e;a<r;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(n[(s=i)>>18&63]+n[s>>12&63]+n[s>>6&63]+n[63&s]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,i){var s,o,a=8*i-n-1,c=(1<<a)-1,l=c>>1,u=-7,h=r?i-1:0,d=r?-1:1,p=t[e+h];for(h+=d,s=p&(1<<-u)-1,p>>=-u,u+=a;u>0;s=256*s+t[e+h],h+=d,u-=8);for(o=s&(1<<-u)-1,s>>=-u,u+=n;u>0;o=256*o+t[e+h],h+=d,u-=8);if(0===s)s=1-l;else{if(s===c)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,n),s-=l}return(p?-1:1)*o*Math.pow(2,s-n)},e.write=function(t,e,r,n,i,s){var o,a,c,l=8*s-i-1,u=(1<<l)-1,h=u>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:s-1,f=n?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=u):(o=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-o))<1&&(o--,c*=2),(e+=o+h>=1?d/c:d*Math.pow(2,1-h))*c>=2&&(o++,c/=2),o+h>=u?(a=0,o=u):o+h>=1?(a=(e*c-1)*Math.pow(2,i),o+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,i),o=0));i>=8;t[r+p]=255&a,p+=f,a/=256,i-=8);for(o=o<<i|a,l+=i;l>0;t[r+p]=255&o,p+=f,o/=256,l-=8);t[r+p-f]|=128*g}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},,,,,,,,,,,function(t,e,r){"use strict";r.r(e),r.d(e,"pdfToCanvas",(function(){return T})),r.d(e,"clearUserSubscriptions",(function(){return R})),r.d(e,"clearDropdown",(function(){return k})),r.d(e,"newSubscriptionSuccess",(function(){return P})),r.d(e,"displayUnsubscribeAlert",(function(){return M})),r.d(e,"checkEmptySubscriptions",(function(){return D})),r.d(e,"populateTemplateDropdown",(function(){return B})),r.d(e,"addSubscriptionToTable",(function(){return U})),r.d(e,"checkPreviousAllowance99",(function(){return j})),r.d(e,"populateSubscriptionTable",(function(){return q})),r.d(e,"updateTable",(function(){return G})),r.d(e,"addDownloadFromPreview",(function(){return X}));r(181),r(183),r(184),r(170),r(87),r(185),r(33),r(186),r(187),r(188),r(53),r(189),r(93),r(155),r(190),r(62),r(159),r(91),r(124),r(129),r(95),r(166),r(96),r(97),r(98),r(99),r(100),r(101),r(102),r(103),r(104),r(105),r(106),r(107),r(108),r(109),r(110),r(111),r(112),r(113),r(114),r(115),r(116),r(117),r(118),r(119);var n=r(10);function i(t,e,r,n,i,s,o){try{var a=t[s](o),c=a.value}catch(t){return void r(t)}a.done?e(c):Promise.resolve(c).then(n,i)}function s(t){return function(){var e=this,r=arguments;return new Promise((function(n,s){var o=t.apply(e,r);function a(t){i(o,n,s,a,c,"next",t)}function c(t){i(o,n,s,a,c,"throw",t)}a(void 0)}))}}function o(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=document.getElementById("previewTemplateLabel"),i=document.getElementById("canvasSpinnerContainer");r.innerText="Loading ",n.s(i,"-lg"),n.s(r),$("#previewTemplateModal").modal({keyboard:!0,focus:!0}),(t?fetch("/preview_template?templateId=".concat(t),{method:"GET",credentials:"same-origin",cache:"no-store"}):fetch("/preview_subscription?tok=".concat(e),{method:"GET",credentials:"same-origin",cache:"no-store"})).then((function(t){if(200==t.status)return t.json();throw new Error("Error retrieving file")})).then((function(i){if(!i.success)throw new Error("Error retrieving file");return n.r(r),r.innerText=i.filename,X(r,t,e,i.post,i.country),T(new Uint8Array(i.file.data))})).then((function(){document.getElementById("previewCanvas").classList.add("light-border")})).catch((function(t){console.log(t),r.innerText=t})).finally((function(){n.r(i,"-lg"),i.innerText=""}))}function a(t){var e=document.getElementById("downloadTemplateSpan");return e.classList.remove("downloadError","downloadSuccess"),n.s(e," md",!0),fetch("/download_template?templateId=".concat(t),{method:"GET",credentials:"same-origin",cache:"no-store"}).then((function(t){if(200==t.status)return t.json();throw new Error("Error retrieving file")})).then((function(t){if(!t.success)throw new Error("Error retrieving file");n.g(t),e.classList.add("downloadSuccess")})).catch((function(t){throw console.log(t),e.classList.add("downloadError"),new Error("Error retrieving file")})).finally((function(){n.r(e," md")}))}function c(){return l.apply(this,arguments)}function l(){return(l=s(regeneratorRuntime.mark((function t(){var e,r,i,s,o,a;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=document.getElementById("uploadTemplate"),r=document.getElementById("templateSelect"),i=document.getElementById("postSelect"),s=i[i.selectedIndex].getAttribute("data-COLARatesId"),n.s(document.getElementById("subscriptionsContainerSpinner")),document.getElementById("tableSpinner").display="inline-block",t.prev=6,!e.value){t.next=14;break}return o=!0,t.next=11,d(s,e);case 11:a=t.sent,t.next=19;break;case 14:if(0==r.selectedIndex){t.next=19;break}return!0,t.next=18,u(s,r);case 18:a=t.sent;case 19:if(!a.success){t.next=28;break}i.selectedIndex=0,r.selectedIndex=0,e.value="",P(s),f(),U(a),t.next=33;break;case 28:if(!a.error){t.next=32;break}throw new Error(a.error);case 32:throw a;case 33:t.next=40;break;case 35:t.prev=35,t.t0=t.catch(6),console.log(t.t0),n.n(document.getElementsByClassName("alert")),a.success?document.getElementById("errorContainer").style.display="block":(document.getElementById("warningContainer").style.display="block",o?(document.getElementById("uploadTemplateErrorMsg").innerText=a.errorMessage,document.getElementById("uploadTemplateErrorMsg").style.display="block"):(document.getElementById("previousTemplateErrorMsg").innerText=a.errorMessage,document.getElementById("previousTemplateErrorMsg").style.display="block"));case 40:return t.prev=40,document.getElementById("tableSpinner").display="none",n.r(document.getElementById("subscriptionsContainerSpinner")),D(),t.finish(40);case 45:case"end":return t.stop()}}),t,null,[[6,35,40,45]])})))).apply(this,arguments)}function u(t,e){return h.apply(this,arguments)}function h(){return(h=s(regeneratorRuntime.mark((function t(e,r){var n,i;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,n={postId:e,templateId:r[r.selectedIndex].getAttribute("data-templateId")},t.next=4,fetch("/add_new_subscription_with_prev_template",{method:"POST",headers:{"Content-Type":"application/JSON"},credentials:"same-origin",cache:"no-store",body:JSON.stringify(n)});case 4:return i=t.sent,t.next=7,i.json();case 7:return t.abrupt("return",t.sent);case 10:return t.prev=10,t.t0=t.catch(0),console.log(t.t0),t.abrupt("return",t.t0);case 14:case"end":return t.stop()}}),t,null,[[0,10]])})))).apply(this,arguments)}function d(t,e){return p.apply(this,arguments)}function p(){return(p=s(regeneratorRuntime.mark((function t(e,r){var n,i;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(window.File&&window.FileReader&&window.FileList&&window.Blob){t.next=4;break}return console.log("File API not supported by broser"),$("addSubscriptionMessageDiv").innerText="Incompatible browser",t.abrupt("return");case 4:return t.prev=4,(n=new FormData).append("upload",r.files[0]),n.append("postId",e),t.next=10,fetch("/add_new_subscription_with_template_file",{method:"POST",credentials:"same-origin",cache:"no-store",body:n});case 10:return i=t.sent,t.next=13,i.json();case 13:return t.abrupt("return",t.sent);case 16:return t.prev=16,t.t0=t.catch(4),console.log(t.t0),t.abrupt("return",t.t0);case 20:case"end":return t.stop()}}),t,null,[[4,16]])})))).apply(this,arguments)}function f(){return g.apply(this,arguments)}function g(){return(g=s(regeneratorRuntime.mark((function t(){var e,r,n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,k(e=document.getElementById("templateSelect")),e.innerHTML='<option>Loading...<i class="fa fa-spinner spinner"></i></option>',t.next=6,fetch("/get_user_template_list",{method:"GET",cache:"no-store",credentials:"same-origin"});case 6:return r=t.sent,t.next=9,r.json();case 9:n=t.sent,k(e),B(e,n.templates),t.next=18;break;case 14:t.prev=14,t.t0=t.catch(0),console.log(t.t0),e.innerHTML="<option>Error retrieving templates</option>";case 18:return t.prev=18,t.finish(18);case 20:case"end":return t.stop()}}),t,null,[[0,14,18,20]])})))).apply(this,arguments)}function m(){return y.apply(this,arguments)}function y(){return(y=s(regeneratorRuntime.mark((function t(){var e,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,R(),t.next=4,fetch("/get_user_subscription_list",{method:"GET",cache:"no-store",credentials:"same-origin"});case 4:return e=t.sent,t.next=7,e.json();case 7:r=t.sent,n.r(document.getElementById("subscriptionsContainerSpinner")),q(r),D(),t.next=16;break;case 13:t.prev=13,t.t0=t.catch(0),console.log(t.t0);case 16:case"end":return t.stop()}}),t,null,[[0,13]])})))).apply(this,arguments)}function v(t,e,r,n,i){return b.apply(this,arguments)}function b(){return(b=s(regeneratorRuntime.mark((function t(e,r,i,s,o){var a,c,l,u;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,{},a=document.getElementById("tableSpinner"),c=document.getElementById("tableCover"),e&&(e.parentNode.disabled=!0,n.b(e,"trashCan","trashCanSecondary")),c.style.display="block",a.style.display="inline-block",t.next=9,fetch("/delete_subscription?tok=".concat(r),{method:"GET",cache:"no-store",credentials:"same-origin"});case 9:return l=t.sent,t.next=12,l.json();case 12:if(u=t.sent,n.n(document.getElementsByClassName("unsubscribeAlert")),!u.deleted){t.next=19;break}M(document.getElementById("unsubscribeAlertSuccess"),u.post,u.country,u.tok,o),G(o,!0),t.next=25;break;case 19:if(!u.restored){t.next=24;break}M(document.getElementById("resubscribeAlertSuccess"),u.post,u.country),G(o,!1),t.next=25;break;case 24:throw new Error("Error updating ".concat(u.country," (").concat(u.post,")"));case 25:t.next=31;break;case 27:t.prev=27,t.t0=t.catch(0),t.t0&&console.log(t.t0),M(document.getElementById("unsubscribeAlertError"),i,s);case 31:return t.prev=31,e&&(e.parentNode.disabled=!1,n.b(e,"trashCanSecondary","trashCan")),c.style.display="block",a.style.display="none",D(),j(),t.finish(31);case 38:case"end":return t.stop()}}),t,null,[[0,27,31,38]])})))).apply(this,arguments)}function A(t,e,r,i){var s=document.getElementById("tableSpinner");return s.style.display="inline-block",t.parentNode.disabled=!0,n.b(t,"downloadSubscription","downloadSubscriptionSecondary"),fetch("/download_subscription?tok=".concat(e),{method:"GET",credentials:"same-origin"}).then((function(t){if(200==t.status)return t.json();throw new Error("Error retrieving file")})).then((function(e){if(!e.success)throw new Error("Error retrieving file");n.g(e),n.b(t,"downloadSubscriptionSecondary","downloadSubscriptionSuccess","downloadSubscription",3e3)})).catch((function(e){console.log(e),n.n(document.getElementsByClassName("unsubscribeAlert")),document.getElementById("downloadSubscriptionAlertError").style.display="block",document.getElementById("downloadSubscriptionErrorMsgSpan").innerText="".concat(i," (").concat(r,")"),n.b(t,"downloadSubscriptionSecondary","downloadSubscriptionError","downloadSubscription",8e3)})).finally((function(){t.parentNode.disabled=!1,s.style.display="none"}))}function _(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var r=[],n=!0,i=!1,s=void 0;try{for(var o,a=t[Symbol.iterator]();!(n=(o=a.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,s=t}finally{try{n||null==a.return||a.return()}finally{if(i)throw s}}return r}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return w(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return w(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function w(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function x(t,e,r,n,i,s,o){try{var a=t[s](o),c=a.value}catch(t){return void r(t)}a.done?e(c):Promise.resolve(c).then(n,i)}function S(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var s=t.apply(e,r);function o(t){x(s,n,i,o,a,"next",t)}function a(t){x(s,n,i,o,a,"throw",t)}o(void 0)}))}}var E=r(191);E.GlobalWorkerOptions.workerSrc="./js/pdf.worker.min.js";function C(){var t=document.getElementById("subscriptionsTable"),e=document.getElementsByClassName("sortIcon");Object.values(e).forEach((function(e,r){e.addEventListener("click",(function(){H(t,e,r)}))}))}function T(t){return new Promise((function(e,r){E.getDocument(t).promise.then((function(t){t.getPage(1).then((function(t){var r=t.getViewport({scale:1}),n=document.getElementById("previewCanvas"),i=n.getContext("2d");n.height=r.height,n.width=r.width;var s={canvasContext:i,viewport:r};t.render(s),e()})).catch((function(t){console.log(t),r("Error generating preview")}))}))}))}function R(){for(var t=document.getElementById("subscriptionTbody");t.firstChild;)t.removeChild(t.firstChild);document.getElementById("subscriptionsTable").style.display="none",document.getElementById("noActiveSubscriptions").style.display="none"}function k(t){for(;t.firstChild;)t.removeChild(t.firstChild)}function P(t){n.n(document.getElementsByClassName("alert")),n.n([document.getElementById("subscriptionFormContainer")]),document.getElementById("successContainer").style.display="block";for(var e=0,r=Object.entries($("#postSelect option"));e<r.length;e++){var i=_(r[e],2),s=(i[0],i[1]);if(s.getAttribute("data-COLARatesId")==t)return void(document.getElementById("successSpan").innerText=s.innerText)}}function L(){var t=document.getElementsByClassName("templateVal"),e=document.getElementById("uploadTemplate"),r=document.getElementById("templateSelect"),i=/(\.doc|\.docx)$/i;e.value&&!i.exec(e.value)?(n.p(t,["val","invalBlank"]),n.a(t,["invalid"]),e.classList.add("usa-input--error"),O()):0===r.selectedIndex||i.exec(r[r.selectedIndex].value)||(n.p(t,["val","invalBlank"]),n.a(t,["invalid"]),r.classList.add("usa-input--error"),O())}function I(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=document.getElementById("templateSelect");return document.getElementById("previousTemplateErrorMsgDownload").style.display="none",document.getElementById("previousTemplateErrorMsgPreview").style.display="none",document.getElementById("downloadTemplateSpan").classList.remove("downloadSuccess","downloadError"),0===e.selectedIndex?(e.classList.add("usa-input--error"),t?document.getElementById("previousTemplateErrorMsgDownload").style.display="block":document.getElementById("previousTemplateErrorMsgPreview").style.display="block",!1):(e.classList.remove("usa-input--error"),!0)}function O(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=document.getElementsByClassName("postVal"),r=document.getElementById("postSelect");if(0===r.selectedIndex){n.p(e,["val"]),n.a(e,["invalBlank"]);var i=!1;t&&r.classList.add("usa-input--error")}else{n.p(e,["invalBlank"]),n.a(e,["val"]),r.classList.remove("usa-input--error");i=!0}return i}function F(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=!1,r=document.getElementsByClassName("templateVal"),i=document.getElementById("uploadTemplate"),s=document.getElementById("templateSelect"),o=/(\.doc|\.docx)$/i;return e=O(t),i.value||0!==s.selectedIndex?o.exec(i.value)||o.exec(s[s.selectedIndex].value)?(n.p(r,["invalBlank","invalid"]),n.a(r,["val"]),i.classList.remove("usa-input--error"),s.classList.remove("usa-input--error"),e=e&&!0,document.getElementById("uploadTemplateErrorMsg").style.display="none",document.getElementById("previousTemplateErrorMsg").style.display="none",document.getElementById("previousTemplateErrorMsgPreview").style.display="none",document.getElementById("previousTemplateErrorMsgDownload").style.display="none"):(n.p(r,["val","invalBlank"]),n.a(r,["invalid"]),t&&(document.getElementById("infoContainer").style.display="none",document.getElementById("warningContainer").style.display="block"),i.value?i.classList.add("usa-input--error"):s.value&&s.classList.add("usa-input--error"),e=!1):(n.p(r,["val","invalid"]),n.a(r,["invalBlank"]),t&&(i.classList.add("usa-input--error"),s.classList.add("usa-input--error")),e=!1),e}function M(t,e,r,n,i){t.getElementsByClassName("unsubscribeMsgSpan")[0].innerText="".concat(r," (").concat(e,")"),t.style.display="block",$("#undoLink")[0].setAttribute("data-tok",n),$("#undoLink")[0].setAttribute("data-post",e),$("#undoLink")[0].setAttribute("data-country",r),$("#undoLink")[0].setAttribute("data-subscriptionId",i),$("#undoLink")[0].removeEventListener("click",N),$("#undoLink")[0].addEventListener("click",N)}function N(t){t.preventDefault();var e=document.getElementById("undoLink");v(null,e.getAttribute("data-tok"),e.getAttribute("data-post"),e.getAttribute("data-country"),e.getAttribute("data-subscriptionId"))}function D(){var t=document.getElementById("subscriptionsTable"),e=document.getElementById("subscriptionTbody"),r=document.getElementById("noActiveSubscriptions"),n=!1;e.childNodes.forEach((function(t){"none"!==t.style.display&&(n=!0)})),n?(t.style.display="table",r.style.display="none"):(t.style.display="none",r.style.display="block")}function B(t,e){var r=document.createElement("option");t.appendChild(r),e.forEach((function(e){(r=document.createElement("option")).setAttribute("data-templateId",e.id),r.innerText=e.name,t.appendChild(r)}))}function U(t){document.getElementById("subscriptionTbody").getElementsByClassName("subscriptionRow");q({subscriptionList:[t]}),H(document.getElementById("subscriptionsTable"))}function j(){for(var t=document.getElementsByClassName("prevAllowance"),e=0;e<t.length;e++)if(t[e].innerText.match("n/a")&&"none"!==t[e].parentElement.style.display)return void(document.getElementById("prevAllowanceWarning").style.display="flow");document.getElementById("prevAllowanceWarning").style.display="none"}function q(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=document.getElementById("subscriptionTbody");t.subscriptionList.forEach((function(t){var n=document.createElement("tr");n.setAttribute("data-subscriptionId",t.subscriptionId),n.setAttribute("class","subscriptionRow"),W(n,t);var i=document.createElement("td");i.setAttribute("class","td countryName tdCell"),i.setAttribute("data-value",t.country),i.innerText=t.country,n.appendChild(i);var s=document.createElement("td");s.setAttribute("class","td postName tdCell"),s.setAttribute("data-value",t.post),s.innerText=t.post,n.appendChild(s);var o=document.createElement("td");if(o.setAttribute("class","td prevAllowance tdCell"),o.setAttribute("data-value",t.prevAllowance),o.innerText=t.prevAllowance+"%",n.appendChild(o),-99===t.prevAllowance){o.innerText="n/a";var a=document.createElement("sup");a.innerText="*",o.appendChild(a)}var c=document.createElement("td");c.setAttribute("class","td tdCell"),c.setAttribute("data-value",t.allowance),c.innerText=t.allowance+"%",n.appendChild(c);var l=document.createElement("td");l.setAttribute("class","td tdCell"),l.setAttribute("data-value",Date.parse(new Date(t.effectiveDate))),l.innerText=t.effectiveDate,n.appendChild(l),null===e?r.appendChild(n):r.insertBefore(n,r.childNodes[e-1])})),j()}function W(t,e){var r=document.createElement("td"),i=document.createElement("tr"),s=document.createElement("tr"),a=document.createElement("td"),c=document.createElement("td"),l=document.createElement("td"),u=document.createElement("td");r.setAttribute("class","td tdButtons");var h=document.createElement("button");h.setAttribute("class","btn-clear"),h.setAttribute("data-subscriptionId",e.subscriptionId),h.setAttribute("title","Preview ".concat(e.country," (").concat(e.post,") document")),h.addEventListener("click",(function(t){t.preventDefault(),o(null,e.tok)}));var d=document.createElement("i");d.setAttribute("class","preview"),h.appendChild(d),a.appendChild(h);var p=document.createElement("button");p.setAttribute("class","btn-clear"),p.setAttribute("data-subscriptionId",e.subscriptionId),p.setAttribute("title","Download ".concat(e.country," (").concat(e.post,") document"));var f=document.createElement("i");f.setAttribute("class","downloadSubscription"),p.appendChild(f),p.addEventListener("click",(function(t){t.preventDefault(),A(f,e.tok,e.post,e.country)})),c.appendChild(p);var g=document.createElement("button");g.setAttribute("class","btn-clear"),g.setAttribute("data-subscriptionId",e.subscriptionId),g.setAttribute("title","Delete ".concat(e.country," (").concat(e.post,") subscription"));var m=document.createElement("i");m.setAttribute("class","trashCan"),g.appendChild(m),g.addEventListener("click",(function(t){t.preventDefault(),v(m,e.tok,e.post,e.country,e.subscriptionId)})),l.appendChild(g);var y=document.createElement("button");y.setAttribute("class","btn-clear"),y.setAttribute("data-subscriptionId",e.subscriptionId),y.setAttribute("title","Send email for this subscription: ".concat(e.country," (").concat(e.post,") now"));var b=document.createElement("i");b.setAttribute("class","email"),y.appendChild(b),y.addEventListener("click",(function(t){var r,i,s,o,a;t.preventDefault(),r=b,i=e.tok,s=e.post,o=e.country,(a=document.getElementById("tableSpinner")).style.display="inline-block",r.parentNode.disabled=!0,n.b(r,"email","emailSecondary"),fetch("/fire_subscription_email?tok=".concat(i),{method:"GET",credentials:"same-origin",cache:"no-store"}).then((function(t){if(200==t.status)return t.json();throw new Error("Error retrieving file")})).then((function(t){if(!t.success)throw new Error("Error retrieving file");n.b(r,"emailSecondary","emailSuccess","email",3e3)})).catch((function(t){console.log(t),n.n(document.getElementsByClassName("unsubscribeAlert")),document.getElementById("fireSubscriptionEmailAlertError").style.display="block",document.getElementById("fireSubscriptionEmailErrorMsgSpan").innerText="".concat(o," (").concat(s,")"),document.getElementById("fireSubscriptionEmailErrorToSpan").innerText=document.getElementById("userEmail").value,n.b(r,"emailSecondary","emailError","email",8e3)})).finally((function(){r.parentNode.disabled=!1,a.style.display="none"}))})),u.appendChild(y),r.appendChild(i),i.appendChild(a),i.appendChild(c),r.appendChild(s),s.appendChild(l),s.appendChild(u),t.appendChild(r)}function G(t,e){for(var r=document.getElementById("subscriptionTbody").getElementsByTagName("tr"),n=0;n<r.length;n++)r[n].getAttribute("data-subscriptionId")==t&&(r[n].style.display=e?"none":"table-row")}function H(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;null!==r&&(V=r);var i=t.getElementsByClassName("subscriptionRow"),s=Y(i,V);null!==r&&null!==e&&e.classList.contains("sortedDown")?(n.o(s,!0),n.q(t.getElementsByClassName("thead")[0].getElementsByClassName("sortIcon")),e.classList.remove("sort"),e.classList.add("sortedUp"),K=!0):null!==r&&null!==e&&e.classList.contains("sortedUp")?(n.o(s,!1),n.q(t.getElementsByClassName("thead")[0].getElementsByClassName("sortIcon")),e.classList.remove("sort"),e.classList.add("sortedDown"),K=!1):null!==r&&null!==e?(n.o(s,!0),n.q(t.getElementsByClassName("thead")[0].getElementsByClassName("sortIcon")),e.classList.remove("sort"),e.classList.add("sortedUp"),K=!1):n.o(s,K),n.f(t),n.k(t,s)}function Y(t,e){for(var r,n=[],i=0;i<t.length;i++)r=t[i].getElementsByClassName("tdCell")[e].getAttribute("data-value"),n.push({element:t[i],value:parseInt(r)?parseInt(r):r.toLowerCase()});return n}function z(){return(z=S(regeneratorRuntime.mark((function t(e,r,n,i,s){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e.classList.remove("downloadSubscriptionLg","downloadSubscriptionErrorLg","downloadSubscriptionSuccessLg"),e.classList.add("fa","fa-spinner","fa-spin"),t.prev=2,null===r){t.next=8;break}return t.next=6,a(r);case 6:t.next=9;break;case 8:A(e,n,i,s);case 9:e.classList.add("downloadSubscriptionSuccessLg"),t.next=16;break;case 12:t.prev=12,t.t0=t.catch(2),console.log(t.t0),e.classList.add("downloadSubscriptionErrorLg");case 16:return t.prev=16,e.classList.remove("fa","fa-spinner","fa-spin"),setTimeout((function(){e.classList.remove("downloadSubscriptionSuccessLg","downloadSubscriptionErrorLg"),e.classList.add("downloadSubscriptionLg")}),5e3),t.finish(16);case 20:case"end":return t.stop()}}),t,null,[[2,12,16,20]])})))).apply(this,arguments)}function X(t,e,r,n,i){var s=document.createElement("i");s.setAttribute("id","downloadFromPreview"),s.setAttribute("class","mr-3 downloadSubscriptionLg"),console.log(e),console.log(r),s.addEventListener("click",(function(){!function(t,e,r,n,i){z.apply(this,arguments)}(s,e,r,n,i)})),t.insertBefore(s,t.childNodes[0])}document.addEventListener("DOMContentLoaded",S(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,m();case 2:t.sent,L(),document.getElementById("subscribeAdditional").addEventListener("click",(function(){n.n($(".alert")),document.getElementById("infoContainer").style.display="block",document.getElementById("subscriptionFormContainer").style.display="block"})),document.getElementById("previewPrevTemplate").addEventListener("click",(function(t){t.preventDefault();var e=document.getElementById("templateSelect"),r=e[e.selectedIndex].getAttribute("data-templateId");I()&&o(r)})),document.getElementById("downloadPrevTemplate").addEventListener("click",function(){var t=S(regeneratorRuntime.mark((function t(e){var r,n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e.preventDefault(),r=document.getElementById("templateSelect"),n=r[r.selectedIndex].getAttribute("data-templateId"),!I(!0)){t.next=8;break}return this.disabled=!0,t.next=7,a(n);case 7:this.disabled=!1;case 8:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}()),$("#previewTemplateModal").on("hidden.bs.modal",(function(){n.c(document.getElementById("previewCanvas")),document.getElementById("previewTemplateLabel").innerText=""})),document.getElementById("templateSelect").addEventListener("change",(function(){document.getElementById("uploadTemplate").value="",F(!1)})),document.getElementById("uploadTemplate").addEventListener("input",(function(){document.getElementById("templateSelect").selectedIndex=0,F(!1)})),document.getElementById("postSelect").addEventListener("change",(function(){F(!1)})),document.getElementById("submitNewSubscription").addEventListener("click",function(){var t=S(regeneratorRuntime.mark((function t(e){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e.preventDefault(),document.getElementById("submitNewSubscription").disabled=!0,n.s(document.getElementById("addNewSubscriptionButtons")),!F(!0)){t.next=6;break}return t.next=6,c();case 6:document.getElementById("submitNewSubscription").disabled=!1,n.r(document.getElementById("addNewSubscriptionButtons"));case 8:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),e=void 0,e=document.getElementsByClassName("unsubscribeAlert"),Object.values(e).forEach((function(t,e){t.getElementsByClassName("dismiss-alert")[0].addEventListener("click",(function(){t.style.display="none",document.getElementById("unsubscribeAlertBlank").style.display="block"}))})),C();case 14:case"end":return t.stop()}var e}),t)}))));var V=0,K=!0}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,