!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/js/",r(r.s=172)}([function(t,e,r){"use strict";var n,o=r(74),i=r(7),a=r(1),u=r(8),s=r(5),c=r(27),f=r(9),l=r(15),h=r(11).f,p=r(37),d=r(29),y=r(3),v=r(42),g=a.Int8Array,m=g&&g.prototype,w=a.Uint8ClampedArray,b=w&&w.prototype,x=g&&p(g),E=m&&p(m),A=Object.prototype,T=A.isPrototypeOf,S=y("toStringTag"),L=v("TYPED_ARRAY_TAG"),R=o&&!!d&&"Opera"!==c(a.opera),P=!1,O={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},I=function(t){return u(t)&&s(O,c(t))};for(n in O)a[n]||(R=!1);if((!R||"function"!=typeof x||x===Function.prototype)&&(x=function(){throw TypeError("Incorrect invocation")},R))for(n in O)a[n]&&d(a[n],x);if((!R||!E||E===A)&&(E=x.prototype,R))for(n in O)a[n]&&d(a[n].prototype,E);if(R&&p(b)!==E&&d(b,E),i&&!s(E,S))for(n in P=!0,h(E,S,{get:function(){return u(this)?this[L]:void 0}}),O)a[n]&&f(a[n],L,n);t.exports={NATIVE_ARRAY_BUFFER_VIEWS:R,TYPED_ARRAY_TAG:P&&L,aTypedArray:function(t){if(I(t))return t;throw TypeError("Target is not a typed array")},aTypedArrayConstructor:function(t){if(d){if(T.call(x,t))return t}else for(var e in O)if(s(O,n)){var r=a[e];if(r&&(t===r||T.call(r,t)))return t}throw TypeError("Target is not a typed array constructor")},exportTypedArrayMethod:function(t,e,r){if(i){if(r)for(var n in O){var o=a[n];o&&s(o.prototype,t)&&delete o.prototype[t]}E[t]&&!r||l(E,t,r?e:R&&m[t]||e)}},exportTypedArrayStaticMethod:function(t,e,r){var n,o;if(i){if(d){if(r)for(n in O)(o=a[n])&&s(o,t)&&delete o[t];if(x[t]&&!r)return;try{return l(x,t,r?e:R&&g[t]||e)}catch(t){}}for(n in O)!(o=a[n])||o[t]&&!r||l(o,t,e)}},isView:function(t){var e=c(t);return"DataView"===e||s(O,e)},isTypedArray:I,TypedArray:x,TypedArrayPrototype:E}},function(t,e,r){(function(e){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e&&e)||Function("return this")()}).call(this,r(120))},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){var n=r(1),o=r(58),i=r(5),a=r(42),u=r(61),s=r(123),c=o("wks"),f=n.Symbol,l=s?f:f&&f.withoutSetter||a;t.exports=function(t){return i(c,t)||(u&&i(f,t)?c[t]=f[t]:c[t]=l("Symbol."+t)),c[t]}},function(t,e,r){var n=r(16),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(8);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,r){var n=r(2);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(7),o=r(11),i=r(18);t.exports=n?function(t,e,r){return o.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){"use strict";r.d(e,"b",(function(){return n})),r.d(e,"s",(function(){return o})),r.d(e,"r",(function(){return i})),r.d(e,"a",(function(){return a})),r.d(e,"p",(function(){return u})),r.d(e,"n",(function(){return s})),r.d(e,"d",(function(){return c})),r.d(e,"c",(function(){return f})),r.d(e,"h",(function(){return l})),r.d(e,"l",(function(){return h})),r.d(e,"i",(function(){return p})),r.d(e,"m",(function(){return d})),r.d(e,"g",(function(){return y})),r.d(e,"e",(function(){return v})),r.d(e,"f",(function(){return g})),r.d(e,"j",(function(){return m})),r.d(e,"k",(function(){return w})),r.d(e,"q",(function(){return b})),r.d(e,"o",(function(){return x}));r(87),r(33),r(133),r(95),r(53),r(62),r(96),r(97),r(98),r(99),r(100),r(101),r(102),r(103),r(104),r(105),r(106),r(107),r(108),r(109),r(110),r(111),r(112),r(113),r(114),r(115),r(116),r(117),r(118),r(119),r(91),r(124),r(142);function n(t,e,r,n){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;t.classList.remove(e),t.classList.add(r),o&&setTimeout((function(){t.classList.remove(r),t.classList.add(n)}),o)}function o(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=document.createElement("i");n.setAttribute("class","fa fa-spinner fa-spin spinner".concat(e)),r&&t.firstChild?t.insertBefore(n,t.firstChild):t.appendChild(n)}function i(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";try{for(var r=t.getElementsByClassName("fa fa-spinner fa-spin spinner".concat(e)),n=0;n<r.length;n++)t.removeChild(r[n])}catch(t){console.log("No spinner to remove"),console.log(t)}}function a(t,e){for(var r=function(r){e.forEach((function(e){t[r].classList.add(e)}))},n=0;n<t.length;n++)r(n)}function u(t,e){for(var r=function(r){e.forEach((function(e){t[r].classList.remove(e)}))},n=0;n<t.length;n++)r(n)}function s(t){for(var e=0;e<t.length;e++)t[e].style.display="none"}function c(t){for(var e=0;e<t.length;e++)t[e].innerText=""}function f(t){t.getContext("2d").clearRect(0,0,t.width,t.height),t.classList.remove("light-border"),t.height="1rem"}function l(t){for(var e=0;e<t.length;e++)t[e].disabled=!0}function h(t){for(var e=0;e<t.length;e++)t[e].disabled=!1}function p(t){for(var e=t.elements,r=0;r<e.length;r++)e[r].disabled=!0}function d(t){for(var e=t.elements,r=0;r<e.length;r++)e[r].disabled=!1}function y(t){var e=document.createElement("a"),r=new Uint8Array(t.file.data),n=new Blob([r]);if(window.navigator&&window.navigator.msSaveOrOpenBlob)window.navigator.msSaveOrOpenBlob(n,t.filename);else{var o=window.URL.createObjectURL(n);e.href=o,e.download=t.filename,document.body.appendChild(e),e.click(),setTimeout((function(){document.body.removeChild(e),window.URL.revokeObjectURL(o)}),0)}}function v(t){for(var e=t.getElementsByTagName("tbody");e.length>0;)e[0].remove()}function g(t){for(var e=t.getElementsByTagName("tbody")[0];e.childNodes.length>0;)e.childNodes[0].remove()}function m(t,e){e.forEach((function(e){t.appendChild(e.element),e.nextElement&&t.appendChild(e.nextElement)}))}function w(t,e){var r=t.getElementsByTagName("tbody")[0];e.forEach((function(t){r.appendChild(t.element),t.nextElement&&r.appendChild(t.nextElement)}))}function b(t){for(var e=0;e<t.length;e++)t[e].classList.remove("sort","sortedUp","sortedDown"),t[e].classList.add("sort")}function x(t){for(var e,r,n,o=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=1;i<t.length;i++){if(r=t[i].value,n=i,o)for(;n>0&&r<t[n-1].value;)n--;else for(;n>0&&r>t[n-1].value;)n--;e=t[i],t.splice(i,1),t.splice(n,0,e)}}document.addEventListener("DOMContentLoaded",(function(){!function(){var t=document.getElementsByTagName("html")[0],e=document.getElementsByTagName("body")[0];if(t.clientHeight+100<e.clientHeight){document.getElementsByClassName("usa-footer__return-to-top")[0].style.display="block"}}(),document.getElementById("browserWarning")&&$("#browserListPopover").popover({html:!0})}))},function(t,e,r){var n=r(7),o=r(63),i=r(6),a=r(34),u=Object.defineProperty;e.f=n?u:function(t,e,r){if(i(t),e=a(e,!0),i(r),o)try{return u(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(39);t.exports=function(t){return Object(n(t))}},function(t,e,r){var n=r(1),o=r(38).f,i=r(9),a=r(15),u=r(45),s=r(121),c=r(82);t.exports=function(t,e){var r,f,l,h,p,d=t.target,y=t.global,v=t.stat;if(r=y?n:v?n[d]||u(d,{}):(n[d]||{}).prototype)for(f in e){if(h=e[f],l=t.noTargetGet?(p=o(r,f))&&p.value:r[f],!c(y?f:d+(v?".":"#")+f,t.forced)&&void 0!==l){if(typeof h==typeof l)continue;s(h,l)}(t.sham||l&&l.sham)&&i(h,"sham",!0),a(r,f,h,t)}}},function(t,e,r){var n=r(24),o=r(36),i=r(12),a=r(4),u=r(60),s=[].push,c=function(t){var e=1==t,r=2==t,c=3==t,f=4==t,l=6==t,h=5==t||l;return function(p,d,y,v){for(var g,m,w=i(p),b=o(w),x=n(d,y,3),E=a(b.length),A=0,T=v||u,S=e?T(p,E):r?T(p,0):void 0;E>A;A++)if((h||A in b)&&(m=x(g=b[A],A,w),t))if(e)S[A]=m;else if(m)switch(t){case 3:return!0;case 5:return g;case 6:return A;case 2:s.call(S,g)}else if(f)return!1;return l?-1:c||f?f:S}};t.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6)}},function(t,e,r){var n=r(1),o=r(9),i=r(5),a=r(45),u=r(50),s=r(17),c=s.get,f=s.enforce,l=String(String).split("String");(t.exports=function(t,e,r,u){var s=!!u&&!!u.unsafe,c=!!u&&!!u.enumerable,h=!!u&&!!u.noTargetGet;"function"==typeof r&&("string"!=typeof e||i(r,"name")||o(r,"name",e),f(r).source=l.join("string"==typeof e?e:"")),t!==n?(s?!h&&t[e]&&(c=!0):delete t[e],c?t[e]=r:o(t,e,r)):c?t[e]=r:a(e,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||u(this)}))},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){var n,o,i,a=r(126),u=r(1),s=r(8),c=r(9),f=r(5),l=r(41),h=r(43),p=u.WeakMap;if(a){var d=new p,y=d.get,v=d.has,g=d.set;n=function(t,e){return g.call(d,t,e),e},o=function(t){return y.call(d,t)||{}},i=function(t){return v.call(d,t)}}else{var m=l("state");h[m]=!0,n=function(t,e){return c(t,m,e),e},o=function(t){return f(t,m)?t[m]:{}},i=function(t){return f(t,m)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!s(e)||(r=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,r){var n=r(122),o=r(1),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(n[t])||i(o[t]):n[t]&&n[t][e]||o[t]&&o[t][e]}},function(t,e,r){var n=r(16),o=Math.max,i=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):i(r,e)}},function(t,e,r){var n=r(6),o=r(32),i=r(3)("species");t.exports=function(t,e){var r,a=n(t).constructor;return void 0===a||null==(r=n(a)[i])?e:o(r)}},function(t,e,r){var n=r(11).f,o=r(5),i=r(3)("toStringTag");t.exports=function(t,e,r){t&&!o(t=r?t:t.prototype,i)&&n(t,i,{configurable:!0,value:e})}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e,r){var n=r(32);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,o){return t.call(e,r,n,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,r){var n=r(36),o=r(39);t.exports=function(t){return n(o(t))}},function(t,e){t.exports=!1},function(t,e,r){var n=r(48),o=r(23),i=r(3)("toStringTag"),a="Arguments"==o(function(){return arguments}());t.exports=n?o:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:a?o(e):"Object"==(n=o(e))&&"function"==typeof e.callee?"Arguments":n}},function(t,e){t.exports={}},function(t,e,r){var n=r(6),o=r(132);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),e=r instanceof Array}catch(t){}return function(r,i){return n(r),o(i),e?t.call(r,i):r.__proto__=i,r}}():void 0)},function(t,e){t.exports=function(t,e,r){if(!(t instanceof e))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return t}},function(t,e,r){var n=r(27),o=r(28),i=r(3)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[n(t)]}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,r){"use strict";var n=r(25),o=r(130),i=r(28),a=r(17),u=r(70),s=a.set,c=a.getterFor("Array Iterator");t.exports=u(Array,"Array",(function(t,e){s(this,{type:"Array Iterator",target:n(t),index:0,kind:e})}),(function(){var t=c(this),e=t.target,r=t.kind,n=t.index++;return!e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},function(t,e,r){var n=r(8);t.exports=function(t,e){if(!n(t))return t;var r,o;if(e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!n(o=r.call(t)))return o;if(!e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,r){var n,o=r(6),i=r(69),a=r(47),u=r(43),s=r(85),c=r(49),f=r(41),l=f("IE_PROTO"),h=function(){},p=function(t){return"<script>"+t+"<\/script>"},d=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;d=n?function(t){t.write(p("")),t.close();var e=t.parentWindow.Object;return t=null,e}(n):((e=c("iframe")).style.display="none",s.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F);for(var r=a.length;r--;)delete d.prototype[a[r]];return d()};u[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(h.prototype=o(t),r=new h,h.prototype=null,r[l]=t):r=d(),void 0===e?r:i(r,e)}},function(t,e,r){var n=r(2),o=r(23),i="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e,r){var n=r(5),o=r(12),i=r(41),a=r(131),u=i("IE_PROTO"),s=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),n(t,u)?t[u]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},function(t,e,r){var n=r(7),o=r(55),i=r(18),a=r(25),u=r(34),s=r(5),c=r(63),f=Object.getOwnPropertyDescriptor;e.f=n?f:function(t,e){if(t=a(t),e=u(e,!0),c)try{return f(t,e)}catch(t){}if(s(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,r){var n=r(65),o=r(47).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},function(t,e,r){var n=r(58),o=r(42),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+n).toString(36)}},function(t,e){t.exports={}},function(t,e,r){var n=r(7),o=r(2),i=r(5),a=Object.defineProperty,u={},s=function(t){throw t};t.exports=function(t,e){if(i(u,t))return u[t];e||(e={});var r=[][t],c=!!i(e,"ACCESSORS")&&e.ACCESSORS,f=i(e,0)?e[0]:s,l=i(e,1)?e[1]:void 0;return u[t]=!!r&&!o((function(){if(c&&!n)return!0;var t={length:-1};c?a(t,1,{enumerable:!0,get:s}):t[1]=1,r.call(t,f,l)}))}},function(t,e,r){var n=r(1),o=r(9);t.exports=function(t,e){try{o(n,t,e)}catch(r){n[t]=e}return e}},function(t,e,r){var n=r(25),o=r(4),i=r(20),a=function(t){return function(e,r,a){var u,s=n(e),c=o(s.length),f=i(a,c);if(t&&r!=r){for(;c>f;)if((u=s[f++])!=u)return!0}else for(;c>f;f++)if((t||f in s)&&s[f]===r)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,r){var n={};n[r(3)("toStringTag")]="z",t.exports="[object z]"===String(n)},function(t,e,r){var n=r(1),o=r(8),i=n.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,r){var n=r(64),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return o.call(t)}),t.exports=n.inspectSource},function(t,e,r){var n=r(15);t.exports=function(t,e,r){for(var o in e)n(t,o,e[o],r);return t}},function(t,e,r){var n=r(3),o=r(28),i=n("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},function(t,e,r){var n=r(48),o=r(15),i=r(128);n||o(Object.prototype,"toString",i,{unsafe:!0})},function(t,e,r){var n=r(16),o=r(39),i=function(t){return function(e,r){var i,a,u=String(o(e)),s=n(r),c=u.length;return s<0||s>=c?t?"":void 0:(i=u.charCodeAt(s))<55296||i>56319||s+1===c||(a=u.charCodeAt(s+1))<56320||a>57343?t?u.charAt(s):i:t?u.slice(s,s+2):a-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,e,r){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!n.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:n},function(t,e,r){var n=r(65),o=r(47);t.exports=Object.keys||function(t){return n(t,o)}},function(t,e,r){"use strict";var n=r(34),o=r(11),i=r(18);t.exports=function(t,e,r){var a=n(e);a in t?o.f(t,a,i(0,r)):t[a]=r}},function(t,e,r){var n=r(26),o=r(64);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:n?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(8),o=r(92),i=r(3)("species");t.exports=function(t,e){var r;return o(t)&&("function"!=typeof(r=t.constructor)||r!==Array&&!o(r.prototype)?n(r)&&null===(r=r[i])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===e?0:e)}},function(t,e,r){var n=r(2);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(t,e,r){"use strict";var n=r(54).charAt,o=r(17),i=r(70),a=o.set,u=o.getterFor("String Iterator");i(String,"String",(function(t){a(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=u(this),r=e.string,o=e.index;return o>=r.length?{value:void 0,done:!0}:(t=n(r,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,r){var n=r(7),o=r(2),i=r(49);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var n=r(1),o=r(45),i=n["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,e,r){var n=r(5),o=r(25),i=r(46).indexOf,a=r(43);t.exports=function(t,e){var r,u=o(t),s=0,c=[];for(r in u)!n(a,r)&&n(u,r)&&c.push(r);for(;e.length>s;)n(u,r=e[s++])&&(~i(c,r)||c.push(r));return c}},function(t,e,r){"use strict";var n=r(14).forEach,o=r(67),i=r(44),a=o("forEach"),u=i("forEach");t.exports=a&&u?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,e,r){"use strict";var n=r(2);t.exports=function(t,e){var r=[][t];return!!r&&n((function(){r.call(null,e||function(){throw 1},1)}))}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,r){var n=r(7),o=r(11),i=r(6),a=r(56);t.exports=n?Object.defineProperties:function(t,e){i(t);for(var r,n=a(e),u=n.length,s=0;u>s;)o.f(t,r=n[s++],e[r]);return t}},function(t,e,r){"use strict";var n=r(13),o=r(71),i=r(37),a=r(29),u=r(22),s=r(9),c=r(15),f=r(3),l=r(26),h=r(28),p=r(72),d=p.IteratorPrototype,y=p.BUGGY_SAFARI_ITERATORS,v=f("iterator"),g=function(){return this};t.exports=function(t,e,r,f,p,m,w){o(r,e,f);var b,x,E,A=function(t){if(t===p&&P)return P;if(!y&&t in L)return L[t];switch(t){case"keys":case"values":case"entries":return function(){return new r(this,t)}}return function(){return new r(this)}},T=e+" Iterator",S=!1,L=t.prototype,R=L[v]||L["@@iterator"]||p&&L[p],P=!y&&R||A(p),O="Array"==e&&L.entries||R;if(O&&(b=i(O.call(new t)),d!==Object.prototype&&b.next&&(l||i(b)===d||(a?a(b,d):"function"!=typeof b[v]&&s(b,v,g)),u(b,T,!0,!0),l&&(h[T]=g))),"values"==p&&R&&"values"!==R.name&&(S=!0,P=function(){return R.call(this)}),l&&!w||L[v]===P||s(L,v,P),h[e]=P,p)if(x={values:A("values"),keys:m?P:A("keys"),entries:A("entries")},w)for(E in x)(y||S||!(E in L))&&c(L,E,x[E]);else n({target:e,proto:!0,forced:y||S},x);return x}},function(t,e,r){"use strict";var n=r(72).IteratorPrototype,o=r(35),i=r(18),a=r(22),u=r(28),s=function(){return this};t.exports=function(t,e,r){var c=e+" Iterator";return t.prototype=o(n,{next:i(1,r)}),a(t,c,!1,!0),u[c]=s,t}},function(t,e,r){"use strict";var n,o,i,a=r(37),u=r(9),s=r(5),c=r(3),f=r(26),l=c("iterator"),h=!1;[].keys&&("next"in(i=[].keys())?(o=a(a(i)))!==Object.prototype&&(n=o):h=!0),null==n&&(n={}),f||s(n,l)||u(n,l,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:h}},function(t,e,r){"use strict";var n=r(1),o=r(7),i=r(74),a=r(9),u=r(51),s=r(2),c=r(30),f=r(16),l=r(4),h=r(75),p=r(134),d=r(37),y=r(29),v=r(40).f,g=r(11).f,m=r(76),w=r(22),b=r(17),x=b.get,E=b.set,A=n.ArrayBuffer,T=A,S=n.DataView,L=S&&S.prototype,R=Object.prototype,P=n.RangeError,O=p.pack,I=p.unpack,j=function(t){return[255&t]},B=function(t){return[255&t,t>>8&255]},_=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},k=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},U=function(t){return O(t,23,4)},M=function(t){return O(t,52,8)},C=function(t,e){g(t.prototype,e,{get:function(){return x(this)[e]}})},F=function(t,e,r,n){var o=h(r),i=x(t);if(o+e>i.byteLength)throw P("Wrong index");var a=x(i.buffer).bytes,u=o+i.byteOffset,s=a.slice(u,u+e);return n?s:s.reverse()},N=function(t,e,r,n,o,i){var a=h(r),u=x(t);if(a+e>u.byteLength)throw P("Wrong index");for(var s=x(u.buffer).bytes,c=a+u.byteOffset,f=n(+o),l=0;l<e;l++)s[c+l]=f[i?l:e-l-1]};if(i){if(!s((function(){A(1)}))||!s((function(){new A(-1)}))||s((function(){return new A,new A(1.5),new A(NaN),"ArrayBuffer"!=A.name}))){for(var D,q=(T=function(t){return c(this,T),new A(h(t))}).prototype=A.prototype,G=v(A),$=0;G.length>$;)(D=G[$++])in T||a(T,D,A[D]);q.constructor=T}y&&d(L)!==R&&y(L,R);var V=new S(new T(2)),W=L.setInt8;V.setInt8(0,2147483648),V.setInt8(1,2147483649),!V.getInt8(0)&&V.getInt8(1)||u(L,{setInt8:function(t,e){W.call(this,t,e<<24>>24)},setUint8:function(t,e){W.call(this,t,e<<24>>24)}},{unsafe:!0})}else T=function(t){c(this,T,"ArrayBuffer");var e=h(t);E(this,{bytes:m.call(new Array(e),0),byteLength:e}),o||(this.byteLength=e)},S=function(t,e,r){c(this,S,"DataView"),c(t,T,"DataView");var n=x(t).byteLength,i=f(e);if(i<0||i>n)throw P("Wrong offset");if(i+(r=void 0===r?n-i:l(r))>n)throw P("Wrong length");E(this,{buffer:t,byteLength:r,byteOffset:i}),o||(this.buffer=t,this.byteLength=r,this.byteOffset=i)},o&&(C(T,"byteLength"),C(S,"buffer"),C(S,"byteLength"),C(S,"byteOffset")),u(S.prototype,{getInt8:function(t){return F(this,1,t)[0]<<24>>24},getUint8:function(t){return F(this,1,t)[0]},getInt16:function(t){var e=F(this,2,t,arguments.length>1?arguments[1]:void 0);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=F(this,2,t,arguments.length>1?arguments[1]:void 0);return e[1]<<8|e[0]},getInt32:function(t){return k(F(this,4,t,arguments.length>1?arguments[1]:void 0))},getUint32:function(t){return k(F(this,4,t,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(t){return I(F(this,4,t,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(t){return I(F(this,8,t,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(t,e){N(this,1,t,j,e)},setUint8:function(t,e){N(this,1,t,j,e)},setInt16:function(t,e){N(this,2,t,B,e,arguments.length>2?arguments[2]:void 0)},setUint16:function(t,e){N(this,2,t,B,e,arguments.length>2?arguments[2]:void 0)},setInt32:function(t,e){N(this,4,t,_,e,arguments.length>2?arguments[2]:void 0)},setUint32:function(t,e){N(this,4,t,_,e,arguments.length>2?arguments[2]:void 0)},setFloat32:function(t,e){N(this,4,t,U,e,arguments.length>2?arguments[2]:void 0)},setFloat64:function(t,e){N(this,8,t,M,e,arguments.length>2?arguments[2]:void 0)}});w(T,"ArrayBuffer"),w(S,"DataView"),t.exports={ArrayBuffer:T,DataView:S}},function(t,e){t.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},function(t,e,r){var n=r(16),o=r(4);t.exports=function(t){if(void 0===t)return 0;var e=n(t),r=o(e);if(e!==r)throw RangeError("Wrong length or index");return r}},function(t,e,r){"use strict";var n=r(12),o=r(20),i=r(4);t.exports=function(t){for(var e=n(this),r=i(e.length),a=arguments.length,u=o(a>1?arguments[1]:void 0,r),s=a>2?arguments[2]:void 0,c=void 0===s?r:o(s,r);c>u;)e[u++]=t;return e}},function(t,e,r){var n=r(137);t.exports=function(t,e){var r=n(t);if(r%e)throw RangeError("Wrong offset");return r}},function(t,e,r){var n=r(32),o=r(12),i=r(36),a=r(4),u=function(t){return function(e,r,u,s){n(r);var c=o(e),f=i(c),l=a(c.length),h=t?l-1:0,p=t?-1:1;if(u<2)for(;;){if(h in f){s=f[h],h+=p;break}if(h+=p,t?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;t?h>=0:l>h;h+=p)h in f&&(s=r(s,f[h],h,c));return s}};t.exports={left:u(!1),right:u(!0)}},function(t,e,r){var n=r(2),o=r(3),i=r(26),a=o("iterator");t.exports=!n((function(){var t=new URL("b?a=1&b=2&c=3","http://a"),e=t.searchParams,r="";return t.pathname="c%20d",e.forEach((function(t,n){e.delete("b"),r+=n+t})),i&&!t.toJSON||!e.sort||"http://a/c%20d?a=1&c=3"!==t.href||"3"!==e.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!e[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==r||"x"!==new URL("http://x",void 0).host}))},function(t,e,r){var n=r(3)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var r=!1;try{var i={};i[n]=function(){return{next:function(){return{done:r=!0}}}},t(i)}catch(t){}return r}},function(t,e,r){var n,o,i=r(1),a=r(86),u=i.process,s=u&&u.versions,c=s&&s.v8;c?o=(n=c.split("."))[0]+n[1]:a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=n[1]),t.exports=o&&+o},function(t,e,r){var n=r(2),o=/#|\.prototype\./,i=function(t,e){var r=u[a(t)];return r==c||r!=s&&("function"==typeof e?n(e):!!e)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},u=i.data={},s=i.NATIVE="N",c=i.POLYFILL="P";t.exports=i},function(t,e,r){"use strict";var n=r(19),o=r(11),i=r(3),a=r(7),u=i("species");t.exports=function(t){var e=n(t),r=o.f;a&&e&&!e[u]&&r(e,u,{configurable:!0,get:function(){return this}})}},function(t,e,r){var n=r(6);t.exports=function(t,e,r,o){try{return o?e(n(r)[0],r[1]):e(r)}catch(e){var i=t.return;throw void 0!==i&&n(i.call(t)),e}}},function(t,e,r){var n=r(19);t.exports=n("document","documentElement")},function(t,e,r){var n=r(19);t.exports=n("navigator","userAgent")||""},function(t,e,r){"use strict";var n=r(13),o=r(66);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(t,e,r){var n,o,i,a=r(1),u=r(2),s=r(23),c=r(24),f=r(85),l=r(49),h=r(89),p=a.location,d=a.setImmediate,y=a.clearImmediate,v=a.process,g=a.MessageChannel,m=a.Dispatch,w=0,b={},x=function(t){if(b.hasOwnProperty(t)){var e=b[t];delete b[t],e()}},E=function(t){return function(){x(t)}},A=function(t){x(t.data)},T=function(t){a.postMessage(t+"",p.protocol+"//"+p.host)};d&&y||(d=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return b[++w]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},n(w),w},y=function(t){delete b[t]},"process"==s(v)?n=function(t){v.nextTick(E(t))}:m&&m.now?n=function(t){m.now(E(t))}:g&&!h?(i=(o=new g).port2,o.port1.onmessage=A,n=c(i.postMessage,i,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||u(T)||"file:"===p.protocol?n="onreadystatechange"in l("script")?function(t){f.appendChild(l("script")).onreadystatechange=function(){f.removeChild(this),x(t)}}:function(t){setTimeout(E(t),0)}:(n=T,a.addEventListener("message",A,!1))),t.exports={set:d,clear:y}},function(t,e,r){var n=r(86);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(n)},function(t,e,r){"use strict";var n=r(32),o=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new o(t)}},function(t,e,r){var n=r(1),o=r(68),i=r(66),a=r(9);for(var u in o){var s=n[u],c=s&&s.prototype;if(c&&c.forEach!==i)try{a(c,"forEach",i)}catch(t){c.forEach=i}}},function(t,e,r){var n=r(23);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){"use strict";var n,o,i,a,u=r(13),s=r(26),c=r(1),f=r(19),l=r(147),h=r(15),p=r(51),d=r(22),y=r(83),v=r(8),g=r(32),m=r(30),w=r(23),b=r(50),x=r(150),E=r(80),A=r(21),T=r(88).set,S=r(151),L=r(148),R=r(152),P=r(90),O=r(153),I=r(17),j=r(82),B=r(3),_=r(81),k=B("species"),U="Promise",M=I.get,C=I.set,F=I.getterFor(U),N=l,D=c.TypeError,q=c.document,G=c.process,$=f("fetch"),V=P.f,W=V,Y="process"==w(G),H=!!(q&&q.createEvent&&c.dispatchEvent),z=j(U,(function(){if(!(b(N)!==String(N))){if(66===_)return!0;if(!Y&&"function"!=typeof PromiseRejectionEvent)return!0}if(s&&!N.prototype.finally)return!0;if(_>=51&&/native code/.test(N))return!1;var t=N.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[k]=e,!(t.then((function(){}))instanceof e)})),K=z||!E((function(t){N.all(t).catch((function(){}))})),X=function(t){var e;return!(!v(t)||"function"!=typeof(e=t.then))&&e},J=function(t,e,r){if(!e.notified){e.notified=!0;var n=e.reactions;S((function(){for(var o=e.value,i=1==e.state,a=0;n.length>a;){var u,s,c,f=n[a++],l=i?f.ok:f.fail,h=f.resolve,p=f.reject,d=f.domain;try{l?(i||(2===e.rejection&&et(t,e),e.rejection=1),!0===l?u=o:(d&&d.enter(),u=l(o),d&&(d.exit(),c=!0)),u===f.promise?p(D("Promise-chain cycle")):(s=X(u))?s.call(u,h,p):h(u)):p(o)}catch(t){d&&!c&&d.exit(),p(t)}}e.reactions=[],e.notified=!1,r&&!e.rejection&&Q(t,e)}))}},Z=function(t,e,r){var n,o;H?((n=q.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),c.dispatchEvent(n)):n={promise:e,reason:r},(o=c["on"+t])?o(n):"unhandledrejection"===t&&R("Unhandled promise rejection",r)},Q=function(t,e){T.call(c,(function(){var r,n=e.value;if(tt(e)&&(r=O((function(){Y?G.emit("unhandledRejection",n,t):Z("unhandledrejection",t,n)})),e.rejection=Y||tt(e)?2:1,r.error))throw r.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){T.call(c,(function(){Y?G.emit("rejectionHandled",t):Z("rejectionhandled",t,e.value)}))},rt=function(t,e,r,n){return function(o){t(e,r,o,n)}},nt=function(t,e,r,n){e.done||(e.done=!0,n&&(e=n),e.value=r,e.state=2,J(t,e,!0))},ot=function(t,e,r,n){if(!e.done){e.done=!0,n&&(e=n);try{if(t===r)throw D("Promise can't be resolved itself");var o=X(r);o?S((function(){var n={done:!1};try{o.call(r,rt(ot,t,n,e),rt(nt,t,n,e))}catch(r){nt(t,n,r,e)}})):(e.value=r,e.state=1,J(t,e,!1))}catch(r){nt(t,{done:!1},r,e)}}};z&&(N=function(t){m(this,N,U),g(t),n.call(this);var e=M(this);try{t(rt(ot,this,e),rt(nt,this,e))}catch(t){nt(this,e,t)}},(n=function(t){C(this,{type:U,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(N.prototype,{then:function(t,e){var r=F(this),n=V(A(this,N));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=Y?G.domain:void 0,r.parent=!0,r.reactions.push(n),0!=r.state&&J(this,r,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n,e=M(t);this.promise=t,this.resolve=rt(ot,t,e),this.reject=rt(nt,t,e)},P.f=V=function(t){return t===N||t===i?new o(t):W(t)},s||"function"!=typeof l||(a=l.prototype.then,h(l.prototype,"then",(function(t,e){var r=this;return new N((function(t,e){a.call(r,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof $&&u({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return L(N,$.apply(c,arguments))}}))),u({global:!0,wrap:!0,forced:z},{Promise:N}),d(N,U,!1,!0),y(U),i=f(U),u({target:U,stat:!0,forced:z},{reject:function(t){var e=V(this);return e.reject.call(void 0,t),e.promise}}),u({target:U,stat:!0,forced:s||z},{resolve:function(t){return L(s&&this===i?N:this,t)}}),u({target:U,stat:!0,forced:K},{all:function(t){var e=this,r=V(e),n=r.resolve,o=r.reject,i=O((function(){var r=g(e.resolve),i=[],a=0,u=1;x(t,(function(t){var s=a++,c=!1;i.push(void 0),u++,r.call(e,t).then((function(t){c||(c=!0,i[s]=t,--u||n(i))}),o)})),--u||n(i)}));return i.error&&o(i.value),r.promise},race:function(t){var e=this,r=V(e),n=r.reject,o=O((function(){var o=g(e.resolve);x(t,(function(t){o.call(e,t).then(r.resolve,n)}))}));return o.error&&n(o.value),r.promise}})},function(t,e,r){var n=r(2),o=r(3),i=r(81),a=o("species");t.exports=function(t){return i>=51||!n((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,r){"use strict";var n=r(13),o=r(2),i=r(73),a=r(6),u=r(20),s=r(4),c=r(21),f=i.ArrayBuffer,l=i.DataView,h=f.prototype.slice;n({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:o((function(){return!new f(2).slice(1,void 0).byteLength}))},{slice:function(t,e){if(void 0!==h&&void 0===e)return h.call(a(this),t);for(var r=a(this).byteLength,n=u(t,r),o=u(void 0===e?r:e,r),i=new(c(this,f))(s(o-n)),p=new l(this),d=new l(i),y=0;n<o;)d.setUint8(y++,p.getUint8(n++));return i}})},function(t,e,r){r(135)("Uint8",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},function(t,e,r){"use strict";var n=r(0),o=r(140),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("copyWithin",(function(t,e){return o.call(i(this),t,e,arguments.length>2?arguments[2]:void 0)}))},function(t,e,r){"use strict";var n=r(0),o=r(14).every,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("every",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),o=r(76),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("fill",(function(t){return o.apply(i(this),arguments)}))},function(t,e,r){"use strict";var n=r(0),o=r(14).filter,i=r(21),a=n.aTypedArray,u=n.aTypedArrayConstructor;(0,n.exportTypedArrayMethod)("filter",(function(t){for(var e=o(a(this),t,arguments.length>1?arguments[1]:void 0),r=i(this,this.constructor),n=0,s=e.length,c=new(u(r))(s);s>n;)c[n]=e[n++];return c}))},function(t,e,r){"use strict";var n=r(0),o=r(14).find,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("find",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),o=r(14).findIndex,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("findIndex",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),o=r(14).forEach,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("forEach",(function(t){o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),o=r(46).includes,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("includes",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),o=r(46).indexOf,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("indexOf",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(1),o=r(0),i=r(33),a=r(3)("iterator"),u=n.Uint8Array,s=i.values,c=i.keys,f=i.entries,l=o.aTypedArray,h=o.exportTypedArrayMethod,p=u&&u.prototype[a],d=!!p&&("values"==p.name||null==p.name),y=function(){return s.call(l(this))};h("entries",(function(){return f.call(l(this))})),h("keys",(function(){return c.call(l(this))})),h("values",y,!d),h(a,y,!d)},function(t,e,r){"use strict";var n=r(0),o=n.aTypedArray,i=n.exportTypedArrayMethod,a=[].join;i("join",(function(t){return a.apply(o(this),arguments)}))},function(t,e,r){"use strict";var n=r(0),o=r(141),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("lastIndexOf",(function(t){return o.apply(i(this),arguments)}))},function(t,e,r){"use strict";var n=r(0),o=r(14).map,i=r(21),a=n.aTypedArray,u=n.aTypedArrayConstructor;(0,n.exportTypedArrayMethod)("map",(function(t){return o(a(this),t,arguments.length>1?arguments[1]:void 0,(function(t,e){return new(u(i(t,t.constructor)))(e)}))}))},function(t,e,r){"use strict";var n=r(0),o=r(78).left,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduce",(function(t){return o(i(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),o=r(78).right,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduceRight",(function(t){return o(i(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),o=n.aTypedArray,i=n.exportTypedArrayMethod,a=Math.floor;i("reverse",(function(){for(var t,e=o(this).length,r=a(e/2),n=0;n<r;)t=this[n],this[n++]=this[--e],this[e]=t;return this}))},function(t,e,r){"use strict";var n=r(0),o=r(4),i=r(77),a=r(12),u=r(2),s=n.aTypedArray;(0,n.exportTypedArrayMethod)("set",(function(t){s(this);var e=i(arguments.length>1?arguments[1]:void 0,1),r=this.length,n=a(t),u=o(n.length),c=0;if(u+e>r)throw RangeError("Wrong length");for(;c<u;)this[e+c]=n[c++]}),u((function(){new Int8Array(1).set({})})))},function(t,e,r){"use strict";var n=r(0),o=r(21),i=r(2),a=n.aTypedArray,u=n.aTypedArrayConstructor,s=n.exportTypedArrayMethod,c=[].slice;s("slice",(function(t,e){for(var r=c.call(a(this),t,e),n=o(this,this.constructor),i=0,s=r.length,f=new(u(n))(s);s>i;)f[i]=r[i++];return f}),i((function(){new Int8Array(1).slice()})))},function(t,e,r){"use strict";var n=r(0),o=r(14).some,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("some",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(0),o=n.aTypedArray,i=n.exportTypedArrayMethod,a=[].sort;i("sort",(function(t){return a.call(o(this),t)}))},function(t,e,r){"use strict";var n=r(0),o=r(4),i=r(20),a=r(21),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("subarray",(function(t,e){var r=u(this),n=r.length,s=i(t,n);return new(a(r,r.constructor))(r.buffer,r.byteOffset+s*r.BYTES_PER_ELEMENT,o((void 0===e?n:i(e,n))-s))}))},function(t,e,r){"use strict";var n=r(1),o=r(0),i=r(2),a=n.Int8Array,u=o.aTypedArray,s=o.exportTypedArrayMethod,c=[].toLocaleString,f=[].slice,l=!!a&&i((function(){c.call(new a(1))}));s("toLocaleString",(function(){return c.apply(l?f.call(u(this)):u(this),arguments)}),i((function(){return[1,2].toLocaleString()!=new a([1,2]).toLocaleString()}))||!i((function(){a.prototype.toLocaleString.call([1,2])})))},function(t,e,r){"use strict";var n=r(0).exportTypedArrayMethod,o=r(2),i=r(1).Uint8Array,a=i&&i.prototype||{},u=[].toString,s=[].join;o((function(){u.call({})}))&&(u=function(){return s.call(this)});var c=a.toString!=u;n("toString",u,c)},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){var n=r(5),o=r(127),i=r(38),a=r(11);t.exports=function(t,e){for(var r=o(e),u=a.f,s=i.f,c=0;c<r.length;c++){var f=r[c];n(t,f)||u(t,f,s(e,f))}}},function(t,e,r){var n=r(1);t.exports=n},function(t,e,r){var n=r(61);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,r){var n=r(1),o=r(68),i=r(33),a=r(9),u=r(3),s=u("iterator"),c=u("toStringTag"),f=i.values;for(var l in o){var h=n[l],p=h&&h.prototype;if(p){if(p[s]!==f)try{a(p,s,f)}catch(t){p[s]=f}if(p[c]||a(p,c,l),o[l])for(var d in i)if(p[d]!==i[d])try{a(p,d,i[d])}catch(t){p[d]=i[d]}}}},function(t,e,r){"use strict";var n=r(24),o=r(12),i=r(84),a=r(52),u=r(4),s=r(57),c=r(31);t.exports=function(t){var e,r,f,l,h,p,d=o(t),y="function"==typeof this?this:Array,v=arguments.length,g=v>1?arguments[1]:void 0,m=void 0!==g,w=c(d),b=0;if(m&&(g=n(g,v>2?arguments[2]:void 0,2)),null==w||y==Array&&a(w))for(r=new y(e=u(d.length));e>b;b++)p=m?g(d[b],b):d[b],s(r,b,p);else for(h=(l=w.call(d)).next,r=new y;!(f=h.call(l)).done;b++)p=m?i(l,g,[f.value,b],!0):f.value,s(r,b,p);return r.length=b,r}},function(t,e,r){var n=r(1),o=r(50),i=n.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,e,r){var n=r(19),o=r(40),i=r(59),a=r(6);t.exports=n("Reflect","ownKeys")||function(t){var e=o.f(a(t)),r=i.f;return r?e.concat(r(t)):e}},function(t,e,r){"use strict";var n=r(48),o=r(27);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,e,r){var n=function(t){"use strict";var e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",i=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function u(t,e,r,n){var o=e&&e.prototype instanceof f?e:f,i=Object.create(o.prototype),a=new E(n||[]);return i._invoke=function(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return T()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var u=w(a,r);if(u){if(u===c)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var f=s(t,e,r);if("normal"===f.type){if(n=r.done?"completed":"suspendedYield",f.arg===c)continue;return{value:f.arg,done:r.done}}"throw"===f.type&&(n="completed",r.method="throw",r.arg=f.arg)}}}(t,r,a),i}function s(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var c={};function f(){}function l(){}function h(){}var p={};p[o]=function(){return this};var d=Object.getPrototypeOf,y=d&&d(d(A([])));y&&y!==e&&r.call(y,o)&&(p=y);var v=h.prototype=f.prototype=Object.create(p);function g(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function m(t,e){var n;this._invoke=function(o,i){function a(){return new e((function(n,a){!function n(o,i,a,u){var c=s(t[o],t,i);if("throw"!==c.type){var f=c.arg,l=f.value;return l&&"object"==typeof l&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,u)}),(function(t){n("throw",t,a,u)})):e.resolve(l).then((function(t){f.value=t,a(f)}),(function(t){return n("throw",t,a,u)}))}u(c.arg)}(o,i,n,a)}))}return n=n?n.then(a,a):a()}}function w(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,w(t,e),"throw"===e.method))return c;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var n=s(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,c;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,c):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,c)}function b(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(b,this),this.reset(!0)}function A(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:T}}function T(){return{value:void 0,done:!0}}return l.prototype=v.constructor=h,h.constructor=l,h[a]=l.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===l||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(v),t},t.awrap=function(t){return{__await:t}},g(m.prototype),m.prototype[i]=function(){return this},t.AsyncIterator=m,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new m(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},g(v),v[a]="Generator",v[o]=function(){return this},v.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=A,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,c):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),c},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),x(r),c}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;x(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:A(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),c}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},function(t,e,r){var n=r(3),o=r(35),i=r(11),a=n("unscopables"),u=Array.prototype;null==u[a]&&i.f(u,a,{configurable:!0,value:o(null)}),t.exports=function(t){u[a][t]=!0}},function(t,e,r){var n=r(2);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,r){var n=r(8);t.exports=function(t){if(!n(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,r){"use strict";var n=r(13),o=r(20),i=r(16),a=r(4),u=r(12),s=r(60),c=r(57),f=r(94),l=r(44),h=f("splice"),p=l("splice",{ACCESSORS:!0,0:0,1:2}),d=Math.max,y=Math.min;n({target:"Array",proto:!0,forced:!h||!p},{splice:function(t,e){var r,n,f,l,h,p,v=u(this),g=a(v.length),m=o(t,g),w=arguments.length;if(0===w?r=n=0:1===w?(r=0,n=g-m):(r=w-2,n=y(d(i(e),0),g-m)),g+r-n>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(f=s(v,n),l=0;l<n;l++)(h=m+l)in v&&c(f,l,v[h]);if(f.length=n,r<n){for(l=m;l<g-n;l++)p=l+r,(h=l+n)in v?v[p]=v[h]:delete v[p];for(l=g;l>g-n+r;l--)delete v[l-1]}else if(r>n)for(l=g-n;l>m;l--)p=l+r-1,(h=l+n-1)in v?v[p]=v[h]:delete v[p];for(l=0;l<r;l++)v[l+m]=arguments[l+2];return v.length=g-n+r,f}})},function(t,e){var r=Math.abs,n=Math.pow,o=Math.floor,i=Math.log,a=Math.LN2;t.exports={pack:function(t,e,u){var s,c,f,l=new Array(u),h=8*u-e-1,p=(1<<h)-1,d=p>>1,y=23===e?n(2,-24)-n(2,-77):0,v=t<0||0===t&&1/t<0?1:0,g=0;for((t=r(t))!=t||t===1/0?(c=t!=t?1:0,s=p):(s=o(i(t)/a),t*(f=n(2,-s))<1&&(s--,f*=2),(t+=s+d>=1?y/f:y*n(2,1-d))*f>=2&&(s++,f/=2),s+d>=p?(c=0,s=p):s+d>=1?(c=(t*f-1)*n(2,e),s+=d):(c=t*n(2,d-1)*n(2,e),s=0));e>=8;l[g++]=255&c,c/=256,e-=8);for(s=s<<e|c,h+=e;h>0;l[g++]=255&s,s/=256,h-=8);return l[--g]|=128*v,l},unpack:function(t,e){var r,o=t.length,i=8*o-e-1,a=(1<<i)-1,u=a>>1,s=i-7,c=o-1,f=t[c--],l=127&f;for(f>>=7;s>0;l=256*l+t[c],c--,s-=8);for(r=l&(1<<-s)-1,l>>=-s,s+=e;s>0;r=256*r+t[c],c--,s-=8);if(0===l)l=1-u;else{if(l===a)return r?NaN:f?-1/0:1/0;r+=n(2,e),l-=u}return(f?-1:1)*r*n(2,l-e)}}},function(t,e,r){"use strict";var n=r(13),o=r(1),i=r(7),a=r(136),u=r(0),s=r(73),c=r(30),f=r(18),l=r(9),h=r(4),p=r(75),d=r(77),y=r(34),v=r(5),g=r(27),m=r(8),w=r(35),b=r(29),x=r(40).f,E=r(138),A=r(14).forEach,T=r(83),S=r(11),L=r(38),R=r(17),P=r(139),O=R.get,I=R.set,j=S.f,B=L.f,_=Math.round,k=o.RangeError,U=s.ArrayBuffer,M=s.DataView,C=u.NATIVE_ARRAY_BUFFER_VIEWS,F=u.TYPED_ARRAY_TAG,N=u.TypedArray,D=u.TypedArrayPrototype,q=u.aTypedArrayConstructor,G=u.isTypedArray,$=function(t,e){for(var r=0,n=e.length,o=new(q(t))(n);n>r;)o[r]=e[r++];return o},V=function(t,e){j(t,e,{get:function(){return O(this)[e]}})},W=function(t){var e;return t instanceof U||"ArrayBuffer"==(e=g(t))||"SharedArrayBuffer"==e},Y=function(t,e){return G(t)&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},H=function(t,e){return Y(t,e=y(e,!0))?f(2,t[e]):B(t,e)},z=function(t,e,r){return!(Y(t,e=y(e,!0))&&m(r)&&v(r,"value"))||v(r,"get")||v(r,"set")||r.configurable||v(r,"writable")&&!r.writable||v(r,"enumerable")&&!r.enumerable?j(t,e,r):(t[e]=r.value,t)};i?(C||(L.f=H,S.f=z,V(D,"buffer"),V(D,"byteOffset"),V(D,"byteLength"),V(D,"length")),n({target:"Object",stat:!0,forced:!C},{getOwnPropertyDescriptor:H,defineProperty:z}),t.exports=function(t,e,r){var i=t.match(/\d+$/)[0]/8,u=t+(r?"Clamped":"")+"Array",s="get"+t,f="set"+t,y=o[u],v=y,g=v&&v.prototype,S={},L=function(t,e){j(t,e,{get:function(){return function(t,e){var r=O(t);return r.view[s](e*i+r.byteOffset,!0)}(this,e)},set:function(t){return function(t,e,n){var o=O(t);r&&(n=(n=_(n))<0?0:n>255?255:255&n),o.view[f](e*i+o.byteOffset,n,!0)}(this,e,t)},enumerable:!0})};C?a&&(v=e((function(t,e,r,n){return c(t,v,u),P(m(e)?W(e)?void 0!==n?new y(e,d(r,i),n):void 0!==r?new y(e,d(r,i)):new y(e):G(e)?$(v,e):E.call(v,e):new y(p(e)),t,v)})),b&&b(v,N),A(x(y),(function(t){t in v||l(v,t,y[t])})),v.prototype=g):(v=e((function(t,e,r,n){c(t,v,u);var o,a,s,f=0,l=0;if(m(e)){if(!W(e))return G(e)?$(v,e):E.call(v,e);o=e,l=d(r,i);var y=e.byteLength;if(void 0===n){if(y%i)throw k("Wrong length");if((a=y-l)<0)throw k("Wrong length")}else if((a=h(n)*i)+l>y)throw k("Wrong length");s=a/i}else s=p(e),o=new U(a=s*i);for(I(t,{buffer:o,byteOffset:l,byteLength:a,length:s,view:new M(o)});f<s;)L(t,f++)})),b&&b(v,N),g=v.prototype=w(D)),g.constructor!==v&&l(g,"constructor",v),F&&l(g,F,u),S[u]=v,n({global:!0,forced:v!=y,sham:!C},S),"BYTES_PER_ELEMENT"in v||l(v,"BYTES_PER_ELEMENT",i),"BYTES_PER_ELEMENT"in g||l(g,"BYTES_PER_ELEMENT",i),T(u)}):t.exports=function(){}},function(t,e,r){var n=r(1),o=r(2),i=r(80),a=r(0).NATIVE_ARRAY_BUFFER_VIEWS,u=n.ArrayBuffer,s=n.Int8Array;t.exports=!a||!o((function(){s(1)}))||!o((function(){new s(-1)}))||!i((function(t){new s,new s(null),new s(1.5),new s(t)}),!0)||o((function(){return 1!==new s(new u(2),1,void 0).length}))},function(t,e,r){var n=r(16);t.exports=function(t){var e=n(t);if(e<0)throw RangeError("The argument can't be less than 0");return e}},function(t,e,r){var n=r(12),o=r(4),i=r(31),a=r(52),u=r(24),s=r(0).aTypedArrayConstructor;t.exports=function(t){var e,r,c,f,l,h,p=n(t),d=arguments.length,y=d>1?arguments[1]:void 0,v=void 0!==y,g=i(p);if(null!=g&&!a(g))for(h=(l=g.call(p)).next,p=[];!(f=h.call(l)).done;)p.push(f.value);for(v&&d>2&&(y=u(y,arguments[2],2)),r=o(p.length),c=new(s(this))(r),e=0;r>e;e++)c[e]=v?y(p[e],e):p[e];return c}},function(t,e,r){var n=r(8),o=r(29);t.exports=function(t,e,r){var i,a;return o&&"function"==typeof(i=e.constructor)&&i!==r&&n(a=i.prototype)&&a!==r.prototype&&o(t,a),t}},function(t,e,r){"use strict";var n=r(12),o=r(20),i=r(4),a=Math.min;t.exports=[].copyWithin||function(t,e){var r=n(this),u=i(r.length),s=o(t,u),c=o(e,u),f=arguments.length>2?arguments[2]:void 0,l=a((void 0===f?u:o(f,u))-c,u-s),h=1;for(c<s&&s<c+l&&(h=-1,c+=l-1,s+=l-1);l-- >0;)c in r?r[s]=r[c]:delete r[s],s+=h,c+=h;return r}},function(t,e,r){"use strict";var n=r(25),o=r(16),i=r(4),a=r(67),u=r(44),s=Math.min,c=[].lastIndexOf,f=!!c&&1/[1].lastIndexOf(1,-0)<0,l=a("lastIndexOf"),h=u("indexOf",{ACCESSORS:!0,1:0}),p=f||!l||!h;t.exports=p?function(t){if(f)return c.apply(this,arguments)||0;var e=n(this),r=i(e.length),a=r-1;for(arguments.length>1&&(a=s(a,o(arguments[1]))),a<0&&(a=r+a);a>=0;a--)if(a in e&&e[a]===t)return a||0;return-1}:c},function(t,e,r){"use strict";r(62);var n,o=r(13),i=r(7),a=r(79),u=r(1),s=r(69),c=r(15),f=r(30),l=r(5),h=r(143),p=r(125),d=r(54).codeAt,y=r(144),v=r(22),g=r(145),m=r(17),w=u.URL,b=g.URLSearchParams,x=g.getState,E=m.set,A=m.getterFor("URL"),T=Math.floor,S=Math.pow,L=/[A-Za-z]/,R=/[\d+-.A-Za-z]/,P=/\d/,O=/^(0x|0X)/,I=/^[0-7]+$/,j=/^\d+$/,B=/^[\dA-Fa-f]+$/,_=/[\u0000\u0009\u000A\u000D #%/:?@[\\]]/,k=/[\u0000\u0009\u000A\u000D #/:?@[\\]]/,U=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,M=/[\u0009\u000A\u000D]/g,C=function(t,e){var r,n,o;if("["==e.charAt(0)){if("]"!=e.charAt(e.length-1))return"Invalid host";if(!(r=N(e.slice(1,-1))))return"Invalid host";t.host=r}else if(H(t)){if(e=y(e),_.test(e))return"Invalid host";if(null===(r=F(e)))return"Invalid host";t.host=r}else{if(k.test(e))return"Invalid host";for(r="",n=p(e),o=0;o<n.length;o++)r+=W(n[o],q);t.host=r}},F=function(t){var e,r,n,o,i,a,u,s=t.split(".");if(s.length&&""==s[s.length-1]&&s.pop(),(e=s.length)>4)return t;for(r=[],n=0;n<e;n++){if(""==(o=s[n]))return t;if(i=10,o.length>1&&"0"==o.charAt(0)&&(i=O.test(o)?16:8,o=o.slice(8==i?1:2)),""===o)a=0;else{if(!(10==i?j:8==i?I:B).test(o))return t;a=parseInt(o,i)}r.push(a)}for(n=0;n<e;n++)if(a=r[n],n==e-1){if(a>=S(256,5-e))return null}else if(a>255)return null;for(u=r.pop(),n=0;n<r.length;n++)u+=r[n]*S(256,3-n);return u},N=function(t){var e,r,n,o,i,a,u,s=[0,0,0,0,0,0,0,0],c=0,f=null,l=0,h=function(){return t.charAt(l)};if(":"==h()){if(":"!=t.charAt(1))return;l+=2,f=++c}for(;h();){if(8==c)return;if(":"!=h()){for(e=r=0;r<4&&B.test(h());)e=16*e+parseInt(h(),16),l++,r++;if("."==h()){if(0==r)return;if(l-=r,c>6)return;for(n=0;h();){if(o=null,n>0){if(!("."==h()&&n<4))return;l++}if(!P.test(h()))return;for(;P.test(h());){if(i=parseInt(h(),10),null===o)o=i;else{if(0==o)return;o=10*o+i}if(o>255)return;l++}s[c]=256*s[c]+o,2!=++n&&4!=n||c++}if(4!=n)return;break}if(":"==h()){if(l++,!h())return}else if(h())return;s[c++]=e}else{if(null!==f)return;l++,f=++c}}if(null!==f)for(a=c-f,c=7;0!=c&&a>0;)u=s[c],s[c--]=s[f+a-1],s[f+--a]=u;else if(8!=c)return;return s},D=function(t){var e,r,n,o;if("number"==typeof t){for(e=[],r=0;r<4;r++)e.unshift(t%256),t=T(t/256);return e.join(".")}if("object"==typeof t){for(e="",n=function(t){for(var e=null,r=1,n=null,o=0,i=0;i<8;i++)0!==t[i]?(o>r&&(e=n,r=o),n=null,o=0):(null===n&&(n=i),++o);return o>r&&(e=n,r=o),e}(t),r=0;r<8;r++)o&&0===t[r]||(o&&(o=!1),n===r?(e+=r?":":"::",o=!0):(e+=t[r].toString(16),r<7&&(e+=":")));return"["+e+"]"}return t},q={},G=h({},q,{" ":1,'"':1,"<":1,">":1,"`":1}),$=h({},G,{"#":1,"?":1,"{":1,"}":1}),V=h({},$,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),W=function(t,e){var r=d(t,0);return r>32&&r<127&&!l(e,t)?t:encodeURIComponent(t)},Y={ftp:21,file:null,http:80,https:443,ws:80,wss:443},H=function(t){return l(Y,t.scheme)},z=function(t){return""!=t.username||""!=t.password},K=function(t){return!t.host||t.cannotBeABaseURL||"file"==t.scheme},X=function(t,e){var r;return 2==t.length&&L.test(t.charAt(0))&&(":"==(r=t.charAt(1))||!e&&"|"==r)},J=function(t){var e;return t.length>1&&X(t.slice(0,2))&&(2==t.length||"/"===(e=t.charAt(2))||"\\"===e||"?"===e||"#"===e)},Z=function(t){var e=t.path,r=e.length;!r||"file"==t.scheme&&1==r&&X(e[0],!0)||e.pop()},Q=function(t){return"."===t||"%2e"===t.toLowerCase()},tt={},et={},rt={},nt={},ot={},it={},at={},ut={},st={},ct={},ft={},lt={},ht={},pt={},dt={},yt={},vt={},gt={},mt={},wt={},bt={},xt=function(t,e,r,o){var i,a,u,s,c,f=r||tt,h=0,d="",y=!1,v=!1,g=!1;for(r||(t.scheme="",t.username="",t.password="",t.host=null,t.port=null,t.path=[],t.query=null,t.fragment=null,t.cannotBeABaseURL=!1,e=e.replace(U,"")),e=e.replace(M,""),i=p(e);h<=i.length;){switch(a=i[h],f){case tt:if(!a||!L.test(a)){if(r)return"Invalid scheme";f=rt;continue}d+=a.toLowerCase(),f=et;break;case et:if(a&&(R.test(a)||"+"==a||"-"==a||"."==a))d+=a.toLowerCase();else{if(":"!=a){if(r)return"Invalid scheme";d="",f=rt,h=0;continue}if(r&&(H(t)!=l(Y,d)||"file"==d&&(z(t)||null!==t.port)||"file"==t.scheme&&!t.host))return;if(t.scheme=d,r)return void(H(t)&&Y[t.scheme]==t.port&&(t.port=null));d="","file"==t.scheme?f=pt:H(t)&&o&&o.scheme==t.scheme?f=nt:H(t)?f=ut:"/"==i[h+1]?(f=ot,h++):(t.cannotBeABaseURL=!0,t.path.push(""),f=mt)}break;case rt:if(!o||o.cannotBeABaseURL&&"#"!=a)return"Invalid scheme";if(o.cannotBeABaseURL&&"#"==a){t.scheme=o.scheme,t.path=o.path.slice(),t.query=o.query,t.fragment="",t.cannotBeABaseURL=!0,f=bt;break}f="file"==o.scheme?pt:it;continue;case nt:if("/"!=a||"/"!=i[h+1]){f=it;continue}f=st,h++;break;case ot:if("/"==a){f=ct;break}f=gt;continue;case it:if(t.scheme=o.scheme,a==n)t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.query=o.query;else if("/"==a||"\\"==a&&H(t))f=at;else if("?"==a)t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.query="",f=wt;else{if("#"!=a){t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.path.pop(),f=gt;continue}t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.query=o.query,t.fragment="",f=bt}break;case at:if(!H(t)||"/"!=a&&"\\"!=a){if("/"!=a){t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,f=gt;continue}f=ct}else f=st;break;case ut:if(f=st,"/"!=a||"/"!=d.charAt(h+1))continue;h++;break;case st:if("/"!=a&&"\\"!=a){f=ct;continue}break;case ct:if("@"==a){y&&(d="%40"+d),y=!0,u=p(d);for(var m=0;m<u.length;m++){var w=u[m];if(":"!=w||g){var b=W(w,V);g?t.password+=b:t.username+=b}else g=!0}d=""}else if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&H(t)){if(y&&""==d)return"Invalid authority";h-=p(d).length+1,d="",f=ft}else d+=a;break;case ft:case lt:if(r&&"file"==t.scheme){f=yt;continue}if(":"!=a||v){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&H(t)){if(H(t)&&""==d)return"Invalid host";if(r&&""==d&&(z(t)||null!==t.port))return;if(s=C(t,d))return s;if(d="",f=vt,r)return;continue}"["==a?v=!0:"]"==a&&(v=!1),d+=a}else{if(""==d)return"Invalid host";if(s=C(t,d))return s;if(d="",f=ht,r==lt)return}break;case ht:if(!P.test(a)){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&H(t)||r){if(""!=d){var x=parseInt(d,10);if(x>65535)return"Invalid port";t.port=H(t)&&x===Y[t.scheme]?null:x,d=""}if(r)return;f=vt;continue}return"Invalid port"}d+=a;break;case pt:if(t.scheme="file","/"==a||"\\"==a)f=dt;else{if(!o||"file"!=o.scheme){f=gt;continue}if(a==n)t.host=o.host,t.path=o.path.slice(),t.query=o.query;else if("?"==a)t.host=o.host,t.path=o.path.slice(),t.query="",f=wt;else{if("#"!=a){J(i.slice(h).join(""))||(t.host=o.host,t.path=o.path.slice(),Z(t)),f=gt;continue}t.host=o.host,t.path=o.path.slice(),t.query=o.query,t.fragment="",f=bt}}break;case dt:if("/"==a||"\\"==a){f=yt;break}o&&"file"==o.scheme&&!J(i.slice(h).join(""))&&(X(o.path[0],!0)?t.path.push(o.path[0]):t.host=o.host),f=gt;continue;case yt:if(a==n||"/"==a||"\\"==a||"?"==a||"#"==a){if(!r&&X(d))f=gt;else if(""==d){if(t.host="",r)return;f=vt}else{if(s=C(t,d))return s;if("localhost"==t.host&&(t.host=""),r)return;d="",f=vt}continue}d+=a;break;case vt:if(H(t)){if(f=gt,"/"!=a&&"\\"!=a)continue}else if(r||"?"!=a)if(r||"#"!=a){if(a!=n&&(f=gt,"/"!=a))continue}else t.fragment="",f=bt;else t.query="",f=wt;break;case gt:if(a==n||"/"==a||"\\"==a&&H(t)||!r&&("?"==a||"#"==a)){if(".."===(c=(c=d).toLowerCase())||"%2e."===c||".%2e"===c||"%2e%2e"===c?(Z(t),"/"==a||"\\"==a&&H(t)||t.path.push("")):Q(d)?"/"==a||"\\"==a&&H(t)||t.path.push(""):("file"==t.scheme&&!t.path.length&&X(d)&&(t.host&&(t.host=""),d=d.charAt(0)+":"),t.path.push(d)),d="","file"==t.scheme&&(a==n||"?"==a||"#"==a))for(;t.path.length>1&&""===t.path[0];)t.path.shift();"?"==a?(t.query="",f=wt):"#"==a&&(t.fragment="",f=bt)}else d+=W(a,$);break;case mt:"?"==a?(t.query="",f=wt):"#"==a?(t.fragment="",f=bt):a!=n&&(t.path[0]+=W(a,q));break;case wt:r||"#"!=a?a!=n&&("'"==a&&H(t)?t.query+="%27":t.query+="#"==a?"%23":W(a,q)):(t.fragment="",f=bt);break;case bt:a!=n&&(t.fragment+=W(a,G))}h++}},Et=function(t){var e,r,n=f(this,Et,"URL"),o=arguments.length>1?arguments[1]:void 0,a=String(t),u=E(n,{type:"URL"});if(void 0!==o)if(o instanceof Et)e=A(o);else if(r=xt(e={},String(o)))throw TypeError(r);if(r=xt(u,a,null,e))throw TypeError(r);var s=u.searchParams=new b,c=x(s);c.updateSearchParams(u.query),c.updateURL=function(){u.query=String(s)||null},i||(n.href=Tt.call(n),n.origin=St.call(n),n.protocol=Lt.call(n),n.username=Rt.call(n),n.password=Pt.call(n),n.host=Ot.call(n),n.hostname=It.call(n),n.port=jt.call(n),n.pathname=Bt.call(n),n.search=_t.call(n),n.searchParams=kt.call(n),n.hash=Ut.call(n))},At=Et.prototype,Tt=function(){var t=A(this),e=t.scheme,r=t.username,n=t.password,o=t.host,i=t.port,a=t.path,u=t.query,s=t.fragment,c=e+":";return null!==o?(c+="//",z(t)&&(c+=r+(n?":"+n:"")+"@"),c+=D(o),null!==i&&(c+=":"+i)):"file"==e&&(c+="//"),c+=t.cannotBeABaseURL?a[0]:a.length?"/"+a.join("/"):"",null!==u&&(c+="?"+u),null!==s&&(c+="#"+s),c},St=function(){var t=A(this),e=t.scheme,r=t.port;if("blob"==e)try{return new URL(e.path[0]).origin}catch(t){return"null"}return"file"!=e&&H(t)?e+"://"+D(t.host)+(null!==r?":"+r:""):"null"},Lt=function(){return A(this).scheme+":"},Rt=function(){return A(this).username},Pt=function(){return A(this).password},Ot=function(){var t=A(this),e=t.host,r=t.port;return null===e?"":null===r?D(e):D(e)+":"+r},It=function(){var t=A(this).host;return null===t?"":D(t)},jt=function(){var t=A(this).port;return null===t?"":String(t)},Bt=function(){var t=A(this),e=t.path;return t.cannotBeABaseURL?e[0]:e.length?"/"+e.join("/"):""},_t=function(){var t=A(this).query;return t?"?"+t:""},kt=function(){return A(this).searchParams},Ut=function(){var t=A(this).fragment;return t?"#"+t:""},Mt=function(t,e){return{get:t,set:e,configurable:!0,enumerable:!0}};if(i&&s(At,{href:Mt(Tt,(function(t){var e=A(this),r=String(t),n=xt(e,r);if(n)throw TypeError(n);x(e.searchParams).updateSearchParams(e.query)})),origin:Mt(St),protocol:Mt(Lt,(function(t){var e=A(this);xt(e,String(t)+":",tt)})),username:Mt(Rt,(function(t){var e=A(this),r=p(String(t));if(!K(e)){e.username="";for(var n=0;n<r.length;n++)e.username+=W(r[n],V)}})),password:Mt(Pt,(function(t){var e=A(this),r=p(String(t));if(!K(e)){e.password="";for(var n=0;n<r.length;n++)e.password+=W(r[n],V)}})),host:Mt(Ot,(function(t){var e=A(this);e.cannotBeABaseURL||xt(e,String(t),ft)})),hostname:Mt(It,(function(t){var e=A(this);e.cannotBeABaseURL||xt(e,String(t),lt)})),port:Mt(jt,(function(t){var e=A(this);K(e)||(""==(t=String(t))?e.port=null:xt(e,t,ht))})),pathname:Mt(Bt,(function(t){var e=A(this);e.cannotBeABaseURL||(e.path=[],xt(e,t+"",vt))})),search:Mt(_t,(function(t){var e=A(this);""==(t=String(t))?e.query=null:("?"==t.charAt(0)&&(t=t.slice(1)),e.query="",xt(e,t,wt)),x(e.searchParams).updateSearchParams(e.query)})),searchParams:Mt(kt),hash:Mt(Ut,(function(t){var e=A(this);""!=(t=String(t))?("#"==t.charAt(0)&&(t=t.slice(1)),e.fragment="",xt(e,t,bt)):e.fragment=null}))}),c(At,"toJSON",(function(){return Tt.call(this)}),{enumerable:!0}),c(At,"toString",(function(){return Tt.call(this)}),{enumerable:!0}),w){var Ct=w.createObjectURL,Ft=w.revokeObjectURL;Ct&&c(Et,"createObjectURL",(function(t){return Ct.apply(w,arguments)})),Ft&&c(Et,"revokeObjectURL",(function(t){return Ft.apply(w,arguments)}))}v(Et,"URL"),o({global:!0,forced:!a,sham:!i},{URL:Et})},function(t,e,r){"use strict";var n=r(7),o=r(2),i=r(56),a=r(59),u=r(55),s=r(12),c=r(36),f=Object.assign,l=Object.defineProperty;t.exports=!f||o((function(){if(n&&1!==f({b:1},f(l({},"a",{enumerable:!0,get:function(){l(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},r=Symbol();return t[r]=7,"abcdefghijklmnopqrst".split("").forEach((function(t){e[t]=t})),7!=f({},t)[r]||"abcdefghijklmnopqrst"!=i(f({},e)).join("")}))?function(t,e){for(var r=s(t),o=arguments.length,f=1,l=a.f,h=u.f;o>f;)for(var p,d=c(arguments[f++]),y=l?i(d).concat(l(d)):i(d),v=y.length,g=0;v>g;)p=y[g++],n&&!h.call(d,p)||(r[p]=d[p]);return r}:f},function(t,e,r){"use strict";var n=/[^\0-\u007E]/,o=/[.\u3002\uFF0E\uFF61]/g,i="Overflow: input needs wider integers to process",a=Math.floor,u=String.fromCharCode,s=function(t){return t+22+75*(t<26)},c=function(t,e,r){var n=0;for(t=r?a(t/700):t>>1,t+=a(t/e);t>455;n+=36)t=a(t/35);return a(n+36*t/(t+38))},f=function(t){var e,r,n=[],o=(t=function(t){for(var e=[],r=0,n=t.length;r<n;){var o=t.charCodeAt(r++);if(o>=55296&&o<=56319&&r<n){var i=t.charCodeAt(r++);56320==(64512&i)?e.push(((1023&o)<<10)+(1023&i)+65536):(e.push(o),r--)}else e.push(o)}return e}(t)).length,f=128,l=0,h=72;for(e=0;e<t.length;e++)(r=t[e])<128&&n.push(u(r));var p=n.length,d=p;for(p&&n.push("-");d<o;){var y=2147483647;for(e=0;e<t.length;e++)(r=t[e])>=f&&r<y&&(y=r);var v=d+1;if(y-f>a((2147483647-l)/v))throw RangeError(i);for(l+=(y-f)*v,f=y,e=0;e<t.length;e++){if((r=t[e])<f&&++l>2147483647)throw RangeError(i);if(r==f){for(var g=l,m=36;;m+=36){var w=m<=h?1:m>=h+26?26:m-h;if(g<w)break;var b=g-w,x=36-w;n.push(u(s(w+b%x))),g=a(b/x)}n.push(u(s(g))),h=c(l,v,d==p),l=0,++d}}++l,++f}return n.join("")};t.exports=function(t){var e,r,i=[],a=t.toLowerCase().replace(o,".").split(".");for(e=0;e<a.length;e++)r=a[e],i.push(n.test(r)?"xn--"+f(r):r);return i.join(".")}},function(t,e,r){"use strict";r(33);var n=r(13),o=r(19),i=r(79),a=r(15),u=r(51),s=r(22),c=r(71),f=r(17),l=r(30),h=r(5),p=r(24),d=r(27),y=r(6),v=r(8),g=r(35),m=r(18),w=r(146),b=r(31),x=r(3),E=o("fetch"),A=o("Headers"),T=x("iterator"),S=f.set,L=f.getterFor("URLSearchParams"),R=f.getterFor("URLSearchParamsIterator"),P=/\+/g,O=Array(4),I=function(t){return O[t-1]||(O[t-1]=RegExp("((?:%[\\da-f]{2}){"+t+"})","gi"))},j=function(t){try{return decodeURIComponent(t)}catch(e){return t}},B=function(t){var e=t.replace(P," "),r=4;try{return decodeURIComponent(e)}catch(t){for(;r;)e=e.replace(I(r--),j);return e}},_=/[!'()~]|%20/g,k={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},U=function(t){return k[t]},M=function(t){return encodeURIComponent(t).replace(_,U)},C=function(t,e){if(e)for(var r,n,o=e.split("&"),i=0;i<o.length;)(r=o[i++]).length&&(n=r.split("="),t.push({key:B(n.shift()),value:B(n.join("="))}))},F=function(t){this.entries.length=0,C(this.entries,t)},N=function(t,e){if(t<e)throw TypeError("Not enough arguments")},D=c((function(t,e){S(this,{type:"URLSearchParamsIterator",iterator:w(L(t).entries),kind:e})}),"Iterator",(function(){var t=R(this),e=t.kind,r=t.iterator.next(),n=r.value;return r.done||(r.value="keys"===e?n.key:"values"===e?n.value:[n.key,n.value]),r})),q=function(){l(this,q,"URLSearchParams");var t,e,r,n,o,i,a,u,s,c=arguments.length>0?arguments[0]:void 0,f=this,p=[];if(S(f,{type:"URLSearchParams",entries:p,updateURL:function(){},updateSearchParams:F}),void 0!==c)if(v(c))if("function"==typeof(t=b(c)))for(r=(e=t.call(c)).next;!(n=r.call(e)).done;){if((a=(i=(o=w(y(n.value))).next).call(o)).done||(u=i.call(o)).done||!i.call(o).done)throw TypeError("Expected sequence with length 2");p.push({key:a.value+"",value:u.value+""})}else for(s in c)h(c,s)&&p.push({key:s,value:c[s]+""});else C(p,"string"==typeof c?"?"===c.charAt(0)?c.slice(1):c:c+"")},G=q.prototype;u(G,{append:function(t,e){N(arguments.length,2);var r=L(this);r.entries.push({key:t+"",value:e+""}),r.updateURL()},delete:function(t){N(arguments.length,1);for(var e=L(this),r=e.entries,n=t+"",o=0;o<r.length;)r[o].key===n?r.splice(o,1):o++;e.updateURL()},get:function(t){N(arguments.length,1);for(var e=L(this).entries,r=t+"",n=0;n<e.length;n++)if(e[n].key===r)return e[n].value;return null},getAll:function(t){N(arguments.length,1);for(var e=L(this).entries,r=t+"",n=[],o=0;o<e.length;o++)e[o].key===r&&n.push(e[o].value);return n},has:function(t){N(arguments.length,1);for(var e=L(this).entries,r=t+"",n=0;n<e.length;)if(e[n++].key===r)return!0;return!1},set:function(t,e){N(arguments.length,1);for(var r,n=L(this),o=n.entries,i=!1,a=t+"",u=e+"",s=0;s<o.length;s++)(r=o[s]).key===a&&(i?o.splice(s--,1):(i=!0,r.value=u));i||o.push({key:a,value:u}),n.updateURL()},sort:function(){var t,e,r,n=L(this),o=n.entries,i=o.slice();for(o.length=0,r=0;r<i.length;r++){for(t=i[r],e=0;e<r;e++)if(o[e].key>t.key){o.splice(e,0,t);break}e===r&&o.push(t)}n.updateURL()},forEach:function(t){for(var e,r=L(this).entries,n=p(t,arguments.length>1?arguments[1]:void 0,3),o=0;o<r.length;)n((e=r[o++]).value,e.key,this)},keys:function(){return new D(this,"keys")},values:function(){return new D(this,"values")},entries:function(){return new D(this,"entries")}},{enumerable:!0}),a(G,T,G.entries),a(G,"toString",(function(){for(var t,e=L(this).entries,r=[],n=0;n<e.length;)t=e[n++],r.push(M(t.key)+"="+M(t.value));return r.join("&")}),{enumerable:!0}),s(q,"URLSearchParams"),n({global:!0,forced:!i},{URLSearchParams:q}),i||"function"!=typeof E||"function"!=typeof A||n({global:!0,enumerable:!0,forced:!0},{fetch:function(t){var e,r,n,o=[t];return arguments.length>1&&(v(e=arguments[1])&&(r=e.body,"URLSearchParams"===d(r)&&((n=e.headers?new A(e.headers):new A).has("content-type")||n.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),e=g(e,{body:m(0,String(r)),headers:m(0,n)}))),o.push(e)),E.apply(this,o)}}),t.exports={URLSearchParams:q,getState:L}},function(t,e,r){var n=r(6),o=r(31);t.exports=function(t){var e=o(t);if("function"!=typeof e)throw TypeError(String(t)+" is not iterable");return n(e.call(t))}},function(t,e,r){var n=r(1);t.exports=n.Promise},function(t,e,r){var n=r(6),o=r(8),i=r(90);t.exports=function(t,e){if(n(t),o(e)&&e.constructor===t)return e;var r=i.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){"use strict";r.r(e),r.d(e,"Headers",(function(){return p})),r.d(e,"Request",(function(){return b})),r.d(e,"Response",(function(){return E})),r.d(e,"DOMException",(function(){return T})),r.d(e,"fetch",(function(){return S}));var n="URLSearchParams"in self,o="Symbol"in self&&"iterator"in Symbol,i="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),a="FormData"in self,u="ArrayBuffer"in self;if(u)var s=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(t){return t&&s.indexOf(Object.prototype.toString.call(t))>-1};function f(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function l(t){return"string"!=typeof t&&(t=String(t)),t}function h(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return o&&(e[Symbol.iterator]=function(){return e}),e}function p(t){this.map={},t instanceof p?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function d(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function y(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function v(t){var e=new FileReader,r=y(e);return e.readAsArrayBuffer(t),r}function g(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:i&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:a&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():u&&i&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=g(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(t)||c(t))?this._bodyArrayBuffer=g(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var t=d(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?d(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(v)}),this.text=function(){var t,e,r,n=d(this);if(n)return n;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,r=y(e),e.readAsText(t),r;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},a&&(this.formData=function(){return this.text().then(x)}),this.json=function(){return this.text().then(JSON.parse)},this}p.prototype.append=function(t,e){t=f(t),e=l(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},p.prototype.delete=function(t){delete this.map[f(t)]},p.prototype.get=function(t){return t=f(t),this.has(t)?this.map[t]:null},p.prototype.has=function(t){return this.map.hasOwnProperty(f(t))},p.prototype.set=function(t,e){this.map[f(t)]=l(e)},p.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},p.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),h(t)},p.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),h(t)},p.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),h(t)},o&&(p.prototype[Symbol.iterator]=p.prototype.entries);var w=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function b(t,e){var r,n,o=(e=e||{}).body;if(t instanceof b){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new p(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new p(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),w.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function x(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function E(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new p(e.headers),this.url=e.url||"",this._initBody(t)}b.prototype.clone=function(){return new b(this,{body:this._bodyInit})},m.call(b.prototype),m.call(E.prototype),E.prototype.clone=function(){return new E(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new p(this.headers),url:this.url})},E.error=function(){var t=new E(null,{status:0,statusText:""});return t.type="error",t};var A=[301,302,303,307,308];E.redirect=function(t,e){if(-1===A.indexOf(e))throw new RangeError("Invalid status code");return new E(null,{status:e,headers:{location:t}})};var T=self.DOMException;try{new T}catch(t){(T=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),T.prototype.constructor=T}function S(t,e){return new Promise((function(r,n){var o=new b(t,e);if(o.signal&&o.signal.aborted)return n(new T("Aborted","AbortError"));var a=new XMLHttpRequest;function u(){a.abort()}a.onload=function(){var t,e,n={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",e=new p,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}})),e)};n.url="responseURL"in a?a.responseURL:n.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;r(new E(o,n))},a.onerror=function(){n(new TypeError("Network request failed"))},a.ontimeout=function(){n(new TypeError("Network request failed"))},a.onabort=function(){n(new T("Aborted","AbortError"))},a.open(o.method,o.url,!0),"include"===o.credentials?a.withCredentials=!0:"omit"===o.credentials&&(a.withCredentials=!1),"responseType"in a&&i&&(a.responseType="blob"),o.headers.forEach((function(t,e){a.setRequestHeader(e,t)})),o.signal&&(o.signal.addEventListener("abort",u),a.onreadystatechange=function(){4===a.readyState&&o.signal.removeEventListener("abort",u)}),a.send(void 0===o._bodyInit?null:o._bodyInit)}))}S.polyfill=!0,self.fetch||(self.fetch=S,self.Headers=p,self.Request=b,self.Response=E)},function(t,e,r){var n=r(6),o=r(52),i=r(4),a=r(24),u=r(31),s=r(84),c=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,r,f,l){var h,p,d,y,v,g,m,w=a(e,r,f?2:1);if(l)h=t;else{if("function"!=typeof(p=u(t)))throw TypeError("Target is not iterable");if(o(p)){for(d=0,y=i(t.length);y>d;d++)if((v=f?w(n(m=t[d])[0],m[1]):w(t[d]))&&v instanceof c)return v;return new c(!1)}h=p.call(t)}for(g=h.next;!(m=g.call(h)).done;)if("object"==typeof(v=s(h,w,m.value,f))&&v&&v instanceof c)return v;return new c(!1)}).stop=function(t){return new c(!0,t)}},function(t,e,r){var n,o,i,a,u,s,c,f,l=r(1),h=r(38).f,p=r(23),d=r(88).set,y=r(89),v=l.MutationObserver||l.WebKitMutationObserver,g=l.process,m=l.Promise,w="process"==p(g),b=h(l,"queueMicrotask"),x=b&&b.value;x||(n=function(){var t,e;for(w&&(t=g.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},w?a=function(){g.nextTick(n)}:v&&!y?(u=!0,s=document.createTextNode(""),new v(n).observe(s,{characterData:!0}),a=function(){s.data=u=!u}):m&&m.resolve?(c=m.resolve(void 0),f=c.then,a=function(){f.call(c,n)}):a=function(){d.call(l,n)}),t.exports=x||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},function(t,e,r){var n=r(1);t.exports=function(t,e){var r=n.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,r){"use strict";var n,o,i=r(157),a=r(158),u=RegExp.prototype.exec,s=String.prototype.replace,c=u,f=(n=/a/,o=/b*/g,u.call(n,"a"),u.call(o,"a"),0!==n.lastIndex||0!==o.lastIndex),l=a.UNSUPPORTED_Y||a.BROKEN_CARET,h=void 0!==/()??/.exec("")[1];(f||h||l)&&(c=function(t){var e,r,n,o,a=this,c=l&&a.sticky,p=i.call(a),d=a.source,y=0,v=t;return c&&(-1===(p=p.replace("y","")).indexOf("g")&&(p+="g"),v=String(t).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==t[a.lastIndex-1])&&(d="(?: "+d+")",v=" "+v,y++),r=new RegExp("^(?:"+d+")",p)),h&&(r=new RegExp("^"+d+"$(?!\\s)",p)),f&&(e=a.lastIndex),n=u.call(c?r:a,v),c?n?(n.input=n.input.slice(y),n[0]=n[0].slice(y),n.index=a.lastIndex,a.lastIndex+=n[0].length):a.lastIndex=0:f&&n&&(a.lastIndex=a.global?n.index+n[0].length:e),h&&n&&n.length>1&&s.call(n[0],r,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)})),n}),t.exports=c},function(t,e,r){"use strict";var n=r(13),o=r(154);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},,function(t,e,r){"use strict";var n=r(6);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){"use strict";var n=r(2);function o(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=n((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=n((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},function(t,e,r){"use strict";var n=r(160),o=r(6),i=r(4),a=r(39),u=r(161),s=r(162);n("match",1,(function(t,e,r){return[function(e){var r=a(this),n=null==e?void 0:e[t];return void 0!==n?n.call(e,r):new RegExp(e)[t](String(r))},function(t){var n=r(e,t,this);if(n.done)return n.value;var a=o(t),c=String(this);if(!a.global)return s(a,c);var f=a.unicode;a.lastIndex=0;for(var l,h=[],p=0;null!==(l=s(a,c));){var d=String(l[0]);h[p]=d,""===d&&(a.lastIndex=u(c,i(a.lastIndex),f)),p++}return 0===p?null:h}]}))},function(t,e,r){"use strict";r(155);var n=r(15),o=r(2),i=r(3),a=r(154),u=r(9),s=i("species"),c=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),f="$0"==="a".replace(/./,"$0"),l=i("replace"),h=!!/./[l]&&""===/./[l]("a","$0"),p=!o((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]}));t.exports=function(t,e,r,l){var d=i(t),y=!o((function(){var e={};return e[d]=function(){return 7},7!=""[t](e)})),v=y&&!o((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[s]=function(){return r},r.flags="",r[d]=/./[d]),r.exec=function(){return e=!0,null},r[d](""),!e}));if(!y||!v||"replace"===t&&(!c||!f||h)||"split"===t&&!p){var g=/./[d],m=r(d,""[t],(function(t,e,r,n,o){return e.exec===a?y&&!o?{done:!0,value:g.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),{REPLACE_KEEPS_$0:f,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:h}),w=m[0],b=m[1];n(String.prototype,t,w),n(RegExp.prototype,d,2==e?function(t,e){return b.call(t,this,e)}:function(t){return b.call(t,this)})}l&&u(RegExp.prototype[d],"sham",!0)}},function(t,e,r){"use strict";var n=r(54).charAt;t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){var n=r(23),o=r(154);t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var i=r.call(t,e);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==n(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},,,,,,,,,,function(t,e,r){r(149),t.exports=r(205)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,r){"use strict";r.r(e);r(87),r(53),r(93),r(155),r(159),r(91),r(129);var n=r(10);function o(t,e,r,n,o,i,a){try{var u=t[i](a),s=u.value}catch(t){return void r(t)}u.done?e(s):Promise.resolve(s).then(n,o)}function i(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function u(t){o(a,n,i,u,s,"next",t)}function s(t){o(a,n,i,u,s,"throw",t)}u(void 0)}))}}function a(){return u.apply(this,arguments)}function u(){return(u=i(regeneratorRuntime.mark((function t(){var e,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return(e={}).oldPassword=document.getElementById("oldPassword").value,e.newPassword=document.getElementById("newPassword").value,e.newPasswordRe=document.getElementById("newPasswordRe").value,t.next=6,fetch("/update_password",{method:"POST",headers:{"Content-Type":"application/json"},cache:"no-store",credentials:"same-origin",body:JSON.stringify(e)});case 6:return r=t.sent,t.next=9,r.json();case 9:return t.abrupt("return",t.sent);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function s(t,e,r,n,o,i,a){try{var u=t[i](a),s=u.value}catch(t){return void r(t)}u.done?e(s):Promise.resolve(s).then(n,o)}function c(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){s(i,n,o,a,u,"next",t)}function u(t){s(i,n,o,a,u,"throw",t)}a(void 0)}))}}function f(){return(f=c(regeneratorRuntime.mark((function t(){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,document.getElementById("submitNewPassword").disabled=!0,n.s(document.getElementById("submitBtnDiv")),t.next=5,a();case 5:e=t.sent,n.n($(".changePasswordAlert")),d(e),t.next=15;break;case 10:t.prev=10,t.t0=t.catch(0),console.log(t.t0),n.n($(".changePasswordAlert")),document.getElementById("alertError").display="block";case 15:n.r(document.getElementById("submitBtnDiv")),document.getElementById("submitNewPassword").disabled=!1;case 17:case"end":return t.stop()}}),t,null,[[0,10]])})))).apply(this,arguments)}function l(t,e,r){var n=!0;return e.forEach((function(e){if(null===t.value.match(e.regex)){for(var o=0;o<e.elements.length;o++)e.elements[o].classList.remove("val","invalid","invalBlank");if(n=!1,r)for(var i=0;i<e.elements.length;i++)e.elements[i].classList.add("invalid");else for(var a=0;a<e.elements.length;a++)e.elements[a].classList.add("invalBlank")}else for(var u=0;u<e.elements.length;u++)e.elements[u].classList.remove("invalBlank","invalid"),e.elements[u].classList.add("val")})),!n&&r?$("#newPassword")[0].classList.add("usa-input--error"):n&&$("#newPassword")[0].classList.remove("usa-input--error"),n}function h(t,e,r){var o=!0;if(r&&n.d(document.getElementsByClassName("passwordError")),t.value.length<e.minLength){for(var i=0;i<e.elements.length;i++)e.elements[i].classList.remove("val","invalid","invalBlank");if(o=!1,r)for(var a=0;a<e.elements.length;a++)e.elements[a].classList.add("invalid");else for(var u=0;u<e.elements.length;u++)e.elements[u].classList.add("invalBlank")}else for(var s=0;s<e.elements.length;s++)e.elements[s].classList.remove("invalBlank","invalid"),e.elements[s].classList.add("val");return o}function p(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=$("#newPassword")[0],r=$("#newPasswordRe")[0],n=/[a-z]/g,o=/[A-Z]/g,i=/[0-9]/g,a=/\W|_/g,u=8,s=l(e,[{regex:n,elements:$(".lowercaseReq")},{regex:o,elements:$(".uppercaseReq")},{regex:i,elements:$(".numberReq")},{regex:a,elements:$(".specialReq")}],t);return s=h(e,{minLength:u,elements:$(".minCharReq")},t)&&s,t&&s&&e.value!==r.value?($("#newPasswordReError")[0].innerText="Password re-entry mismatch",$("#newPasswordReError")[0].style.display="block",r.classList.add("usa-input--error"),s=!1):(r.classList.remove("usa-input--error"),$("#newPasswordReError")[0].style.display="none",s=s&&!0),s}function d(t){t.passwordUpdated?(document.getElementById("alertSuccess").style.display="block",document.getElementById("passwordFormContainer").style.display="none"):t.invalidNewPassword?(document.getElementById("alertInfo").style.display="block",document.getElementById("newPasswordError").innerText=t.invalidMessage,document.getElementById("newPasswordError").style.display="block"):t.invalidNewPasswordRe?(document.getElementById("alertWarning").style.display="block",document.getElementById("newPasswordReError").innerText=t.invalidMessage,document.getElementById("newPasswordReError").style.display="block"):t.invalidOldPassword?(document.getElementById("alertInfo").style.display="block",document.getElementById("oldPasswordError").innerText=t.invalidMessage,document.getElementById("oldPasswordError").style.display="block"):(document.getElementById("alertError").style.display="block",document.getElementById("passwordFormContainer").style.display="none")}document.addEventListener("DOMContentLoaded",(function(){document.getElementById("showPassword").addEventListener("click",(function(t){t.preventDefault();var e=document.getElementById("newPassword"),r=document.getElementById("newPasswordRe"),n=document.getElementById("oldPassword");"password"===e.getAttribute("type")?(n.setAttribute("type","text"),e.setAttribute("type","text"),r.setAttribute("type","text"),this.innerText="Hide password"):(n.setAttribute("type","password"),e.setAttribute("type","password"),r.setAttribute("type","password"),this.innerText="Show password")})),document.getElementById("submitNewPassword").addEventListener("click",(function(t){t.preventDefault(),p(!0)&&function(){f.apply(this,arguments)}()})),document.getElementById("newPassword").addEventListener("input",(function(){p()}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1maWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vZmZzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXVybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLnNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJldmVyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc3ViYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1sb2NhbGUtc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWVlZTc1NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wb3NpdGl2ZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wdW55Y29kZS10by1hc2NpaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aGF0d2ctZmV0Y2gvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9hY2NvdW50X2FqYXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FjY291bnQuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJOQU1FIiwiTkFUSVZFX0FSUkFZX0JVRkZFUiIsIkRFU0NSSVBUT1JTIiwiZ2xvYmFsIiwiaXNPYmplY3QiLCJoYXMiLCJjbGFzc29mIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwicmVkZWZpbmUiLCJmIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIndlbGxLbm93blN5bWJvbCIsInVpZCIsIkludDhBcnJheSIsIkludDhBcnJheVByb3RvdHlwZSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUiLCJUeXBlZEFycmF5IiwiVHlwZWRBcnJheVByb3RvdHlwZSIsIk9iamVjdFByb3RvdHlwZSIsImlzUHJvdG90eXBlT2YiLCJUT19TVFJJTkdfVEFHIiwiVFlQRURfQVJSQVlfVEFHIiwiTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyIsIm9wZXJhIiwiVFlQRURfQVJSQVlfVEFHX1JFUUlSRUQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCIsIlVpbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiVWludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiVWludDMyQXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJpdCIsIkZ1bmN0aW9uIiwiVHlwZUVycm9yIiwidGhpcyIsInVuZGVmaW5lZCIsImFUeXBlZEFycmF5IiwiYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIkMiLCJBUlJBWSIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsImV4cG9ydFR5cGVkQXJyYXlNZXRob2QiLCJLRVkiLCJmb3JjZWQiLCJleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kIiwiZXJyb3IiLCJpc1ZpZXciLCJrbGFzcyIsIk1hdGgiLCJjaGVjayIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJzZWxmIiwiZXhlYyIsInNoYXJlZCIsIk5BVElWRV9TWU1CT0wiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJ0b0ludGVnZXIiLCJtaW4iLCJhcmd1bWVudCIsIlN0cmluZyIsImZhaWxzIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJjbGFzc1RpbWVyIiwiZWxlbWVudCIsImZyb20iLCJ0byIsImZpbiIsInRpbWUiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJzZXRUaW1lb3V0Iiwic2hvd1NwaW5uZXIiLCJsZyIsImluc2VydEZpcnN0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwicmVtb3ZlU3Bpbm5lciIsInNwaW5uZXJzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImxlbmd0aCIsInJlbW92ZUNoaWxkIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImFkZENsYXNzZXMiLCJlbGVtZW50cyIsImNsYXNzZXMiLCJmb3JFYWNoIiwiY2wiLCJyZW1vdmVDbGFzc2VzIiwiaGlkZUVsZW1lbnRzIiwic3R5bGUiLCJkaXNwbGF5IiwiY2xlYXJJbm5lclRleHQiLCJpbm5lclRleHQiLCJjbGVhckNhbnZhcyIsImNhbnZhcyIsImdldENvbnRleHQiLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsImRpc2FibGVFbGVtZW50cyIsImRpc2FibGVkIiwiZW5hYmxlRWxlbWVudHMiLCJkaXNhYmxlRm9ybSIsImZvcm0iLCJlbmFibGVGb3JtIiwiY2xpZW50RG93bmxvYWRGaWxlIiwicmVzIiwiYSIsInVpbnQ4YXJyIiwiZmlsZSIsImRhdGEiLCJCbG9iIiwibmF2aWdhdG9yIiwibXNTYXZlT3JPcGVuQmxvYiIsImZpbGVuYW1lIiwidXJsIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiaHJlZiIsImRvd25sb2FkIiwiYm9keSIsImNsaWNrIiwicmV2b2tlT2JqZWN0VVJMIiwiY2xlYXJUYWJsZUdyb3VwcyIsInRhYmxlIiwidGJvZHkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNsZWFyVGFibGVSb3dzIiwiY2hpbGROb2RlcyIsImRpc3BsYXlUYWJsZUdyb3VwcyIsImxpc3QiLCJuZXh0RWxlbWVudCIsImRpc3BsYXlUYWJsZVJvd3MiLCJyZW1vdmVTb3J0Q2xhc3NlcyIsImluc2VydGlvblNvcnQiLCJqIiwiYXNjIiwic3BsaWNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImh0bWwiLCJjbGllbnRIZWlnaHQiLCJkaXNwbGF5UmV0dXJuVG9Ub3AiLCJnZXRFbGVtZW50QnlJZCIsIiQiLCJwb3BvdmVyIiwiSUU4X0RPTV9ERUZJTkUiLCJhbk9iamVjdCIsInRvUHJpbWl0aXZlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwib3B0aW9ucyIsInNvdXJjZSIsInRhcmdldCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0Iiwic2hhbSIsIkluZGV4ZWRPYmplY3QiLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwicHVzaCIsImNyZWF0ZU1ldGhvZCIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJ0aGF0Iiwic3BlY2lmaWNDcmVhdGUiLCJyZXN1bHQiLCJib3VuZEZ1bmN0aW9uIiwiaW5kZXgiLCJtYXAiLCJmaWx0ZXIiLCJzb21lIiwiZXZlcnkiLCJmaW5kIiwiZmluZEluZGV4IiwiaW5zcGVjdFNvdXJjZSIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJlbmZvcmNlIiwiVEVNUExBVEUiLCJzcGxpdCIsInVuc2FmZSIsInNpbXBsZSIsImpvaW4iLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInNldCIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJXZWFrTWFwIiwic3RvcmUiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsIlNUQVRFIiwiZ2V0dGVyRm9yIiwic3RhdGUiLCJ0eXBlIiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJwYXRoIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJhcmd1bWVudHMiLCJtYXgiLCJpbnRlZ2VyIiwiU1BFQ0lFUyIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIlMiLCJjb25zdHJ1Y3RvciIsIlRBRyIsInRvU3RyaW5nIiwic2xpY2UiLCJmbiIsImIiLCJhcHBseSIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsImNsYXNzb2ZSYXciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsImFQb3NzaWJsZVByb3RvdHlwZSIsInNldHRlciIsIkNPUlJFQ1RfU0VUVEVSIiwidGVzdCIsIkFycmF5IiwicHJvdG8iLCJfX3Byb3RvX18iLCJDb25zdHJ1Y3RvciIsIkl0ZXJhdG9ycyIsIklURVJBVE9SIiwidG9JbmRleGVkT2JqZWN0IiwiYWRkVG9VbnNjb3BhYmxlcyIsImRlZmluZUl0ZXJhdG9yIiwic2V0SW50ZXJuYWxTdGF0ZSIsIml0ZXJhdGVkIiwia2luZCIsImRvbmUiLCJBcmd1bWVudHMiLCJpbnB1dCIsIlBSRUZFUlJFRF9TVFJJTkciLCJ2YWwiLCJ2YWx1ZU9mIiwiYWN0aXZlWERvY3VtZW50IiwiZGVmaW5lUHJvcGVydGllcyIsImVudW1CdWdLZXlzIiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiSUVfUFJPVE8iLCJFbXB0eUNvbnN0cnVjdG9yIiwic2NyaXB0VGFnIiwiY29udGVudCIsIkxUIiwiTnVsbFByb3RvT2JqZWN0IiwiZG9tYWluIiwiQWN0aXZlWE9iamVjdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJGIiwiUHJvcGVydGllcyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJjb25jYXQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwia2V5cyIsImlkIiwicG9zdGZpeCIsInJhbmRvbSIsImNhY2hlIiwidGhyb3dlciIsIk1FVEhPRF9OQU1FIiwiQUNDRVNTT1JTIiwiYXJndW1lbnQwIiwiYXJndW1lbnQxIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwiaW5kZXhPZiIsIkVYSVNUUyIsImZ1bmN0aW9uVG9TdHJpbmciLCJBcnJheVByb3RvdHlwZSIsIkNPTlZFUlRfVE9fU1RSSU5HIiwicG9zIiwiZmlyc3QiLCJzZWNvbmQiLCJwb3NpdGlvbiIsInNpemUiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiY29kZUF0IiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIjEiLCJWIiwicHJvcGVydHlLZXkiLCJJU19QVVJFIiwidmVyc2lvbiIsImNvcHlyaWdodCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImlzQXJyYXkiLCJvcmlnaW5hbEFycmF5Iiwic3RyaW5nIiwicG9pbnQiLCJuYW1lcyIsIiRmb3JFYWNoIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsImFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoIiwiU1RSSUNUX01FVEhPRCIsIlVTRVNfVE9fTEVOR1RIIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJvYmplY3RLZXlzIiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsInNldFRvU3RyaW5nVGFnIiwiSXRlcmF0b3JzQ29yZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiZW50cmllcyIsInZhbHVlcyIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCJyZWRlZmluZUFsbCIsImFuSW5zdGFuY2UiLCJ0b0luZGV4IiwiSUVFRTc1NCIsImFycmF5RmlsbCIsIk5hdGl2ZUFycmF5QnVmZmVyIiwiJEFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiJERhdGFWaWV3UHJvdG90eXBlIiwiUmFuZ2VFcnJvciIsInBhY2tJRUVFNzU0IiwicGFjayIsInVucGFja0lFRUU3NTQiLCJ1bnBhY2siLCJwYWNrSW50OCIsIm51bWJlciIsInBhY2tJbnQxNiIsInBhY2tJbnQzMiIsInVucGFja0ludDMyIiwiYnVmZmVyIiwicGFja0Zsb2F0MzIiLCJwYWNrRmxvYXQ2NCIsImFkZEdldHRlciIsInZpZXciLCJjb3VudCIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJieXRlTGVuZ3RoIiwiYnl0ZXMiLCJzdGFydCIsImJ5dGVPZmZzZXQiLCJyZXZlcnNlIiwiY29udmVyc2lvbiIsIk5hTiIsIkFycmF5QnVmZmVyUHJvdG90eXBlIiwidGVzdFZpZXciLCJuYXRpdmVTZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsIm9mZnNldCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwiQXJyYXlCdWZmZXIiLCJEYXRhVmlldyIsImFyZ3VtZW50c0xlbmd0aCIsImVuZCIsImVuZFBvcyIsInRvUG9zaXRpdmVJbnRlZ2VyIiwiQllURVMiLCJJU19SSUdIVCIsIm1lbW8iLCJsZWZ0IiwicmlnaHQiLCJzZWFyY2hQYXJhbXMiLCJwYXRobmFtZSIsInRvSlNPTiIsInNvcnQiLCJVUkxTZWFyY2hQYXJhbXMiLCJ1c2VybmFtZSIsImhvc3QiLCJoYXNoIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJtYXRjaCIsInVzZXJBZ2VudCIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsInY4IiwicmVwbGFjZW1lbnQiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwibm9ybWFsaXplIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJnZXRCdWlsdEluIiwiQ09OU1RSVUNUT1JfTkFNRSIsIml0ZXJhdG9yIiwiRU5UUklFUyIsInJldHVybk1ldGhvZCIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJJU19JT1MiLCJsb2NhdGlvbiIsInNldEltbWVkaWF0ZSIsImNsZWFyIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwicnVubmVyIiwibGlzdGVuZXIiLCJldmVudCIsInBvc3QiLCJwb3N0TWVzc2FnZSIsInByb3RvY29sIiwiYXJncyIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJQcm9taXNlQ2FwYWJpbGl0eSIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJET01JdGVyYWJsZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsImFyZyIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJQcm9taXNlV3JhcHBlciIsIm5hdGl2ZVRoZW4iLCJOYXRpdmVQcm9taXNlIiwic2V0U3BlY2llcyIsIml0ZXJhdGUiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJ0YXNrIiwibWljcm90YXNrIiwicHJvbWlzZVJlc29sdmUiLCJob3N0UmVwb3J0RXJyb3JzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiVjhfVkVSU0lPTiIsIlBST01JU0UiLCJnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSIsIlByb21pc2VDb25zdHJ1Y3RvciIsIiRmZXRjaCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiSVNfTk9ERSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiRmFrZVByb21pc2UiLCJ0aGVuIiwiSU5DT1JSRUNUX0lURVJBVElPTiIsIml0ZXJhYmxlIiwiYWxsIiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJjaGFpbiIsInJlYWN0aW9ucyIsIm9rIiwiZXhpdGVkIiwicmVhY3Rpb24iLCJoYW5kbGVyIiwiZmFpbCIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiZW50ZXIiLCJleGl0Iiwib25VbmhhbmRsZWQiLCJyZWFzb24iLCJpbml0RXZlbnQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJwYXJlbnQiLCJ1bndyYXAiLCJpbnRlcm5hbFJlamVjdCIsImludGVybmFsUmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImZldGNoIiwid3JhcCIsIlByb21pc2UiLCJjYXBhYmlsaXR5IiwieCIsIiRwcm9taXNlUmVzb2x2ZSIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiYXJyYXkiLCJmb28iLCJCb29sZWFuIiwiQXJyYXlCdWZmZXJNb2R1bGUiLCJuYXRpdmVBcnJheUJ1ZmZlclNsaWNlIiwidmlld1NvdXJjZSIsInZpZXdUYXJnZXQiLCJjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IiLCJpbml0IiwiQXJyYXlCdWZmZXJWaWV3Q29yZSIsIiRjb3B5V2l0aGluIiwiJGV2ZXJ5IiwiJGZpbGwiLCIkZmlsdGVyIiwiJGZpbmQiLCJwcmVkaWNhdGUiLCIkZmluZEluZGV4IiwiJGluY2x1ZGVzIiwic2VhcmNoRWxlbWVudCIsIiRpbmRleE9mIiwiQXJyYXlJdGVyYXRvcnMiLCJhcnJheVZhbHVlcyIsImFycmF5S2V5cyIsImFycmF5RW50cmllcyIsIm5hdGl2ZVR5cGVkQXJyYXlJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwidHlwZWRBcnJheVZhbHVlcyIsIiRqb2luIiwic2VwYXJhdG9yIiwiJGxhc3RJbmRleE9mIiwiJG1hcCIsIm1hcGZuIiwiJHJlZHVjZSIsIiRyZWR1Y2VSaWdodCIsIm1pZGRsZSIsInRvT2Zmc2V0IiwiYXJyYXlMaWtlIiwibGVuIiwiJHNsaWNlIiwiJHNvbWUiLCIkc29ydCIsImNvbXBhcmVmbiIsImJlZ2luIiwiYmVnaW5JbmRleCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJUT19MT0NBTEVfU1RSSU5HX0JVRyIsIlVpbnQ4QXJyYXlQcm90b3R5cGUiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlKb2luIiwiSVNfTk9UX0FSUkFZX01FVEhPRCIsImciLCJlIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiQXJyYXlWYWx1ZXMiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiY3JlYXRlUHJvcGVydHkiLCJnZXRJdGVyYXRvck1ldGhvZCIsInN0ZXAiLCJtYXBwaW5nIiwiaXRlcmF0b3JNZXRob2QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsIkVycm9yIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwib2JqIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW52b2tlIiwiX19hd2FpdCIsInVud3JhcHBlZCIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIlVOU0NPUEFCTEVTIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIkhBU19TUEVDSUVTX1NVUFBPUlQiLCIwIiwiZGVsZXRlQ291bnQiLCJpbnNlcnRDb3VudCIsImFjdHVhbERlbGV0ZUNvdW50IiwiQSIsImsiLCJhY3R1YWxTdGFydCIsImFicyIsInBvdyIsIkxOMiIsIm1hbnRpc3NhTGVuZ3RoIiwiZXhwb25lbnQiLCJtYW50aXNzYSIsImV4cG9uZW50TGVuZ3RoIiwiZU1heCIsImVCaWFzIiwicnQiLCJzaWduIiwibkJpdHMiLCJUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTIiwidHlwZWRBcnJheUZyb20iLCJpbmhlcml0SWZSZXF1aXJlZCIsInJvdW5kIiwiZnJvbUxpc3QiLCJpc0FycmF5QnVmZmVyIiwiaXNUeXBlZEFycmF5SW5kZXgiLCJ3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JhcHBlZERlZmluZVByb3BlcnR5IiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIk5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSIsImV4cG9ydGVkIiwiYWRkRWxlbWVudCIsImR1bW15IiwidHlwZWRBcnJheU9mZnNldCIsIiRsZW5ndGgiLCIkbGVuIiwiV3JhcHBlciIsIk5ld1RhcmdldCIsIk5ld1RhcmdldFByb3RvdHlwZSIsImNvcHlXaXRoaW4iLCJpbmMiLCJuYXRpdmVMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIkVPRiIsIlVTRV9OQVRJVkVfVVJMIiwiYXNzaWduIiwiYXJyYXlGcm9tIiwidG9BU0NJSSIsIlVSTFNlYXJjaFBhcmFtc01vZHVsZSIsIk5hdGl2ZVVSTCIsImdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUiLCJnZXRTdGF0ZSIsImdldEludGVybmFsVVJMU3RhdGUiLCJBTFBIQSIsIkFMUEhBTlVNRVJJQyIsIkRJR0lUIiwiSEVYX1NUQVJUIiwiT0NUIiwiREVDIiwiSEVYIiwiRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQiLCJMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFIiwiVEFCX0FORF9ORVdfTElORSIsInBhcnNlSG9zdCIsImNvZGVQb2ludHMiLCJwYXJzZUlQdjYiLCJpc1NwZWNpYWwiLCJwYXJzZUlQdjQiLCJwZXJjZW50RW5jb2RlIiwiQzBDb250cm9sUGVyY2VudEVuY29kZVNldCIsInBhcnRzTGVuZ3RoIiwibnVtYmVycyIsInBhcnQiLCJyYWRpeCIsImlwdjQiLCJwYXJ0cyIsInBhcnNlSW50IiwibnVtYmVyc1NlZW4iLCJpcHY0UGllY2UiLCJzd2FwcyIsInN3YXAiLCJhZGRyZXNzIiwicGllY2VJbmRleCIsImNvbXByZXNzIiwicG9pbnRlciIsImNoYXIiLCJzZXJpYWxpemVIb3N0IiwiaWdub3JlMCIsInVuc2hpZnQiLCJpcHY2IiwibWF4SW5kZXgiLCJtYXhMZW5ndGgiLCJjdXJyU3RhcnQiLCJjdXJyTGVuZ3RoIiwiZmluZExvbmdlc3RaZXJvU2VxdWVuY2UiLCJmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQiLCJwYXRoUGVyY2VudEVuY29kZVNldCIsInVzZXJpbmZvUGVyY2VudEVuY29kZVNldCIsImNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzcGVjaWFsU2NoZW1lcyIsImZ0cCIsImh0dHAiLCJodHRwcyIsIndzIiwid3NzIiwic2NoZW1lIiwiaW5jbHVkZXNDcmVkZW50aWFscyIsInBhc3N3b3JkIiwiY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0IiwiY2Fubm90QmVBQmFzZVVSTCIsImlzV2luZG93c0RyaXZlTGV0dGVyIiwibm9ybWFsaXplZCIsInN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIiLCJ0aGlyZCIsInNob3J0ZW5VUkxzUGF0aCIsInBhdGhTaXplIiwiaXNTaW5nbGVEb3QiLCJzZWdtZW50IiwiU0NIRU1FX1NUQVJUIiwiU0NIRU1FIiwiTk9fU0NIRU1FIiwiU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFkiLCJQQVRIX09SX0FVVEhPUklUWSIsIlJFTEFUSVZFIiwiUkVMQVRJVkVfU0xBU0giLCJTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTIiwiU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVMiLCJBVVRIT1JJVFkiLCJIT1NUIiwiSE9TVE5BTUUiLCJQT1JUIiwiRklMRSIsIkZJTEVfU0xBU0giLCJGSUxFX0hPU1QiLCJQQVRIX1NUQVJUIiwiUEFUSCIsIkNBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEgiLCJRVUVSWSIsIkZSQUdNRU5UIiwicGFyc2VVUkwiLCJzdGF0ZU92ZXJyaWRlIiwiYmFzZSIsImJ1ZmZlckNvZGVQb2ludHMiLCJmYWlsdXJlIiwic2VlbkF0Iiwic2VlbkJyYWNrZXQiLCJzZWVuUGFzc3dvcmRUb2tlbiIsInF1ZXJ5IiwiZnJhZ21lbnQiLCJjb2RlUG9pbnQiLCJlbmNvZGVkQ29kZVBvaW50cyIsInNoaWZ0IiwiVVJMQ29uc3RydWN0b3IiLCJiYXNlU3RhdGUiLCJ1cmxTdHJpbmciLCJzZWFyY2hQYXJhbXNTdGF0ZSIsInVwZGF0ZVNlYXJjaFBhcmFtcyIsInVwZGF0ZVVSTCIsInNlcmlhbGl6ZVVSTCIsIm9yaWdpbiIsImdldE9yaWdpbiIsImdldFByb3RvY29sIiwiZ2V0VXNlcm5hbWUiLCJnZXRQYXNzd29yZCIsImdldEhvc3QiLCJob3N0bmFtZSIsImdldEhvc3RuYW1lIiwiZ2V0UG9ydCIsImdldFBhdGhuYW1lIiwic2VhcmNoIiwiZ2V0U2VhcmNoIiwiZ2V0U2VhcmNoUGFyYW1zIiwiZ2V0SGFzaCIsIlVSTFByb3RvdHlwZSIsIm91dHB1dCIsImFjY2Vzc29yRGVzY3JpcHRvciIsIm5hdGl2ZUNyZWF0ZU9iamVjdFVSTCIsIm5hdGl2ZVJldm9rZU9iamVjdFVSTCIsImJsb2IiLCJuYXRpdmVBc3NpZ24iLCJCIiwic3ltYm9sIiwiY2hyIiwiVCIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJPVkVSRkxPV19FUlJPUiIsInN0cmluZ0Zyb21DaGFyQ29kZSIsImZyb21DaGFyQ29kZSIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiYWRhcHQiLCJkZWx0YSIsIm51bVBvaW50cyIsImZpcnN0VGltZSIsImJhc2VNaW51c1RNaW4iLCJlbmNvZGUiLCJjdXJyZW50VmFsdWUiLCJpbnB1dExlbmd0aCIsImV4dHJhIiwidWNzMmRlY29kZSIsImJpYXMiLCJiYXNpY0xlbmd0aCIsImhhbmRsZWRDUENvdW50IiwiaGFuZGxlZENQQ291bnRQbHVzT25lIiwicSIsInFNaW51c1QiLCJiYXNlTWludXNUIiwibGFiZWwiLCJlbmNvZGVkIiwibGFiZWxzIiwiZ2V0SXRlcmF0b3IiLCJIZWFkZXJzIiwiZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSIsImdldEludGVybmFsSXRlcmF0b3JTdGF0ZSIsIlVSTF9TRUFSQ0hfUEFSQU1TIiwicGx1cyIsInNlcXVlbmNlcyIsInBlcmNlbnRTZXF1ZW5jZSIsIlJlZ0V4cCIsInBlcmNlbnREZWNvZGUiLCJzZXF1ZW5jZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImRlc2VyaWFsaXplIiwicmVwbGFjZXIiLCJzZXJpYWxpemUiLCJwYXJzZVNlYXJjaFBhcmFtcyIsImF0dHJpYnV0ZSIsImF0dHJpYnV0ZXMiLCJ2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCIsInBhc3NlZCIsInJlcXVpcmVkIiwiVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IiLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciIsImVudHJ5SXRlcmF0b3IiLCJlbnRyeU5leHQiLCJVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUiLCJhcHBlbmQiLCJnZXRBbGwiLCJmb3VuZCIsImVudHJpZXNJbmRleCIsInNsaWNlSW5kZXgiLCJjYWxsYmFjayIsImhlYWRlcnMiLCJwcm9taXNlQ2FwYWJpbGl0eSIsInN1cHBvcnQiLCJ2aWV3Q2xhc3NlcyIsImlzQXJyYXlCdWZmZXJWaWV3Iiwibm9ybWFsaXplTmFtZSIsIm5vcm1hbGl6ZVZhbHVlIiwiaXRlcmF0b3JGb3IiLCJpdGVtcyIsImhlYWRlciIsImNvbnN1bWVkIiwiYm9keVVzZWQiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJvbmxvYWQiLCJvbmVycm9yIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJidWYiLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlamVjdGVkIiwiYXJyYXlCdWZmZXIiLCJ0ZXh0IiwicmVhZEFzVGV4dCIsImNoYXJzIiwicmVhZEFycmF5QnVmZmVyQXNUZXh0IiwiZm9ybURhdGEiLCJkZWNvZGUiLCJqc29uIiwiSlNPTiIsInBhcnNlIiwib2xkVmFsdWUiLCJ0aGlzQXJnIiwiUmVxdWVzdCIsInVwY2FzZWQiLCJjcmVkZW50aWFscyIsInNpZ25hbCIsInRvVXBwZXJDYXNlIiwicmVmZXJyZXIiLCJ0cmltIiwiUmVzcG9uc2UiLCJib2R5SW5pdCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJjbG9uZSIsInJlc3BvbnNlIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiRE9NRXhjZXB0aW9uIiwibWVzc2FnZSIsInN0YWNrIiwicmVxdWVzdCIsImFib3J0ZWQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0WGhyIiwiYWJvcnQiLCJyYXdIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibGluZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VUZXh0Iiwib250aW1lb3V0Iiwib25hYm9ydCIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNlbmQiLCJwb2x5ZmlsbCIsIlJlc3VsdCIsInN0b3BwZWQiLCJBU19FTlRSSUVTIiwiSVNfSVRFUkFUT1IiLCJpdGVyRm4iLCJmbHVzaCIsImhlYWQiLCJsYXN0IiwidG9nZ2xlIiwibm9kZSIsIm1hY3JvdGFzayIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yIiwicXVldWVNaWNyb3Rhc2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJzdGlja3lIZWxwZXJzIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsImxhc3RJbmRleCIsIlVOU1VQUE9SVEVEX1kiLCJCUk9LRU5fQ0FSRVQiLCJOUENHX0lOQ0xVREVEIiwic3RyIiwicmVDb3B5IiwicmUiLCJzdGlja3kiLCJmbGFncyIsImNoYXJzQWRkZWQiLCJzdHJDb3B5IiwibXVsdGlsaW5lIiwiaWdub3JlQ2FzZSIsImRvdEFsbCIsInVuaWNvZGUiLCJSRSIsImZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIk1BVENIIiwibmF0aXZlTWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyZWdleHAiLCJtYXRjaGVyIiwicngiLCJmdWxsVW5pY29kZSIsIm1hdGNoU3RyIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwiZ3JvdXBzIiwiUkVQTEFDRV9LRUVQU18kMCIsIlJFUExBQ0UiLCJSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJuYXRpdmVNZXRob2QiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJzdHJpbmdNZXRob2QiLCJyZWdleE1ldGhvZCIsIlIiLCJzdWJtaXRQYXNzd29yZCIsIm9sZFBhc3N3b3JkIiwibmV3UGFzc3dvcmQiLCJuZXdQYXNzd29yZFJlIiwic3RyaW5naWZ5IiwicmVzcCIsInV0aWxpdHkiLCJhYSIsImludmFsaWRQYXNzd29yZFNlcnZlciIsInVwZGF0ZVJlZ2V4VmFsaWRhdGlvbk1hcmtzIiwiZmllbGQiLCJhcnIiLCJzdWJtaXQiLCJ2YWxpZFBhc3N3b3JkIiwicmVnZXgiLCJ1cGRhdGVMZW5ndGhWYWxpZGF0aW9uTWFyayIsInJlcSIsIm1pbkxlbmd0aCIsImxvd2VyQ2FzZSIsInVwcGVyQ2FzZSIsInNwZWNpYWwiLCJwYXNzd29yZFVwZGF0ZWQiLCJpbnZhbGlkTmV3UGFzc3dvcmQiLCJpbnZhbGlkTWVzc2FnZSIsImludmFsaWROZXdQYXNzd29yZFJlIiwiaW52YWxpZE9sZFBhc3N3b3JkIiwicHJldmVudERlZmF1bHQiLCJwd2QiLCJwd2RNYXRjaCIsIm9sZFB3ZCIsImdldEF0dHJpYnV0ZSIsInVwZGF0ZVBhc3N3b3JkIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIs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N0I2aEMsRUFBSUcsYUFBYSxTQUNqQkQsRUFBT3ZtQyxhQUFhLE9BQVEsUUFDNUJxbUMsRUFBSXJtQyxhQUFhLE9BQVEsUUFDekJzbUMsRUFBU3RtQyxhQUFhLE9BQVEsUUFDOUJoRCxLQUFLc0UsVUFBWSxrQkFHakJpbEMsRUFBT3ZtQyxhQUFhLE9BQVEsWUFDNUJxbUMsRUFBSXJtQyxhQUFhLE9BQVEsWUFDekJzbUMsRUFBU3RtQyxhQUFhLE9BQVEsWUFDOUJoRCxLQUFLc0UsVUFBWSxvQkFLekJ4QixTQUFTMEUsZUFBZSxxQkFBcUJKLGlCQUFpQixTQUFTLFNBQUE2Z0IsR0FDbkVBLEVBQUVtaEIsaUJBQ0ViLEdBQWMsSSxtQ0FBT2tCLE1BRzdCM21DLFNBQVMwRSxlQUFlLGVBQWVKLGlCQUFpQixTQUFTLFdBQ3BFbWhDIiwiZmlsZSI6ImFjY291bnQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvanMvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxNzIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5hdGl2ZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBJbnQ4QXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXkgJiYgSW50OEFycmF5LnByb3RvdHlwZTtcbnZhciBVaW50OENsYW1wZWRBcnJheSA9IGdsb2JhbC5VaW50OENsYW1wZWRBcnJheTtcbnZhciBVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSA9IFVpbnQ4Q2xhbXBlZEFycmF5ICYmIFVpbnQ4Q2xhbXBlZEFycmF5LnByb3RvdHlwZTtcbnZhciBUeXBlZEFycmF5ID0gSW50OEFycmF5ICYmIGdldFByb3RvdHlwZU9mKEludDhBcnJheSk7XG52YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IEludDhBcnJheVByb3RvdHlwZSAmJiBnZXRQcm90b3R5cGVPZihJbnQ4QXJyYXlQcm90b3R5cGUpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgaXNQcm90b3R5cGVPZiA9IE9iamVjdFByb3RvdHlwZS5pc1Byb3RvdHlwZU9mO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBUWVBFRF9BUlJBWV9UQUcgPSB1aWQoJ1RZUEVEX0FSUkFZX1RBRycpO1xuLy8gRml4aW5nIG5hdGl2ZSB0eXBlZCBhcnJheXMgaW4gT3BlcmEgUHJlc3RvIGNyYXNoZXMgdGhlIGJyb3dzZXIsIHNlZSAjNTk1XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IE5BVElWRV9BUlJBWV9CVUZGRVIgJiYgISFzZXRQcm90b3R5cGVPZiAmJiBjbGFzc29mKGdsb2JhbC5vcGVyYSkgIT09ICdPcGVyYSc7XG52YXIgVFlQRURfQVJSQVlfVEFHX1JFUUlSRUQgPSBmYWxzZTtcbnZhciBOQU1FO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QgPSB7XG4gIEludDhBcnJheTogMSxcbiAgVWludDhBcnJheTogMSxcbiAgVWludDhDbGFtcGVkQXJyYXk6IDEsXG4gIEludDE2QXJyYXk6IDIsXG4gIFVpbnQxNkFycmF5OiAyLFxuICBJbnQzMkFycmF5OiA0LFxuICBVaW50MzJBcnJheTogNCxcbiAgRmxvYXQzMkFycmF5OiA0LFxuICBGbG9hdDY0QXJyYXk6IDhcbn07XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgdmFyIGtsYXNzID0gY2xhc3NvZihpdCk7XG4gIHJldHVybiBrbGFzcyA9PT0gJ0RhdGFWaWV3JyB8fCBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKTtcbn07XG5cbnZhciBpc1R5cGVkQXJyYXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGNsYXNzb2YoaXQpKTtcbn07XG5cbnZhciBhVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNUeXBlZEFycmF5KGl0KSkgcmV0dXJuIGl0O1xuICB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgYSB0eXBlZCBhcnJheScpO1xufTtcblxudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoQykge1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICBpZiAoaXNQcm90b3R5cGVPZi5jYWxsKFR5cGVkQXJyYXksIEMpKSByZXR1cm4gQztcbiAgfSBlbHNlIGZvciAodmFyIEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSBpZiAoaGFzKFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBOQU1FKSkge1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgKEMgPT09IFR5cGVkQXJyYXlDb25zdHJ1Y3RvciB8fCBpc1Byb3RvdHlwZU9mLmNhbGwoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBDKSkpIHtcbiAgICAgIHJldHVybiBDO1xuICAgIH1cbiAgfSB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvcicpO1xufTtcblxudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBmdW5jdGlvbiAoS0VZLCBwcm9wZXJ0eSwgZm9yY2VkKSB7XG4gIGlmICghREVTQ1JJUFRPUlMpIHJldHVybjtcbiAgaWYgKGZvcmNlZCkgZm9yICh2YXIgQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlLCBLRVkpKSB7XG4gICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZVtLRVldO1xuICAgIH1cbiAgfVxuICBpZiAoIVR5cGVkQXJyYXlQcm90b3R5cGVbS0VZXSB8fCBmb3JjZWQpIHtcbiAgICByZWRlZmluZShUeXBlZEFycmF5UHJvdG90eXBlLCBLRVksIGZvcmNlZCA/IHByb3BlcnR5XG4gICAgICA6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgSW50OEFycmF5UHJvdG90eXBlW0tFWV0gfHwgcHJvcGVydHkpO1xuICB9XG59O1xuXG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IGZ1bmN0aW9uIChLRVksIHByb3BlcnR5LCBmb3JjZWQpIHtcbiAgdmFyIEFSUkFZLCBUeXBlZEFycmF5Q29uc3RydWN0b3I7XG4gIGlmICghREVTQ1JJUFRPUlMpIHJldHVybjtcbiAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgaWYgKGZvcmNlZCkgZm9yIChBUlJBWSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgaGFzKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgS0VZKSkge1xuICAgICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yW0tFWV07XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghVHlwZWRBcnJheVtLRVldIHx8IGZvcmNlZCkge1xuICAgICAgLy8gVjggfiBDaHJvbWUgNDktNTAgYCVUeXBlZEFycmF5JWAgbWV0aG9kcyBhcmUgbm9uLXdyaXRhYmxlIG5vbi1jb25maWd1cmFibGVcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZWRlZmluZShUeXBlZEFycmF5LCBLRVksIGZvcmNlZCA/IHByb3BlcnR5IDogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBJbnQ4QXJyYXlbS0VZXSB8fCBwcm9wZXJ0eSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfSBlbHNlIHJldHVybjtcbiAgfVxuICBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmICghVHlwZWRBcnJheUNvbnN0cnVjdG9yW0tFWV0gfHwgZm9yY2VkKSkge1xuICAgICAgcmVkZWZpbmUoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBLRVksIHByb3BlcnR5KTtcbiAgICB9XG4gIH1cbn07XG5cbmZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICBpZiAoIWdsb2JhbFtOQU1FXSkgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IGZhbHNlO1xufVxuXG4vLyBXZWJLaXQgYnVnIC0gdHlwZWQgYXJyYXlzIGNvbnN0cnVjdG9ycyBwcm90b3R5cGUgaXMgT2JqZWN0LnByb3RvdHlwZVxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8IHR5cGVvZiBUeXBlZEFycmF5ICE9ICdmdW5jdGlvbicgfHwgVHlwZWRBcnJheSA9PT0gRnVuY3Rpb24ucHJvdG90eXBlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgVHlwZWRBcnJheSA9IGZ1bmN0aW9uIFR5cGVkQXJyYXkoKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xuICB9O1xuICBpZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykgZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgaWYgKGdsb2JhbFtOQU1FXSkgc2V0UHJvdG90eXBlT2YoZ2xvYmFsW05BTUVdLCBUeXBlZEFycmF5KTtcbiAgfVxufVxuXG5pZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgIVR5cGVkQXJyYXlQcm90b3R5cGUgfHwgVHlwZWRBcnJheVByb3RvdHlwZSA9PT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5LnByb3RvdHlwZTtcbiAgaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIGlmIChnbG9iYWxbTkFNRV0pIHNldFByb3RvdHlwZU9mKGdsb2JhbFtOQU1FXS5wcm90b3R5cGUsIFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICB9XG59XG5cbi8vIFdlYktpdCBidWcgLSBvbmUgbW9yZSBvYmplY3QgaW4gVWludDhDbGFtcGVkQXJyYXkgcHJvdG90eXBlIGNoYWluXG5pZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBnZXRQcm90b3R5cGVPZihVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSkgIT09IFR5cGVkQXJyYXlQcm90b3R5cGUpIHtcbiAgc2V0UHJvdG90eXBlT2YoVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUsIFR5cGVkQXJyYXlQcm90b3R5cGUpO1xufVxuXG5pZiAoREVTQ1JJUFRPUlMgJiYgIWhhcyhUeXBlZEFycmF5UHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICBUWVBFRF9BUlJBWV9UQUdfUkVRSVJFRCA9IHRydWU7XG4gIGRlZmluZVByb3BlcnR5KFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRoaXMpID8gdGhpc1tUWVBFRF9BUlJBWV9UQUddIDogdW5kZWZpbmVkO1xuICB9IH0pO1xuICBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIGlmIChnbG9iYWxbTkFNRV0pIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsW05BTUVdLCBUWVBFRF9BUlJBWV9UQUcsIE5BTUUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTLFxuICBUWVBFRF9BUlJBWV9UQUc6IFRZUEVEX0FSUkFZX1RBR19SRVFJUkVEICYmIFRZUEVEX0FSUkFZX1RBRyxcbiAgYVR5cGVkQXJyYXk6IGFUeXBlZEFycmF5LFxuICBhVHlwZWRBcnJheUNvbnN0cnVjdG9yOiBhVHlwZWRBcnJheUNvbnN0cnVjdG9yLFxuICBleHBvcnRUeXBlZEFycmF5TWV0aG9kOiBleHBvcnRUeXBlZEFycmF5TWV0aG9kLFxuICBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kOiBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kLFxuICBpc1ZpZXc6IGlzVmlldyxcbiAgaXNUeXBlZEFycmF5OiBpc1R5cGVkQXJyYXksXG4gIFR5cGVkQXJyYXk6IFR5cGVkQXJyYXksXG4gIFR5cGVkQXJyYXlQcm90b3R5cGU6IFR5cGVkQXJyYXlQcm90b3R5cGVcbn07XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXMoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkge1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgZWxzZSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgZGlzcGxheVJldHVyblRvVG9wKCk7XG5cbiAgICBpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnJvd3Nlcldhcm5pbmcnKSl7XG5cdC8vaW5pdGlhbGl6ZSBwb3BvdmVyIHdpdGggYnJvd3NlciBsaXN0XG5cdCQoJyNicm93c2VyTGlzdFBvcG92ZXInKS5wb3BvdmVyKHtodG1sOiB0cnVlfSk7XG4gICAgfVxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBoaWRkZW5UaW1lcihlbGVtZW50LCB0aW1lID0gNTAwMCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBlbGVtZW50LmhpZGRlbiA9IHRydWU7XG4gICAgfSwgdGltZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGFzc1RpbWVyKGVsZW1lbnQsIGZyb20sIHRvLCBmaW4sIHRpbWUgPSBudWxsKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGZyb20pO1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0byk7XG5cbiAgICBpZiAodGltZSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0byk7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoZmluKTtcbiAgICAgICAgfSwgdGltZSlcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93U3Bpbm5lcihlbGVtZW50LCBsZyA9ICcnLCBpbnNlcnRGaXJzdCA9IGZhbHNlKSB7XG4gICAgbGV0IGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gICAgaS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgYGZhIGZhLXNwaW5uZXIgZmEtc3BpbiBzcGlubmVyJHtsZ31gKTtcbiAgICBpZiAoaW5zZXJ0Rmlyc3QgJiYgZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKGksIGVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVNwaW5uZXIoZWxlbWVudCwgbGcgPSAnJykge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBzcGlubmVycyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShgZmEgZmEtc3Bpbm5lciBmYS1zcGluIHNwaW5uZXIke2xnfWApO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Bpbm5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoc3Bpbm5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJObyBzcGlubmVyIHRvIHJlbW92ZVwiKTtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICB9XG59XG5cbi8qIG5hbWU6IHNob3dQb3BvdmVyXG4gICBwcmVjb25kaXRpb25zOiBlbCBpcyBhIGpxdWVyeSBvYmplY3QgY29udGFpbmluZyB0aGUgZWxlbWVudCBvbiB3aGljaCB0byBzaG93IHBvcG92ZXJcbiAgIHBvc3Rjb25kaXRpb25zOiBwb3BvdmVyIHdpdGggYm9yZGVyQ29sb3Igc2hvd24gZm9yIHRpbWUgbWlsbGlzZWNvbmRzXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3dQb3BvdmVyKGVsLCB0aW1lID0gNTAwMCwgYm9yZGVyQ29sb3IgPSAncmdiYSgwLCAwLCAwLCAwLjInKSB7XG4gICAgJCgnLnBvcG92ZXInKS5jc3MoJ2JvcmRlci1jb2xvcicsIGJvcmRlckNvbG9yKTtcbiAgICBlbC5wb3BvdmVyKCdzaG93Jyk7XG4gICAgc2V0VGltZW91dCgocG9wZWwpID0+IHtcbiAgICAgICAgcG9wZWwucG9wb3ZlcignZGlzcG9zZScpO1xuICAgIH0sIHRpbWUsIGVsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEVycm9yQm9yZGVyKGVsLCB0aW1lID0gNTAwMCkge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2Vycm9yQm9yZGVyJyk7XG4gICAgc2V0VGltZW91dChlbCA9PiB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2Vycm9yQm9yZGVyJyk7XG4gICAgfSwgdGltZSwgZWwpXG59XG5cbi8qIG5hbWU6IHNjcm9sbFNhdmVcbiAgIHByZWNvbmRpdGlvbnM6IGFyciBpcyBhbiBhcnJheSBvZiBlbGVtZW50cyBmb3Igd2hpY2ggd2Ugd2FudCB0byBzYXZlIHRoZSBzY3JvbGwgeC95IHZhbHVlc1xuICAgcG9zdGNvbmRpdGlvbnM6IHJldHVybiBhbiBhcnJheSBvZiBvYmplY3RzIHRoYXQgY29udGFpbnMgcmVmZXJlbmNlcyB0byBlYWNoIGVsZW1lbnQgYWxvbmdcbiAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBzYXZlZCBzY3JvbGwgeC95IHZhbHVlcy5cbiovXG5leHBvcnQgZnVuY3Rpb24gc2Nyb2xsU2F2ZShhcnIpIHtcbiAgICB2YXIgY29udGV4dCA9IFtdXG4gICAgYXJyLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBjb250ZXh0LnB1c2goe1xuICAgICAgICAgICAgZWxlbWVudDogZWwsXG4gICAgICAgICAgICBzY3JvbGxZOiBlbC5zY3JvbGxUb3AsXG4gICAgICAgICAgICBzY3JvbGxYOiBlbC5zY3JvbGxMZWZ0XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBjb250ZXh0O1xufVxuXG4vKiBuYW1lOiBzY3JvbGxSZXN0b3JlXG4gICBwcmVjb25kaXRpb25zOiBhcnIgaXMgYXJyYXkgb2Ygb2JqZWN0cy4gRWFjaCBvYmplY3Qgc2hvdWxkIGJlIG9mIGZvcm1hdDpcbiAgICAgICAgICAgICAgICAgICAge2VsZW1lbnQ6IGVsZW1lbnQsIHNjcm9sbFk6IHNjcm9sbFksIHNjcm9sbFg6IHNjcm9sbFh9LiBCZXN0IHdoZW5cblx0XHQgICAgdXNlZCBpbiBjb21iaW5hdGlvbiB3aWh0IHNjcm9sbFNhdmVcbiAgIHBvc3Rjb25kaXRpb25zOiBzY3JvbGwgeC95IHZhbHVlcyB1cGRhdGVkIGZvciBhbGwgZWxlbWVudHMgaW4gYXJyXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbFJlc3RvcmUoYXJyKSB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2h0bWwnKVswXS5zdHlsZS5zY3JvbGxCZWhhdmlvciA9IFwiYXV0b1wiO1xuICAgIGFyci5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgZWwuZWxlbWVudC5zY3JvbGxUbyhlbC5zY3JvbGxYLCBlbC5zY3JvbGxZKTtcbiAgICB9KVxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdodG1sJylbMF0uc3R5bGUuc2Nyb2xsQmVoYXZpb3IgPSBcInNtb290aFwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQ2xhc3NlcyhlbGVtZW50cywgY2xhc3Nlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2xhc3Nlcy5mb3JFYWNoKGNsID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnRzW2ldLmNsYXNzTGlzdC5hZGQoY2wpO1xuICAgICAgICB9KVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKGVsZW1lbnRzLCBjbGFzc2VzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbGFzc2VzLmZvckVhY2goY2wgPT4ge1xuICAgICAgICAgICAgZWxlbWVudHNbaV0uY2xhc3NMaXN0LnJlbW92ZShjbCk7XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGlkZUVsZW1lbnRzKGVsZW1lbnRzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbGVtZW50c1tpXS5zdHlsZS5kaXNwbGF5PSAnbm9uZSc7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJJbm5lclRleHQoZWxlbWVudHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsZW1lbnRzW2ldLmlubmVyVGV4dCA9ICcnO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyQ2FudmFzKGNhbnZhcykge1xuICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBjYW52YXMuY2xhc3NMaXN0LnJlbW92ZSgnbGlnaHQtYm9yZGVyJyk7XG4gICAgY2FudmFzLmhlaWdodCA9ICcxcmVtJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5UmV0dXJuVG9Ub3AoKSB7XG4gICAgbGV0IGh0bWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdO1xuICAgIGxldCBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcblxuICAgIGlmIChodG1sLmNsaWVudEhlaWdodCArIDEwMCA8IGJvZHkuY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgIGxldCBydHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd1c2EtZm9vdGVyX19yZXR1cm4tdG8tdG9wJylbMF07XG4gICAgICAgIHJ0dC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlRWxlbWVudHMoZWxlbWVudHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsZW1lbnRzW2ldLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlRWxlbWVudHMoZWxlbWVudHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsZW1lbnRzW2ldLmRpc2FibGVkID0gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGRpc2FibGVGb3JtKGZvcm0pIHtcbiAgICB2YXIgZWxlbWVudHMgPSBmb3JtLmVsZW1lbnRzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZWxlbWVudHNbaV0uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVGb3JtKGZvcm0pIHtcbiAgICB2YXIgZWxlbWVudHMgPSBmb3JtLmVsZW1lbnRzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZWxlbWVudHNbaV0uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGllbnREb3dubG9hZEZpbGUocmVzKSB7XG4gICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cbiAgICAvLyAgICB2YXIgZGF0YSA9IG5ldyBGaWxlKG5ldyBVaW50OEFycmF5KHJlcy5maWxlLmRhdGEpLCByZXMuZmlsZW5hbWUpO1xuICAgIHZhciB1aW50OGFyciA9IG5ldyBVaW50OEFycmF5KHJlcy5maWxlLmRhdGEpO1xuICAgIHZhciBkYXRhID0gbmV3IEJsb2IoW3VpbnQ4YXJyXSk7XG4gICAgLy8gICAgdmFyIGRhdGEgPSBuZXcgQmxvYih1aW50OGFycik7XG5cbiAgICBpZih3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYikge1xuXHR3aW5kb3cubmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoZGF0YSwgcmVzLmZpbGVuYW1lKTtcbiAgICB9XG4gICAgZWxzZSB7XG5cdHZhciB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChkYXRhKTtcblx0YS5ocmVmID0gdXJsO1xuXHRhLmRvd25sb2FkID0gcmVzLmZpbGVuYW1lO1xuXHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpO1xuXG5cdGEuY2xpY2soKTtcblx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGEpO1xuICAgICAgICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcblx0fSwgMClcbiAgICB9XG59XG4vKioqKioqKioqKioqKioqKioqKioqIHRhYmxlIHNvcnRpbmcgbWV0aG9kcyAqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyVGFibGVHcm91cHModGFibGUpe1xuICAgIGxldCB0Ym9keSA9IHRhYmxlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0Ym9keScpO1xuICAgIHdoaWxlKHRib2R5Lmxlbmd0aCA+IDApe1xuXHR0Ym9keVswXS5yZW1vdmUoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhclRhYmxlUm93cyh0YWJsZSl7XG4gICAgbGV0IHRib2R5ID0gdGFibGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3Rib2R5JylbMF07XG4gICAgd2hpbGUodGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPiAwKXtcblx0dGJvZHkuY2hpbGROb2Rlc1swXS5yZW1vdmUoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5VGFibGVHcm91cHModGFibGUsIGxpc3Qpe1xuICAgIGxpc3QuZm9yRWFjaChsID0+IHtcblx0dGFibGUuYXBwZW5kQ2hpbGQobC5lbGVtZW50KTtcblx0aWYobC5uZXh0RWxlbWVudCl7XG5cdCAgICB0YWJsZS5hcHBlbmRDaGlsZChsLm5leHRFbGVtZW50KTtcblx0fVxuICAgIH0pXG59XG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheVRhYmxlUm93cyh0YWJsZSwgbGlzdCl7XG4gICAgbGV0IHRib2R5ID0gdGFibGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3Rib2R5JylbMF07XG4gICAgbGlzdC5mb3JFYWNoKGwgPT4ge1xuXHR0Ym9keS5hcHBlbmRDaGlsZChsLmVsZW1lbnQpO1xuXHRpZihsLm5leHRFbGVtZW50KXtcblx0ICAgIHRib2R5LmFwcGVuZENoaWxkKGwubmV4dEVsZW1lbnQpO1xuXHR9XG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVNvcnRDbGFzc2VzKGVsZW1lbnRzKXtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspe1xuXHRlbGVtZW50c1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdzb3J0JywgJ3NvcnRlZFVwJywgJ3NvcnRlZERvd24nKTtcblx0ZWxlbWVudHNbaV0uY2xhc3NMaXN0LmFkZCgnc29ydCcpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluc2VydGlvblNvcnQobGlzdCwgYXNjPXRydWUpe1xuICAgIFxuICAgIGxldCBlbGVtZW50O1xuICAgIGxldCBrZXk7XG4gICAgbGV0IGo7XG4gICAgbGV0IHRlbXA7XG4gICAgXG4gICAgZm9yKGxldCBpID0gMTsgaSA8IGxpc3QubGVuZ3RoOyBpKyspe1xuXHRrZXkgPSBsaXN0W2ldLnZhbHVlO1xuXHRqID0gaTtcblxuXHRpZihhc2Mpe1xuXHQgICAgd2hpbGUoaiA+IDAgJiYga2V5IDwgbGlzdFtqIC0gMV0udmFsdWUpe1xuXHRcdGotLTtcblx0ICAgIH1cblx0fVxuXHRlbHNle1xuXHQgICAgd2hpbGUoaiA+IDAgJiYga2V5ID4gbGlzdFtqIC0gMV0udmFsdWUpe1xuXHRcdGotLTtcblx0ICAgIH1cblx0fVxuXHRlbGVtZW50ID0gbGlzdFtpXTtcblx0bGlzdC5zcGxpY2UoaSwgMSk7XG5cdGxpc3Quc3BsaWNlKGosIDAsIGVsZW1lbnQpO1xuXHRcbiAgICB9XG59XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7ICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVApIHtcbiAgdmFyIHN0b3JlID0gbmV3IFdlYWtNYXAoKTtcbiAgdmFyIHdtZ2V0ID0gc3RvcmUuZ2V0O1xuICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gIHZhciB3bXNldCA9IHN0b3JlLnNldDtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIHdtc2V0LmNhbGwoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICBzZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQ7XG4gICAgc2V0dGVyLmNhbGwodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIuY2FsbChPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBjYWNoZSA9IHt9O1xuXG52YXIgdGhyb3dlciA9IGZ1bmN0aW9uIChpdCkgeyB0aHJvdyBpdDsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIG9wdGlvbnMpIHtcbiAgaWYgKGhhcyhjYWNoZSwgTUVUSE9EX05BTUUpKSByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdO1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgdmFyIEFDQ0VTU09SUyA9IGhhcyhvcHRpb25zLCAnQUNDRVNTT1JTJykgPyBvcHRpb25zLkFDQ0VTU09SUyA6IGZhbHNlO1xuICB2YXIgYXJndW1lbnQwID0gaGFzKG9wdGlvbnMsIDApID8gb3B0aW9uc1swXSA6IHRocm93ZXI7XG4gIHZhciBhcmd1bWVudDEgPSBoYXMob3B0aW9ucywgMSkgPyBvcHRpb25zWzFdIDogdW5kZWZpbmVkO1xuXG4gIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV0gPSAhIW1ldGhvZCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIGlmIChBQ0NFU1NPUlMgJiYgIURFU0NSSVBUT1JTKSByZXR1cm4gdHJ1ZTtcbiAgICB2YXIgTyA9IHsgbGVuZ3RoOiAtMSB9O1xuXG4gICAgaWYgKEFDQ0VTU09SUykgZGVmaW5lUHJvcGVydHkoTywgMSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IHRocm93ZXIgfSk7XG4gICAgZWxzZSBPWzFdID0gMTtcblxuICAgIG1ldGhvZC5jYWxsKE8sIGFyZ3VtZW50MCwgYXJndW1lbnQxKTtcbiAgfSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuICBpbmRleE9mOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICghVE9fU1RSSU5HX1RBR19TVVBQT1JUKSB7XG4gIHJlZGVmaW5lKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgY29kZVBvaW50QXQsIGF0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklORyA/IFMuY2hhckF0KHBvc2l0aW9uKSA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkcgPyBTLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiAnMy42LjUnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjAgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIG5ldyAoQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZm9yRWFjaCcpO1xudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9ICghU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEgpID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSA6IFtdLmZvckVhY2g7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCxuby10aHJvdy1saXRlcmFsXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxuaWYgKEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbmlmICghSVNfUFVSRSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleCcpO1xudmFyIElFRUU3NTQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWVlZTc1NCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXgnO1xudmFyIE5hdGl2ZUFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJEFycmF5QnVmZmVyID0gTmF0aXZlQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgJERhdGFWaWV3UHJvdG90eXBlID0gJERhdGFWaWV3ICYmICREYXRhVmlld1tQUk9UT1RZUEVdO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuXG52YXIgcGFja0lFRUU3NTQgPSBJRUVFNzU0LnBhY2s7XG52YXIgdW5wYWNrSUVFRTc1NCA9IElFRUU3NTQudW5wYWNrO1xuXG52YXIgcGFja0ludDggPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDE2ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRiwgbnVtYmVyID4+IDE2ICYgMHhGRiwgbnVtYmVyID4+IDI0ICYgMHhGRl07XG59O1xuXG52YXIgdW5wYWNrSW50MzIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXJbM10gPDwgMjQgfCBidWZmZXJbMl0gPDwgMTYgfCBidWZmZXJbMV0gPDwgOCB8IGJ1ZmZlclswXTtcbn07XG5cbnZhciBwYWNrRmxvYXQzMiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KG51bWJlciwgMjMsIDQpO1xufTtcblxudmFyIHBhY2tGbG9hdDY0ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCA1MiwgOCk7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBrZXkpIHtcbiAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3JbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldOyB9IH0pO1xufTtcblxudmFyIGdldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgoaW5kZXgpO1xuICB2YXIgc3RvcmUgPSBnZXRJbnRlcm5hbFN0YXRlKHZpZXcpO1xuICBpZiAoaW50SW5kZXggKyBjb3VudCA+IHN0b3JlLmJ5dGVMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgYnl0ZXMgPSBnZXRJbnRlcm5hbFN0YXRlKHN0b3JlLmJ1ZmZlcikuYnl0ZXM7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgc3RvcmUuYnl0ZU9mZnNldDtcbiAgdmFyIHBhY2sgPSBieXRlcy5zbGljZShzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn07XG5cbnZhciBzZXQgPSBmdW5jdGlvbiAodmlldywgY291bnQsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChpbmRleCk7XG4gIHZhciBzdG9yZSA9IGdldEludGVybmFsU3RhdGUodmlldyk7XG4gIGlmIChpbnRJbmRleCArIGNvdW50ID4gc3RvcmUuYnl0ZUxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBieXRlcyA9IGdldEludGVybmFsU3RhdGUoc3RvcmUuYnVmZmVyKS5ieXRlcztcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyBzdG9yZS5ieXRlT2Zmc2V0O1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSBieXRlc1tzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBjb3VudCAtIGkgLSAxXTtcbn07XG5cbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIGJ5dGVzOiBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApLFxuICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aFxuICAgIH0pO1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gZ2V0SW50ZXJuYWxTdGF0ZShidWZmZXIpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCcpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoLFxuICAgICAgYnl0ZU9mZnNldDogb2Zmc2V0XG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykge1xuICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gb2Zmc2V0O1xuICAgIH1cbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdidWZmZXInKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlT2Zmc2V0Jyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSW50MzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSW50MzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCksIDIzKTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgNTIpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSW50OCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0ludDE2LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSW50MzIsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRmxvYXQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRmxvYXQ2NCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgTmF0aXZlQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiBOYXRpdmVBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgTmF0aXZlQXJyYXlCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvdHlwZSA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gTmF0aXZlQXJyYXlCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVBcnJheUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRBcnJheUJ1ZmZlciwga2V5LCBOYXRpdmVBcnJheUJ1ZmZlcltrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQXJyYXlCdWZmZXJQcm90b3R5cGUuY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cblxuICAvLyBXZWJLaXQgYnVnIC0gdGhlIHNhbWUgcGFyZW50IHByb3RvdHlwZSBmb3IgdHlwZWQgYXJyYXlzIGFuZCBkYXRhIHZpZXdcbiAgaWYgKHNldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKCREYXRhVmlld1Byb3RvdHlwZSkgIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIHNldFByb3RvdHlwZU9mKCREYXRhVmlld1Byb3RvdHlwZSwgT2JqZWN0UHJvdG90eXBlKTtcbiAgfVxuXG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdGVzdFZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgbmF0aXZlU2V0SW50OCA9ICREYXRhVmlld1Byb3RvdHlwZS5zZXRJbnQ4O1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodGVzdFZpZXcuZ2V0SW50OCgwKSB8fCAhdGVzdFZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgbmF0aXZlU2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgbmF0aXZlU2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuXG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyLFxuICBEYXRhVmlldzogJERhdGFWaWV3XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBEYXRhVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYFRvSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIG9yIGluZGV4Jyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbGxgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIHRvUG9zaXRpdmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXBvc2l0aXZlLWludGVnZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gIHZhciBvZmZzZXQgPSB0b1Bvc2l0aXZlSW50ZWdlcihpdCk7XG4gIGlmIChvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0Jyk7XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYXJndW1lbnRzTGVuZ3RoLCBtZW1vKSB7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gSVNfUklHSFQgPyBsZW5ndGggLSAxIDogMDtcbiAgICB2YXIgaSA9IElTX1JJR0hUID8gLTEgOiAxO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPCAyKSB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgICBpbmRleCArPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBpZiAoSVNfUklHSFQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoO0lTX1JJR0hUID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4gIGxlZnQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiAgcmlnaHQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IG5ldyBVUkwoJ2I/YT0xJmI9MiZjPTMnLCAnaHR0cDovL2EnKTtcbiAgdmFyIHNlYXJjaFBhcmFtcyA9IHVybC5zZWFyY2hQYXJhbXM7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdXJsLnBhdGhuYW1lID0gJ2MlMjBkJztcbiAgc2VhcmNoUGFyYW1zLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICBzZWFyY2hQYXJhbXNbJ2RlbGV0ZSddKCdiJyk7XG4gICAgcmVzdWx0ICs9IGtleSArIHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIChJU19QVVJFICYmICF1cmwudG9KU09OKVxuICAgIHx8ICFzZWFyY2hQYXJhbXMuc29ydFxuICAgIHx8IHVybC5ocmVmICE9PSAnaHR0cDovL2EvYyUyMGQ/YT0xJmM9MydcbiAgICB8fCBzZWFyY2hQYXJhbXMuZ2V0KCdjJykgIT09ICczJ1xuICAgIHx8IFN0cmluZyhuZXcgVVJMU2VhcmNoUGFyYW1zKCc/YT0xJykpICE9PSAnYT0xJ1xuICAgIHx8ICFzZWFyY2hQYXJhbXNbSVRFUkFUT1JdXG4gICAgLy8gdGhyb3dzIGluIEVkZ2VcbiAgICB8fCBuZXcgVVJMKCdodHRwczovL2FAYicpLnVzZXJuYW1lICE9PSAnYSdcbiAgICB8fCBuZXcgVVJMU2VhcmNoUGFyYW1zKG5ldyBVUkxTZWFyY2hQYXJhbXMoJ2E9YicpKS5nZXQoJ2EnKSAhPT0gJ2InXG4gICAgLy8gbm90IHB1bnljb2RlZCBpbiBFZGdlXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL9GC0LXRgdGCJykuaG9zdCAhPT0gJ3huLS1lMWF5YmMnXG4gICAgLy8gbm90IGVzY2FwZWQgaW4gQ2hyb21lIDYyLVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly9hI9CxJykuaGFzaCAhPT0gJyMlRDAlQjEnXG4gICAgLy8gZmFpbHMgaW4gQ2hyb21lIDY2LVxuICAgIHx8IHJlc3VsdCAhPT0gJ2ExYzMnXG4gICAgLy8gdGhyb3dzIGluIFNhZmFyaVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly94JywgdW5kZWZpbmVkKS5ob3N0ICE9PSAneCc7XG59KTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gKyBtYXRjaFsxXTtcbn0gZWxzZSBpZiAodXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gbWF0Y2hbMV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJzaW9uICYmICt2ZXJzaW9uO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHZhciByZXR1cm5NZXRob2QgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldHVybk1ldGhvZCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXR1cm5NZXRob2QuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG5cbnZhciBsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjtcbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBydW4oaWQpO1xuICB9O1xufTtcblxudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bihldmVudC5kYXRhKTtcbn07XG5cbnZhciBwb3N0ID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIG9sZCBlbmdpbmVzIGhhdmUgbm90IGxvY2F0aW9uLm9yaWdpblxuICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdCk7XG59O1xuXG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldCB8fCAhY2xlYXIpIHtcbiAgc2V0ID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIC8vIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjI0XG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwgJiYgIUlTX0lPUykge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiZcbiAgICB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgICFmYWlscyhwb3N0KSAmJlxuICAgIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonXG4gICkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8oaXBob25lfGlwb2R8aXBhZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xuXG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn1cbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkZmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIEdMT0JBTF9DT1JFX0pTX1BST01JU0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3RvcikgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UpIHtcbiAgICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICBpZiAoVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAgIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICBpZiAoIUlTX05PREUgJiYgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCAhPSAnZnVuY3Rpb24nKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGVbJ2ZpbmFsbHknXSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmIChWOF9WRVJTSU9OID49IDUxICYmIC9uYXRpdmUgY29kZS8udGVzdChQcm9taXNlQ29uc3RydWN0b3IpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSk7XG4gIHZhciBGYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIH07XG4gIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3IgPSB7fTtcbiAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTtcbiAgcmV0dXJuICEocHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZSk7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHByb21pc2UsIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgdGhpcywgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCB0aGlzLCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdCh0aGlzLCBzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUudGhlblxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlICE9IFBFTkRJTkcpIG5vdGlmeSh0aGlzLCBzdGF0ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlLnByb3RvdHlwZS50aGVuO1xuXG4gICAgLy8gd3JhcCBuYXRpdmUgUHJvbWlzZSN0aGVuIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NDBcbiAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgIC8vIHdyYXAgZmV0Y2ggcmVzdWx0XG4gICAgaWYgKHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJykgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoUHJvbWlzZUNvbnN0cnVjdG9yLCAkZmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhcGFiaWxpdHkucmVqZWN0LmNhbGwodW5kZWZpbmVkLCByKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKElTX1BVUkUgJiYgdGhpcyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBQcm9taXNlQ29uc3RydWN0b3IgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIC8vIGBQcm9taXNlLmFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBBcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgQXJyYXlCdWZmZXIgPSBBcnJheUJ1ZmZlck1vZHVsZS5BcnJheUJ1ZmZlcjtcbnZhciBEYXRhVmlldyA9IEFycmF5QnVmZmVyTW9kdWxlLkRhdGFWaWV3O1xudmFyIG5hdGl2ZUFycmF5QnVmZmVyU2xpY2UgPSBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG5cbnZhciBJTkNPUlJFQ1RfU0xJQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3IEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pO1xuXG4vLyBgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLnByb3RvdHlwZS5zbGljZVxuJCh7IHRhcmdldDogJ0FycmF5QnVmZmVyJywgcHJvdG86IHRydWUsIHVuc2FmZTogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfU0xJQ0UgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmIChuYXRpdmVBcnJheUJ1ZmZlclNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuYXRpdmVBcnJheUJ1ZmZlclNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTb3VyY2UgPSBuZXcgRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUYXJnZXQgPSBuZXcgRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1RhcmdldC5zZXRVaW50OChpbmRleCsrLCB2aWV3U291cmNlLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgVWludDhBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50OCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkY29weVdpdGhpbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5jb3B5d2l0aGluXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdjb3B5V2l0aGluJywgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gIHJldHVybiAkY29weVdpdGhpbi5jYWxsKGFUeXBlZEFycmF5KHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5ldmVyeVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZXZlcnknLCBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGV2ZXJ5KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbGxcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmlsbCcsIGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7XG4gIHJldHVybiAkZmlsbC5hcHBseShhVHlwZWRBcnJheSh0aGlzKSwgYXJndW1lbnRzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maWx0ZXJcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZpbHRlcicsIGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICB2YXIgbGlzdCA9ICRmaWx0ZXIoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihDKSkobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbmRcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZpbmQnLCBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmaW5kKGFUeXBlZEFycmF5KHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaW5kSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZEluZGV4O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbmRpbmRleFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZEluZGV4JywgZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmaW5kSW5kZXgoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZm9yZWFjaFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZm9yRWFjaCcsIGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgJGZvckVhY2goYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuaW5jbHVkZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2luY2x1ZGVzJywgZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICByZXR1cm4gJGluY2x1ZGVzKGFUeXBlZEFycmF5KHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmluZGV4b2ZcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2luZGV4T2YnLCBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgcmV0dXJuICRpbmRleE9mKGFUeXBlZEFycmF5KHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG52YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG52YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbnZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzO1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIG5hdGl2ZVR5cGVkQXJyYXlJdGVyYXRvciA9IFVpbnQ4QXJyYXkgJiYgVWludDhBcnJheS5wcm90b3R5cGVbSVRFUkFUT1JdO1xuXG52YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhIW5hdGl2ZVR5cGVkQXJyYXlJdGVyYXRvclxuICAmJiAobmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgbmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcblxudmFyIHR5cGVkQXJyYXlWYWx1ZXMgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKGFUeXBlZEFycmF5KHRoaXMpKTtcbn07XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5lbnRyaWVzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdlbnRyaWVzJywgZnVuY3Rpb24gZW50cmllcygpIHtcbiAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKGFUeXBlZEFycmF5KHRoaXMpKTtcbn0pO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmtleXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2tleXMnLCBmdW5jdGlvbiBrZXlzKCkge1xuICByZXR1cm4gYXJyYXlLZXlzLmNhbGwoYVR5cGVkQXJyYXkodGhpcykpO1xufSk7XG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS52YWx1ZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3ZhbHVlcycsIHR5cGVkQXJyYXlWYWx1ZXMsICFDT1JSRUNUX0lURVJfTkFNRSk7XG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLUBAaXRlcmF0b3JcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoSVRFUkFUT1IsIHR5cGVkQXJyYXlWYWx1ZXMsICFDT1JSRUNUX0lURVJfTkFNRSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkam9pbiA9IFtdLmpvaW47XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5qb2luXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2pvaW4nLCBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICByZXR1cm4gJGpvaW4uYXBwbHkoYVR5cGVkQXJyYXkodGhpcyksIGFyZ3VtZW50cyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkbGFzdEluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbGFzdC1pbmRleC1vZicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUubGFzdGluZGV4b2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnbGFzdEluZGV4T2YnLCBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkbGFzdEluZGV4T2YuYXBwbHkoYVR5cGVkQXJyYXkodGhpcyksIGFyZ3VtZW50cyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUubWFwXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdtYXAnLCBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkbWFwKGFUeXBlZEFycmF5KHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPLmNvbnN0cnVjdG9yKSkpKGxlbmd0aCk7XG4gIH0pO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5sZWZ0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnJlZHVjZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmVkdWNlJywgZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgcmV0dXJuICRyZWR1Y2UoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRyZWR1Y2VSaWdodCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5yaWdodDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZWR1Y2VSaWNodGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZWR1Y2VSaWdodCcsIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgcmV0dXJuICRyZWR1Y2VSaWdodChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJldmVyc2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5yZXZlcnNlXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZXZlcnNlJywgZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIgbGVuZ3RoID0gYVR5cGVkQXJyYXkodGhhdCkubGVuZ3RoO1xuICB2YXIgbWlkZGxlID0gZmxvb3IobGVuZ3RoIC8gMik7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciB2YWx1ZTtcbiAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gIH0gcmV0dXJuIHRoYXQ7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b09mZnNldCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vZmZzZXQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBuZXcgSW50OEFycmF5KDEpLnNldCh7fSk7XG59KTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc2V0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2V0XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzZXQnLCBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gIGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDEpO1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IDA7XG4gIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCcpO1xuICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xufSwgRk9SQ0VEKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyICRzbGljZSA9IFtdLnNsaWNlO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgbmV3IEludDhBcnJheSgxKS5zbGljZSgpO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2xpY2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NsaWNlJywgZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICB2YXIgbGlzdCA9ICRzbGljZS5jYWxsKGFUeXBlZEFycmF5KHRoaXMpLCBzdGFydCwgZW5kKTtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihDKSkobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sIEZPUkNFRCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuc29tZTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zb21lYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc29tZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc29tZScsIGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRzb21lKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyICRzb3J0ID0gW10uc29ydDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNvcnRcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NvcnQnLCBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICByZXR1cm4gJHNvcnQuY2FsbChhVHlwZWRBcnJheSh0aGlzKSwgY29tcGFyZWZuKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc3ViYXJyYXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zdWJhcnJheVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc3ViYXJyYXknLCBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gIHZhciBPID0gYVR5cGVkQXJyYXkodGhpcyk7XG4gIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgdmFyIGJlZ2luSW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPLmNvbnN0cnVjdG9yKSkoXG4gICAgTy5idWZmZXIsXG4gICAgTy5ieXRlT2Zmc2V0ICsgYmVnaW5JbmRleCAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSBiZWdpbkluZGV4KVxuICApO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyICR0b0xvY2FsZVN0cmluZyA9IFtdLnRvTG9jYWxlU3RyaW5nO1xudmFyICRzbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG52YXIgVE9fTE9DQUxFX1NUUklOR19CVUcgPSAhIUludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0xvY2FsZVN0cmluZy5jYWxsKG5ldyBJbnQ4QXJyYXkoMSkpO1xufSk7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgSW50OEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIEludDhBcnJheS5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9sb2NhbGVzdHJpbmdcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3RvTG9jYWxlU3RyaW5nJywgZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gIHJldHVybiAkdG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX1NUUklOR19CVUcgPyAkc2xpY2UuY2FsbChhVHlwZWRBcnJheSh0aGlzKSkgOiBhVHlwZWRBcnJheSh0aGlzKSwgYXJndW1lbnRzKTtcbn0sIEZPUkNFRCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbnZhciBVaW50OEFycmF5UHJvdG90eXBlID0gVWludDhBcnJheSAmJiBVaW50OEFycmF5LnByb3RvdHlwZSB8fCB7fTtcbnZhciBhcnJheVRvU3RyaW5nID0gW10udG9TdHJpbmc7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgYXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgfTtcbn1cblxudmFyIElTX05PVF9BUlJBWV9NRVRIT0QgPSBVaW50OEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmc7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9zdHJpbmdcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3RvU3RyaW5nJywgYXJyYXlUb1N0cmluZywgSVNfTk9UX0FSUkFZX01FVEhPRCk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsInZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiAhU3ltYm9sLnNoYW1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG4gIGlmIChpdGVyYXRvck1ldGhvZCAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYXRvck1ldGhvZC5jYWxsKE8pO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIHJlc3VsdCA9IG5ldyBDKCk7XG4gICAgZm9yICg7IShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgJiYgaXQgIT09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoaXQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzcGxpY2UnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdzcGxpY2UnLCB7IEFDQ0VTU09SUzogdHJ1ZSwgMDogMCwgMTogMiB9KTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGxlbmd0aCBleGNlZWRlZCc7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zcGxpY2Vcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQgLyogLCAuLi5pdGVtcyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgYWN0dWFsU3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGluc2VydENvdW50LCBhY3R1YWxEZWxldGVDb3VudCwgQSwgaywgZnJvbSwgdG87XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMCkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDEpIHtcbiAgICAgIGluc2VydENvdW50ID0gMDtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2VydENvdW50ID0gYXJndW1lbnRzTGVuZ3RoIC0gMjtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbWluKG1heCh0b0ludGVnZXIoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuICAgIH1cbiAgICBpZiAobGVuICsgaW5zZXJ0Q291bnQgLSBhY3R1YWxEZWxldGVDb3VudCA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEKTtcbiAgICB9XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgZm9yIChrID0gMDsgayA8IGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgIGZyb20gPSBhY3R1YWxTdGFydCArIGs7XG4gICAgICBpZiAoZnJvbSBpbiBPKSBjcmVhdGVQcm9wZXJ0eShBLCBrLCBPW2Zyb21dKTtcbiAgICB9XG4gICAgQS5sZW5ndGggPSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICBpZiAoaW5zZXJ0Q291bnQgPCBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gYWN0dWFsU3RhcnQ7IGsgPCBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50O1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgICAgZm9yIChrID0gbGVuOyBrID4gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDsgay0tKSBkZWxldGUgT1trIC0gMV07XG4gICAgfSBlbHNlIGlmIChpbnNlcnRDb3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgayA+IGFjdHVhbFN0YXJ0OyBrLS0pIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDE7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50IC0gMTtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrID0gMDsgayA8IGluc2VydENvdW50OyBrKyspIHtcbiAgICAgIE9bayArIGFjdHVhbFN0YXJ0XSA9IGFyZ3VtZW50c1trICsgMl07XG4gICAgfVxuICAgIE8ubGVuZ3RoID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIvLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSAxIC8gMDtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG5cbnZhciBwYWNrID0gZnVuY3Rpb24gKG51bWJlciwgbWFudGlzc2FMZW5ndGgsIGJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkoYnl0ZXMpO1xuICB2YXIgZXhwb25lbnRMZW5ndGggPSBieXRlcyAqIDggLSBtYW50aXNzYUxlbmd0aCAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZXhwb25lbnRMZW5ndGgpIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtYW50aXNzYUxlbmd0aCA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwIHx8IG51bWJlciA9PT0gMCAmJiAxIC8gbnVtYmVyIDwgMCA/IDEgOiAwO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgZXhwb25lbnQsIG1hbnRpc3NhLCBjO1xuICBudW1iZXIgPSBhYnMobnVtYmVyKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAobnVtYmVyICE9IG51bWJlciB8fCBudW1iZXIgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG1hbnRpc3NhID0gbnVtYmVyICE9IG51bWJlciA/IDEgOiAwO1xuICAgIGV4cG9uZW50ID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBleHBvbmVudCA9IGZsb29yKGxvZyhudW1iZXIpIC8gTE4yKTtcbiAgICBpZiAobnVtYmVyICogKGMgPSBwb3coMiwgLWV4cG9uZW50KSkgPCAxKSB7XG4gICAgICBleHBvbmVudC0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBudW1iZXIgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKG51bWJlciAqIGMgPj0gMikge1xuICAgICAgZXhwb25lbnQrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbWFudGlzc2EgPSAwO1xuICAgICAgZXhwb25lbnQgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtYW50aXNzYSA9IChudW1iZXIgKiBjIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSBleHBvbmVudCArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYW50aXNzYSA9IG51bWJlciAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1hbnRpc3NhTGVuZ3RoID49IDg7IGJ1ZmZlcltpbmRleCsrXSA9IG1hbnRpc3NhICYgMjU1LCBtYW50aXNzYSAvPSAyNTYsIG1hbnRpc3NhTGVuZ3RoIC09IDgpO1xuICBleHBvbmVudCA9IGV4cG9uZW50IDw8IG1hbnRpc3NhTGVuZ3RoIHwgbWFudGlzc2E7XG4gIGV4cG9uZW50TGVuZ3RoICs9IG1hbnRpc3NhTGVuZ3RoO1xuICBmb3IgKDsgZXhwb25lbnRMZW5ndGggPiAwOyBidWZmZXJbaW5kZXgrK10gPSBleHBvbmVudCAmIDI1NSwgZXhwb25lbnQgLz0gMjU2LCBleHBvbmVudExlbmd0aCAtPSA4KTtcbiAgYnVmZmVyWy0taW5kZXhdIHw9IHNpZ24gKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG52YXIgdW5wYWNrID0gZnVuY3Rpb24gKGJ1ZmZlciwgbWFudGlzc2FMZW5ndGgpIHtcbiAgdmFyIGJ5dGVzID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZXhwb25lbnRMZW5ndGggLSA3O1xuICB2YXIgaW5kZXggPSBieXRlcyAtIDE7XG4gIHZhciBzaWduID0gYnVmZmVyW2luZGV4LS1dO1xuICB2YXIgZXhwb25lbnQgPSBzaWduICYgMTI3O1xuICB2YXIgbWFudGlzc2E7XG4gIHNpZ24gPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGV4cG9uZW50ID0gZXhwb25lbnQgKiAyNTYgKyBidWZmZXJbaW5kZXhdLCBpbmRleC0tLCBuQml0cyAtPSA4KTtcbiAgbWFudGlzc2EgPSBleHBvbmVudCAmICgxIDw8IC1uQml0cykgLSAxO1xuICBleHBvbmVudCA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtYW50aXNzYUxlbmd0aDtcbiAgZm9yICg7IG5CaXRzID4gMDsgbWFudGlzc2EgPSBtYW50aXNzYSAqIDI1NiArIGJ1ZmZlcltpbmRleF0sIGluZGV4LS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZXhwb25lbnQgPT09IDApIHtcbiAgICBleHBvbmVudCA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChleHBvbmVudCA9PT0gZU1heCkge1xuICAgIHJldHVybiBtYW50aXNzYSA/IE5hTiA6IHNpZ24gPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtYW50aXNzYSA9IG1hbnRpc3NhICsgcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50IC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzaWduID8gLTEgOiAxKSAqIG1hbnRpc3NhICogcG93KDIsIGV4cG9uZW50IC0gbWFudGlzc2FMZW5ndGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhY2s6IHBhY2ssXG4gIHVucGFjazogdW5wYWNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIEFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleCcpO1xudmFyIHRvT2Zmc2V0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9mZnNldCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgdHlwZWRBcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbScpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgQXJyYXlCdWZmZXIgPSBBcnJheUJ1ZmZlck1vZHVsZS5BcnJheUJ1ZmZlcjtcbnZhciBEYXRhVmlldyA9IEFycmF5QnVmZmVyTW9kdWxlLkRhdGFWaWV3O1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG52YXIgVFlQRURfQVJSQVlfVEFHID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UWVBFRF9BUlJBWV9UQUc7XG52YXIgVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuVHlwZWRBcnJheTtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UeXBlZEFycmF5UHJvdG90eXBlO1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgaXNUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5pc1R5cGVkQXJyYXk7XG52YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGgnO1xuXG52YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQykpKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldO1xuICB9IH0pO1xufTtcblxudmFyIGlzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGtsYXNzO1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGl0KSkgPT0gJ0FycmF5QnVmZmVyJyB8fCBrbGFzcyA9PSAnU2hhcmVkQXJyYXlCdWZmZXInO1xufTtcblxudmFyIGlzVHlwZWRBcnJheUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gIHJldHVybiBpc1R5cGVkQXJyYXkodGFyZ2V0KVxuICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xufTtcblxudmFyIHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgcmV0dXJuIGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICA/IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigyLCB0YXJnZXRba2V5XSlcbiAgICA6IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG59O1xuXG52YXIgd3JhcHBlZERlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgaWYgKGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAmJiBpc09iamVjdChkZXNjcmlwdG9yKVxuICAgICYmIGhhcyhkZXNjcmlwdG9yLCAndmFsdWUnKVxuICAgICYmICFoYXMoZGVzY3JpcHRvciwgJ2dldCcpXG4gICAgJiYgIWhhcyhkZXNjcmlwdG9yLCAnc2V0JylcbiAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICYmICFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZVxuICAgICYmICghaGFzKGRlc2NyaXB0b3IsICd3cml0YWJsZScpIHx8IGRlc2NyaXB0b3Iud3JpdGFibGUpXG4gICAgJiYgKCFoYXMoZGVzY3JpcHRvciwgJ2VudW1lcmFibGUnKSB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUpXG4gICkge1xuICAgIHRhcmdldFtrZXldID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSB3cmFwcGVkRGVmaW5lUHJvcGVydHk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdidWZmZXInKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J5dGVPZmZzZXQnKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J5dGVMZW5ndGgnKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2xlbmd0aCcpO1xuICB9XG5cbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfSwge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogd3JhcHBlZEdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBkZWZpbmVQcm9wZXJ0eTogd3JhcHBlZERlZmluZVByb3BlcnR5XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICB2YXIgQllURVMgPSBUWVBFLm1hdGNoKC9cXGQrJC8pWzBdIC8gODtcbiAgICB2YXIgQ09OU1RSVUNUT1JfTkFNRSA9IFRZUEUgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgVFlQRTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBUWVBFO1xuICAgIHZhciBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQ09OU1RSVUNUT1JfTkFNRV07XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICByZXR1cm4gZGF0YS52aWV3W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEuYnl0ZU9mZnNldCwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSByb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4RkYgPyAweEZGIDogdmFsdWUgJiAweEZGO1xuICAgICAgZGF0YS52aWV3W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEuYnl0ZU9mZnNldCwgdmFsdWUsIHRydWUpO1xuICAgIH07XG5cbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgbmF0aXZlRGVmaW5lUHJvcGVydHkodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCBvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5Q29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgYnl0ZU9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aDtcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBieXRlT2Zmc2V0ID0gdG9PZmZzZXQob2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBieXRlT2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBieXRlT2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVkQXJyYXlGcm9tLmNhbGwoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICBieXRlT2Zmc2V0OiBieXRlT2Zmc2V0LFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgICAgdmlldzogbmV3IERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUykge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGRhdGEsIHR5cGVkQXJyYXlPZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICAgICAgcmV0dXJuIGluaGVyaXRJZlJlcXVpcmVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgICBpZiAoaXNBcnJheUJ1ZmZlcihkYXRhKSkgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogdHlwZWRBcnJheU9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhLCB0b09mZnNldCh0eXBlZEFycmF5T2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhKTtcbiAgICAgICAgICBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgICByZXR1cm4gdHlwZWRBcnJheUZyb20uY2FsbChUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICB9KCksIGR1bW15LCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBUeXBlZEFycmF5KTtcbiAgICAgIGZvckVhY2goZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3IpKSB7XG4gICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3Rvciwga2V5LCBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3Jba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZTtcbiAgICB9XG5cbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLmNvbnN0cnVjdG9yICE9PSBUeXBlZEFycmF5Q29uc3RydWN0b3IpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgaWYgKFRZUEVEX0FSUkFZX1RBRykge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgVFlQRURfQVJSQVlfVEFHLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB9XG5cbiAgICBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxuICAgICQoe1xuICAgICAgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAhPSBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IsIHNoYW06ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTXG4gICAgfSwgZXhwb3J0ZWQpO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcbiAgICB9XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuICAgIH1cblxuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgKi9cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUztcblxudmFyIEFycmF5QnVmZmVyID0gZ2xvYmFsLkFycmF5QnVmZmVyO1xudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgSW50OEFycmF5KDEpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmV3IEludDhBcnJheSgtMSk7XG59KSB8fCAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBuZXcgSW50OEFycmF5KCk7XG4gIG5ldyBJbnQ4QXJyYXkobnVsbCk7XG4gIG5ldyBJbnQ4QXJyYXkoMS41KTtcbiAgbmV3IEludDhBcnJheShpdGVyYWJsZSk7XG59LCB0cnVlKSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFNhZmFyaSAoMTErKSBidWcgLSBhIHJlYXNvbiB3aHkgZXZlbiBTYWZhcmkgMTMgc2hvdWxkIGxvYWQgYSB0eXBlZCBhcnJheSBwb2x5ZmlsbFxuICByZXR1cm4gbmV3IEludDhBcnJheShuZXcgQXJyYXlCdWZmZXIoMiksIDEsIHVuZGVmaW5lZCkubGVuZ3RoICE9PSAxO1xufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IHRvSW50ZWdlcihpdCk7XG4gIGlmIChyZXN1bHQgPCAwKSB0aHJvdyBSYW5nZUVycm9yKFwiVGhlIGFyZ3VtZW50IGNhbid0IGJlIGxlc3MgdGhhbiAwXCIpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpLCBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQ7XG4gIGlmIChpdGVyYXRvck1ldGhvZCAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgTyA9IFtdO1xuICAgIHdoaWxlICghKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgICBPLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgfVxuICB9XG4gIGlmIChtYXBwaW5nICYmIGFyZ3VtZW50c0xlbmd0aCA+IDIpIHtcbiAgICBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gIH1cbiAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IodGhpcykpKGxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIHR5cGVvZiAoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpID09ICdmdW5jdGlvbicgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvcHl3aXRoaW5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBtaW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBuYXRpdmVMYXN0SW5kZXhPZiA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhIW5hdGl2ZUxhc3RJbmRleE9mICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnbGFzdEluZGV4T2YnKTtcbi8vIEZvciBwcmV2ZW50aW5nIHBvc3NpYmxlIGFsbW9zdCBpbmZpbml0ZSBsb29wIGluIG5vbi1zdGFuZGFyZCBpbXBsZW1lbnRhdGlvbnMsIHRlc3QgdGhlIGZvcndhcmQgdmVyc2lvbiBvZiB0aGUgbWV0aG9kXG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnaW5kZXhPZicsIHsgQUNDRVNTT1JTOiB0cnVlLCAxOiAwIH0pO1xudmFyIEZPUkNFRCA9IE5FR0FUSVZFX1pFUk8gfHwgIVNUUklDVF9NRVRIT0QgfHwgIVVTRVNfVE9fTEVOR1RIO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5sYXN0aW5kZXhvZlxubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiBuYXRpdmVMYXN0SW5kZXhPZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gbWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPICYmIE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgcmV0dXJuIC0xO1xufSA6IG5hdGl2ZUxhc3RJbmRleE9mO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS11cmwnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcbnZhciBhcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNvZGVBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY29kZUF0O1xudmFyIHRvQVNDSUkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXNNb2R1bGUgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIE5hdGl2ZVVSTCA9IGdsb2JhbC5VUkw7XG52YXIgVVJMU2VhcmNoUGFyYW1zID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLlVSTFNlYXJjaFBhcmFtcztcbnZhciBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLmdldFN0YXRlO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFVSTFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoJ1VSTCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcblxudmFyIElOVkFMSURfQVVUSE9SSVRZID0gJ0ludmFsaWQgYXV0aG9yaXR5JztcbnZhciBJTlZBTElEX1NDSEVNRSA9ICdJbnZhbGlkIHNjaGVtZSc7XG52YXIgSU5WQUxJRF9IT1NUID0gJ0ludmFsaWQgaG9zdCc7XG52YXIgSU5WQUxJRF9QT1JUID0gJ0ludmFsaWQgcG9ydCc7XG5cbnZhciBBTFBIQSA9IC9bQS1aYS16XS87XG52YXIgQUxQSEFOVU1FUklDID0gL1tcXGQrLS5BLVphLXpdLztcbnZhciBESUdJVCA9IC9cXGQvO1xudmFyIEhFWF9TVEFSVCA9IC9eKDB4fDBYKS87XG52YXIgT0NUID0gL15bMC03XSskLztcbnZhciBERUMgPSAvXlxcZCskLztcbnZhciBIRVggPSAvXltcXGRBLUZhLWZdKyQvO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UID0gL1tcXHUwMDAwXFx1MDAwOVxcdTAwMEFcXHUwMDBEICMlLzo/QFtcXFxcXV0vO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UID0gL1tcXHUwMDAwXFx1MDAwOVxcdTAwMEFcXHUwMDBEICMvOj9AW1xcXFxdXS87XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxudmFyIExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UgPSAvXltcXHUwMDAwLVxcdTAwMUYgXSt8W1xcdTAwMDAtXFx1MDAxRiBdKyQvZztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG52YXIgVEFCX0FORF9ORVdfTElORSA9IC9bXFx1MDAwOVxcdTAwMEFcXHUwMDBEXS9nO1xudmFyIEVPRjtcblxudmFyIHBhcnNlSG9zdCA9IGZ1bmN0aW9uICh1cmwsIGlucHV0KSB7XG4gIHZhciByZXN1bHQsIGNvZGVQb2ludHMsIGluZGV4O1xuICBpZiAoaW5wdXQuY2hhckF0KDApID09ICdbJykge1xuICAgIGlmIChpbnB1dC5jaGFyQXQoaW5wdXQubGVuZ3RoIC0gMSkgIT0gJ10nKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHJlc3VsdCA9IHBhcnNlSVB2NihpbnB1dC5zbGljZSgxLCAtMSkpO1xuICAgIGlmICghcmVzdWx0KSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICAvLyBvcGFxdWUgaG9zdFxuICB9IGVsc2UgaWYgKCFpc1NwZWNpYWwodXJsKSkge1xuICAgIGlmIChGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5ULnRlc3QoaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHJlc3VsdCA9ICcnO1xuICAgIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvZGVQb2ludHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByZXN1bHQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2luZGV4XSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgfVxuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICB9IGVsc2Uge1xuICAgIGlucHV0ID0gdG9BU0NJSShpbnB1dCk7XG4gICAgaWYgKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQudGVzdChpbnB1dCkpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgcmVzdWx0ID0gcGFyc2VJUHY0KGlucHV0KTtcbiAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgcGFyc2VJUHY0ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBwYXJ0cyA9IGlucHV0LnNwbGl0KCcuJyk7XG4gIHZhciBwYXJ0c0xlbmd0aCwgbnVtYmVycywgaW5kZXgsIHBhcnQsIHJhZGl4LCBudW1iZXIsIGlwdjQ7XG4gIGlmIChwYXJ0cy5sZW5ndGggJiYgcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gPT0gJycpIHtcbiAgICBwYXJ0cy5wb3AoKTtcbiAgfVxuICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aDtcbiAgaWYgKHBhcnRzTGVuZ3RoID4gNCkgcmV0dXJuIGlucHV0O1xuICBudW1iZXJzID0gW107XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgcGFydCA9IHBhcnRzW2luZGV4XTtcbiAgICBpZiAocGFydCA9PSAnJykgcmV0dXJuIGlucHV0O1xuICAgIHJhZGl4ID0gMTA7XG4gICAgaWYgKHBhcnQubGVuZ3RoID4gMSAmJiBwYXJ0LmNoYXJBdCgwKSA9PSAnMCcpIHtcbiAgICAgIHJhZGl4ID0gSEVYX1NUQVJULnRlc3QocGFydCkgPyAxNiA6IDg7XG4gICAgICBwYXJ0ID0gcGFydC5zbGljZShyYWRpeCA9PSA4ID8gMSA6IDIpO1xuICAgIH1cbiAgICBpZiAocGFydCA9PT0gJycpIHtcbiAgICAgIG51bWJlciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKHJhZGl4ID09IDEwID8gREVDIDogcmFkaXggPT0gOCA/IE9DVCA6IEhFWCkudGVzdChwYXJ0KSkgcmV0dXJuIGlucHV0O1xuICAgICAgbnVtYmVyID0gcGFyc2VJbnQocGFydCwgcmFkaXgpO1xuICAgIH1cbiAgICBudW1iZXJzLnB1c2gobnVtYmVyKTtcbiAgfVxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIG51bWJlciA9IG51bWJlcnNbaW5kZXhdO1xuICAgIGlmIChpbmRleCA9PSBwYXJ0c0xlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChudW1iZXIgPj0gcG93KDI1NiwgNSAtIHBhcnRzTGVuZ3RoKSkgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPiAyNTUpIHJldHVybiBudWxsO1xuICB9XG4gIGlwdjQgPSBudW1iZXJzLnBvcCgpO1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBudW1iZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGlwdjQgKz0gbnVtYmVyc1tpbmRleF0gKiBwb3coMjU2LCAzIC0gaW5kZXgpO1xuICB9XG4gIHJldHVybiBpcHY0O1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG52YXIgcGFyc2VJUHY2ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBhZGRyZXNzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICB2YXIgcGllY2VJbmRleCA9IDA7XG4gIHZhciBjb21wcmVzcyA9IG51bGw7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIHZhbHVlLCBsZW5ndGgsIG51bWJlcnNTZWVuLCBpcHY0UGllY2UsIG51bWJlciwgc3dhcHMsIHN3YXA7XG5cbiAgdmFyIGNoYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlucHV0LmNoYXJBdChwb2ludGVyKTtcbiAgfTtcblxuICBpZiAoY2hhcigpID09ICc6Jykge1xuICAgIGlmIChpbnB1dC5jaGFyQXQoMSkgIT0gJzonKSByZXR1cm47XG4gICAgcG9pbnRlciArPSAyO1xuICAgIHBpZWNlSW5kZXgrKztcbiAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gIH1cbiAgd2hpbGUgKGNoYXIoKSkge1xuICAgIGlmIChwaWVjZUluZGV4ID09IDgpIHJldHVybjtcbiAgICBpZiAoY2hhcigpID09ICc6Jykge1xuICAgICAgaWYgKGNvbXByZXNzICE9PSBudWxsKSByZXR1cm47XG4gICAgICBwb2ludGVyKys7XG4gICAgICBwaWVjZUluZGV4Kys7XG4gICAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFsdWUgPSBsZW5ndGggPSAwO1xuICAgIHdoaWxlIChsZW5ndGggPCA0ICYmIEhFWC50ZXN0KGNoYXIoKSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKiAxNiArIHBhcnNlSW50KGNoYXIoKSwgMTYpO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgbGVuZ3RoKys7XG4gICAgfVxuICAgIGlmIChjaGFyKCkgPT0gJy4nKSB7XG4gICAgICBpZiAobGVuZ3RoID09IDApIHJldHVybjtcbiAgICAgIHBvaW50ZXIgLT0gbGVuZ3RoO1xuICAgICAgaWYgKHBpZWNlSW5kZXggPiA2KSByZXR1cm47XG4gICAgICBudW1iZXJzU2VlbiA9IDA7XG4gICAgICB3aGlsZSAoY2hhcigpKSB7XG4gICAgICAgIGlwdjRQaWVjZSA9IG51bGw7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA+IDApIHtcbiAgICAgICAgICBpZiAoY2hhcigpID09ICcuJyAmJiBudW1iZXJzU2VlbiA8IDQpIHBvaW50ZXIrKztcbiAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIURJR0lULnRlc3QoY2hhcigpKSkgcmV0dXJuO1xuICAgICAgICB3aGlsZSAoRElHSVQudGVzdChjaGFyKCkpKSB7XG4gICAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQoY2hhcigpLCAxMCk7XG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA9PT0gbnVsbCkgaXB2NFBpZWNlID0gbnVtYmVyO1xuICAgICAgICAgIGVsc2UgaWYgKGlwdjRQaWVjZSA9PSAwKSByZXR1cm47XG4gICAgICAgICAgZWxzZSBpcHY0UGllY2UgPSBpcHY0UGllY2UgKiAxMCArIG51bWJlcjtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID4gMjU1KSByZXR1cm47XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9XG4gICAgICAgIGFkZHJlc3NbcGllY2VJbmRleF0gPSBhZGRyZXNzW3BpZWNlSW5kZXhdICogMjU2ICsgaXB2NFBpZWNlO1xuICAgICAgICBudW1iZXJzU2VlbisrO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPT0gMiB8fCBudW1iZXJzU2VlbiA9PSA0KSBwaWVjZUluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAobnVtYmVyc1NlZW4gIT0gNCkgcmV0dXJuO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaGFyKCkgPT0gJzonKSB7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBpZiAoIWNoYXIoKSkgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY2hhcigpKSByZXR1cm47XG4gICAgYWRkcmVzc1twaWVjZUluZGV4KytdID0gdmFsdWU7XG4gIH1cbiAgaWYgKGNvbXByZXNzICE9PSBudWxsKSB7XG4gICAgc3dhcHMgPSBwaWVjZUluZGV4IC0gY29tcHJlc3M7XG4gICAgcGllY2VJbmRleCA9IDc7XG4gICAgd2hpbGUgKHBpZWNlSW5kZXggIT0gMCAmJiBzd2FwcyA+IDApIHtcbiAgICAgIHN3YXAgPSBhZGRyZXNzW3BpZWNlSW5kZXhdO1xuICAgICAgYWRkcmVzc1twaWVjZUluZGV4LS1dID0gYWRkcmVzc1tjb21wcmVzcyArIHN3YXBzIC0gMV07XG4gICAgICBhZGRyZXNzW2NvbXByZXNzICsgLS1zd2Fwc10gPSBzd2FwO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwaWVjZUluZGV4ICE9IDgpIHJldHVybjtcbiAgcmV0dXJuIGFkZHJlc3M7XG59O1xuXG52YXIgZmluZExvbmdlc3RaZXJvU2VxdWVuY2UgPSBmdW5jdGlvbiAoaXB2Nikge1xuICB2YXIgbWF4SW5kZXggPSBudWxsO1xuICB2YXIgbWF4TGVuZ3RoID0gMTtcbiAgdmFyIGN1cnJTdGFydCA9IG51bGw7XG4gIHZhciBjdXJyTGVuZ3RoID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgZm9yICg7IGluZGV4IDwgODsgaW5kZXgrKykge1xuICAgIGlmIChpcHY2W2luZGV4XSAhPT0gMCkge1xuICAgICAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gICAgICB9XG4gICAgICBjdXJyU3RhcnQgPSBudWxsO1xuICAgICAgY3Vyckxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyU3RhcnQgPT09IG51bGwpIGN1cnJTdGFydCA9IGluZGV4O1xuICAgICAgKytjdXJyTGVuZ3RoO1xuICAgIH1cbiAgfVxuICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgIG1heEluZGV4ID0gY3VyclN0YXJ0O1xuICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG1heEluZGV4O1xufTtcblxudmFyIHNlcmlhbGl6ZUhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICB2YXIgcmVzdWx0LCBpbmRleCwgY29tcHJlc3MsIGlnbm9yZTA7XG4gIC8vIGlwdjRcbiAgaWYgKHR5cGVvZiBob3N0ID09ICdudW1iZXInKSB7XG4gICAgcmVzdWx0ID0gW107XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0LnVuc2hpZnQoaG9zdCAlIDI1Nik7XG4gICAgICBob3N0ID0gZmxvb3IoaG9zdCAvIDI1Nik7XG4gICAgfSByZXR1cm4gcmVzdWx0LmpvaW4oJy4nKTtcbiAgLy8gaXB2NlxuICB9IGVsc2UgaWYgKHR5cGVvZiBob3N0ID09ICdvYmplY3QnKSB7XG4gICAgcmVzdWx0ID0gJyc7XG4gICAgY29tcHJlc3MgPSBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShob3N0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoaWdub3JlMCAmJiBob3N0W2luZGV4XSA9PT0gMCkgY29udGludWU7XG4gICAgICBpZiAoaWdub3JlMCkgaWdub3JlMCA9IGZhbHNlO1xuICAgICAgaWYgKGNvbXByZXNzID09PSBpbmRleCkge1xuICAgICAgICByZXN1bHQgKz0gaW5kZXggPyAnOicgOiAnOjonO1xuICAgICAgICBpZ25vcmUwID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCArPSBob3N0W2luZGV4XS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChpbmRleCA8IDcpIHJlc3VsdCArPSAnOic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnWycgKyByZXN1bHQgKyAnXSc7XG4gIH0gcmV0dXJuIGhvc3Q7XG59O1xuXG52YXIgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCA9IHt9O1xudmFyIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCwge1xuICAnICc6IDEsICdcIic6IDEsICc8JzogMSwgJz4nOiAxLCAnYCc6IDFcbn0pO1xudmFyIHBhdGhQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyMnOiAxLCAnPyc6IDEsICd7JzogMSwgJ30nOiAxXG59KTtcbnZhciB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIHBhdGhQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcvJzogMSwgJzonOiAxLCAnOyc6IDEsICc9JzogMSwgJ0AnOiAxLCAnWyc6IDEsICdcXFxcJzogMSwgJ10nOiAxLCAnXic6IDEsICd8JzogMVxufSk7XG5cbnZhciBwZXJjZW50RW5jb2RlID0gZnVuY3Rpb24gKGNoYXIsIHNldCkge1xuICB2YXIgY29kZSA9IGNvZGVBdChjaGFyLCAwKTtcbiAgcmV0dXJuIGNvZGUgPiAweDIwICYmIGNvZGUgPCAweDdGICYmICFoYXMoc2V0LCBjaGFyKSA/IGNoYXIgOiBlbmNvZGVVUklDb21wb25lbnQoY2hhcik7XG59O1xuXG52YXIgc3BlY2lhbFNjaGVtZXMgPSB7XG4gIGZ0cDogMjEsXG4gIGZpbGU6IG51bGwsXG4gIGh0dHA6IDgwLFxuICBodHRwczogNDQzLFxuICB3czogODAsXG4gIHdzczogNDQzXG59O1xuXG52YXIgaXNTcGVjaWFsID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gaGFzKHNwZWNpYWxTY2hlbWVzLCB1cmwuc2NoZW1lKTtcbn07XG5cbnZhciBpbmNsdWRlc0NyZWRlbnRpYWxzID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gdXJsLnVzZXJuYW1lICE9ICcnIHx8IHVybC5wYXNzd29yZCAhPSAnJztcbn07XG5cbnZhciBjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiAhdXJsLmhvc3QgfHwgdXJsLmNhbm5vdEJlQUJhc2VVUkwgfHwgdXJsLnNjaGVtZSA9PSAnZmlsZSc7XG59O1xuXG52YXIgaXNXaW5kb3dzRHJpdmVMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nLCBub3JtYWxpemVkKSB7XG4gIHZhciBzZWNvbmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09IDIgJiYgQUxQSEEudGVzdChzdHJpbmcuY2hhckF0KDApKVxuICAgICYmICgoc2Vjb25kID0gc3RyaW5nLmNoYXJBdCgxKSkgPT0gJzonIHx8ICghbm9ybWFsaXplZCAmJiBzZWNvbmQgPT0gJ3wnKSk7XG59O1xuXG52YXIgc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIHRoaXJkO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA+IDEgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoc3RyaW5nLnNsaWNlKDAsIDIpKSAmJiAoXG4gICAgc3RyaW5nLmxlbmd0aCA9PSAyIHx8XG4gICAgKCh0aGlyZCA9IHN0cmluZy5jaGFyQXQoMikpID09PSAnLycgfHwgdGhpcmQgPT09ICdcXFxcJyB8fCB0aGlyZCA9PT0gJz8nIHx8IHRoaXJkID09PSAnIycpXG4gICk7XG59O1xuXG52YXIgc2hvcnRlblVSTHNQYXRoID0gZnVuY3Rpb24gKHVybCkge1xuICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICB2YXIgcGF0aFNpemUgPSBwYXRoLmxlbmd0aDtcbiAgaWYgKHBhdGhTaXplICYmICh1cmwuc2NoZW1lICE9ICdmaWxlJyB8fCBwYXRoU2l6ZSAhPSAxIHx8ICFpc1dpbmRvd3NEcml2ZUxldHRlcihwYXRoWzBdLCB0cnVlKSkpIHtcbiAgICBwYXRoLnBvcCgpO1xuICB9XG59O1xuXG52YXIgaXNTaW5nbGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4nIHx8IHNlZ21lbnQudG9Mb3dlckNhc2UoKSA9PT0gJyUyZSc7XG59O1xuXG52YXIgaXNEb3VibGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICBzZWdtZW50ID0gc2VnbWVudC50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4uJyB8fCBzZWdtZW50ID09PSAnJTJlLicgfHwgc2VnbWVudCA9PT0gJy4lMmUnIHx8IHNlZ21lbnQgPT09ICclMmUlMmUnO1xufTtcblxuLy8gU3RhdGVzOlxudmFyIFNDSEVNRV9TVEFSVCA9IHt9O1xudmFyIFNDSEVNRSA9IHt9O1xudmFyIE5PX1NDSEVNRSA9IHt9O1xudmFyIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZID0ge307XG52YXIgUEFUSF9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBSRUxBVElWRSA9IHt9O1xudmFyIFJFTEFUSVZFX1NMQVNIID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyA9IHt9O1xudmFyIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTID0ge307XG52YXIgQVVUSE9SSVRZID0ge307XG52YXIgSE9TVCA9IHt9O1xudmFyIEhPU1ROQU1FID0ge307XG52YXIgUE9SVCA9IHt9O1xudmFyIEZJTEUgPSB7fTtcbnZhciBGSUxFX1NMQVNIID0ge307XG52YXIgRklMRV9IT1NUID0ge307XG52YXIgUEFUSF9TVEFSVCA9IHt9O1xudmFyIFBBVEggPSB7fTtcbnZhciBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIID0ge307XG52YXIgUVVFUlkgPSB7fTtcbnZhciBGUkFHTUVOVCA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbnZhciBwYXJzZVVSTCA9IGZ1bmN0aW9uICh1cmwsIGlucHV0LCBzdGF0ZU92ZXJyaWRlLCBiYXNlKSB7XG4gIHZhciBzdGF0ZSA9IHN0YXRlT3ZlcnJpZGUgfHwgU0NIRU1FX1NUQVJUO1xuICB2YXIgcG9pbnRlciA9IDA7XG4gIHZhciBidWZmZXIgPSAnJztcbiAgdmFyIHNlZW5BdCA9IGZhbHNlO1xuICB2YXIgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgdmFyIHNlZW5QYXNzd29yZFRva2VuID0gZmFsc2U7XG4gIHZhciBjb2RlUG9pbnRzLCBjaGFyLCBidWZmZXJDb2RlUG9pbnRzLCBmYWlsdXJlO1xuXG4gIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgIHVybC5zY2hlbWUgPSAnJztcbiAgICB1cmwudXNlcm5hbWUgPSAnJztcbiAgICB1cmwucGFzc3dvcmQgPSAnJztcbiAgICB1cmwuaG9zdCA9IG51bGw7XG4gICAgdXJsLnBvcnQgPSBudWxsO1xuICAgIHVybC5wYXRoID0gW107XG4gICAgdXJsLnF1ZXJ5ID0gbnVsbDtcbiAgICB1cmwuZnJhZ21lbnQgPSBudWxsO1xuICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gZmFsc2U7XG4gICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UsICcnKTtcbiAgfVxuXG4gIGlucHV0ID0gaW5wdXQucmVwbGFjZShUQUJfQU5EX05FV19MSU5FLCAnJyk7XG5cbiAgY29kZVBvaW50cyA9IGFycmF5RnJvbShpbnB1dCk7XG5cbiAgd2hpbGUgKHBvaW50ZXIgPD0gY29kZVBvaW50cy5sZW5ndGgpIHtcbiAgICBjaGFyID0gY29kZVBvaW50c1twb2ludGVyXTtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIFNDSEVNRV9TVEFSVDpcbiAgICAgICAgaWYgKGNoYXIgJiYgQUxQSEEudGVzdChjaGFyKSkge1xuICAgICAgICAgIGJ1ZmZlciArPSBjaGFyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgc3RhdGUgPSBTQ0hFTUU7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICBzdGF0ZSA9IE5PX1NDSEVNRTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU0NIRU1FOlxuICAgICAgICBpZiAoY2hhciAmJiAoQUxQSEFOVU1FUklDLnRlc3QoY2hhcikgfHwgY2hhciA9PSAnKycgfHwgY2hhciA9PSAnLScgfHwgY2hhciA9PSAnLicpKSB7XG4gICAgICAgICAgYnVmZmVyICs9IGNoYXIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICc6Jykge1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIChcbiAgICAgICAgICAgIChpc1NwZWNpYWwodXJsKSAhPSBoYXMoc3BlY2lhbFNjaGVtZXMsIGJ1ZmZlcikpIHx8XG4gICAgICAgICAgICAoYnVmZmVyID09ICdmaWxlJyAmJiAoaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgfHxcbiAgICAgICAgICAgICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLmhvc3QpXG4gICAgICAgICAgKSkgcmV0dXJuO1xuICAgICAgICAgIHVybC5zY2hlbWUgPSBidWZmZXI7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSA9PSB1cmwucG9ydCkgdXJsLnBvcnQgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICAgIHN0YXRlID0gRklMRTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzU3BlY2lhbCh1cmwpICYmIGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gdXJsLnNjaGVtZSkge1xuICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzU3BlY2lhbCh1cmwpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVM7XG4gICAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9PUl9BVVRIT1JJVFk7XG4gICAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICAgIHVybC5wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgc3RhdGUgPSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgIHBvaW50ZXIgPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBOT19TQ0hFTUU6XG4gICAgICAgIGlmICghYmFzZSB8fCAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNoYXIgIT0gJyMnKSkgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICBpZiAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lO1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IHRydWU7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IGJhc2Uuc2NoZW1lID09ICdmaWxlJyA/IEZJTEUgOiBSRUxBVElWRTtcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGNhc2UgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFk6XG4gICAgICAgIGlmIChjaGFyID09ICcvJyAmJiBjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBBVEhfT1JfQVVUSE9SSVRZOlxuICAgICAgICBpZiAoY2hhciA9PSAnLycpIHtcbiAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUxBVElWRTpcbiAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lO1xuICAgICAgICBpZiAoY2hhciA9PSBFT0YpIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJy8nIHx8IChjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkpIHtcbiAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFX1NMQVNIO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucGF0aC5wb3AoKTtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUkVMQVRJVkVfU0xBU0g6XG4gICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiAoY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFxcXCcpKSB7XG4gICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcvJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUzpcbiAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgaWYgKGNoYXIgIT0gJy8nIHx8IGJ1ZmZlci5jaGFyQXQocG9pbnRlciArIDEpICE9ICcvJykgY29udGludWU7XG4gICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM6XG4gICAgICAgIGlmIChjaGFyICE9ICcvJyAmJiBjaGFyICE9ICdcXFxcJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIEFVVEhPUklUWTpcbiAgICAgICAgaWYgKGNoYXIgPT0gJ0AnKSB7XG4gICAgICAgICAgaWYgKHNlZW5BdCkgYnVmZmVyID0gJyU0MCcgKyBidWZmZXI7XG4gICAgICAgICAgc2VlbkF0ID0gdHJ1ZTtcbiAgICAgICAgICBidWZmZXJDb2RlUG9pbnRzID0gYXJyYXlGcm9tKGJ1ZmZlcik7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJDb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gYnVmZmVyQ29kZVBvaW50c1tpXTtcbiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPT0gJzonICYmICFzZWVuUGFzc3dvcmRUb2tlbikge1xuICAgICAgICAgICAgICBzZWVuUGFzc3dvcmRUb2tlbiA9IHRydWU7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVuY29kZWRDb2RlUG9pbnRzID0gcGVyY2VudEVuY29kZShjb2RlUG9pbnQsIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgICBpZiAoc2VlblBhc3N3b3JkVG9rZW4pIHVybC5wYXNzd29yZCArPSBlbmNvZGVkQ29kZVBvaW50cztcbiAgICAgICAgICAgIGVsc2UgdXJsLnVzZXJuYW1lICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBjaGFyID09IEVPRiB8fCBjaGFyID09ICcvJyB8fCBjaGFyID09ICc/JyB8fCBjaGFyID09ICcjJyB8fFxuICAgICAgICAgIChjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHNlZW5BdCAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0FVVEhPUklUWTtcbiAgICAgICAgICBwb2ludGVyIC09IGFycmF5RnJvbShidWZmZXIpLmxlbmd0aCArIDE7XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBIT1NUO1xuICAgICAgICB9IGVsc2UgYnVmZmVyICs9IGNoYXI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEhPU1Q6XG4gICAgICBjYXNlIEhPU1ROQU1FOlxuICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiB1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgIHN0YXRlID0gRklMRV9IT1NUO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJzonICYmICFzZWVuQnJhY2tldCkge1xuICAgICAgICAgIGlmIChidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgZmFpbHVyZSA9IHBhcnNlSG9zdCh1cmwsIGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUE9SVDtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSA9PSBIT1NUTkFNRSkgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoaXNTcGVjaWFsKHVybCkgJiYgYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIGJ1ZmZlciA9PSAnJyAmJiAoaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgcmV0dXJuO1xuICAgICAgICAgIGZhaWx1cmUgPSBwYXJzZUhvc3QodXJsLCBidWZmZXIpO1xuICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY2hhciA9PSAnWycpIHNlZW5CcmFja2V0ID0gdHJ1ZTtcbiAgICAgICAgICBlbHNlIGlmIChjaGFyID09ICddJykgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgICAgICAgICBidWZmZXIgKz0gY2hhcjtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBQT1JUOlxuICAgICAgICBpZiAoRElHSVQudGVzdChjaGFyKSkge1xuICAgICAgICAgIGJ1ZmZlciArPSBjaGFyO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSB8fFxuICAgICAgICAgIHN0YXRlT3ZlcnJpZGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGJ1ZmZlciAhPSAnJykge1xuICAgICAgICAgICAgdmFyIHBvcnQgPSBwYXJzZUludChidWZmZXIsIDEwKTtcbiAgICAgICAgICAgIGlmIChwb3J0ID4gMHhGRkZGKSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICAgICAgdXJsLnBvcnQgPSAoaXNTcGVjaWFsKHVybCkgJiYgcG9ydCA9PT0gc3BlY2lhbFNjaGVtZXNbdXJsLnNjaGVtZV0pID8gbnVsbCA6IHBvcnQ7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBGSUxFOlxuICAgICAgICB1cmwuc2NoZW1lID0gJ2ZpbGUnO1xuICAgICAgICBpZiAoY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFxcXCcpIHN0YXRlID0gRklMRV9TTEFTSDtcbiAgICAgICAgZWxzZSBpZiAoYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICBpZiAoY2hhciA9PSBFT0YpIHtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihjb2RlUG9pbnRzLnNsaWNlKHBvaW50ZXIpLmpvaW4oJycpKSkge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICAgICAgc2hvcnRlblVSTHNQYXRoKHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIEZJTEVfU0xBU0g6XG4gICAgICAgIGlmIChjaGFyID09ICcvJyB8fCBjaGFyID09ICdcXFxcJykge1xuICAgICAgICAgIHN0YXRlID0gRklMRV9IT1NUO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJyAmJiAhc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihjb2RlUG9pbnRzLnNsaWNlKHBvaW50ZXIpLmpvaW4oJycpKSkge1xuICAgICAgICAgIGlmIChpc1dpbmRvd3NEcml2ZUxldHRlcihiYXNlLnBhdGhbMF0sIHRydWUpKSB1cmwucGF0aC5wdXNoKGJhc2UucGF0aFswXSk7XG4gICAgICAgICAgZWxzZSB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBjYXNlIEZJTEVfSE9TVDpcbiAgICAgICAgaWYgKGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJ1xcXFwnIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlciA9PSAnJykge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZhaWx1cmUgPSBwYXJzZUhvc3QodXJsLCBidWZmZXIpO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgaWYgKHVybC5ob3N0ID09ICdsb2NhbGhvc3QnKSB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgIH0gY29udGludWU7XG4gICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hhcjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUEFUSF9TVEFSVDpcbiAgICAgICAgaWYgKGlzU3BlY2lhbCh1cmwpKSB7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGlmIChjaGFyICE9ICcvJyAmJiBjaGFyICE9ICdcXFxcJykgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hhciA9PSAnPycpIHtcbiAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyICE9IEVPRikge1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBpZiAoY2hhciAhPSAnLycpIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBBVEg6XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjaGFyID09IEVPRiB8fCBjaGFyID09ICcvJyB8fFxuICAgICAgICAgIChjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkgfHxcbiAgICAgICAgICAoIXN0YXRlT3ZlcnJpZGUgJiYgKGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGlzRG91YmxlRG90KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgIHNob3J0ZW5VUkxzUGF0aCh1cmwpO1xuICAgICAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmICEoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpKSB7XG4gICAgICAgICAgICAgIHVybC5wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNTaW5nbGVEb3QoYnVmZmVyKSkge1xuICAgICAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmICEoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpKSB7XG4gICAgICAgICAgICAgIHVybC5wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgIXVybC5wYXRoLmxlbmd0aCAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7XG4gICAgICAgICAgICAgIGlmICh1cmwuaG9zdCkgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyLmNoYXJBdCgwKSArICc6JzsgLy8gbm9ybWFsaXplIHdpbmRvd3MgZHJpdmUgbGV0dGVyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cmwucGF0aC5wdXNoKGJ1ZmZlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAoY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycpKSB7XG4gICAgICAgICAgICB3aGlsZSAodXJsLnBhdGgubGVuZ3RoID4gMSAmJiB1cmwucGF0aFswXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgdXJsLnBhdGguc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBidWZmZXIgKz0gcGVyY2VudEVuY29kZShjaGFyLCBwYXRoUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDpcbiAgICAgICAgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciAhPSBFT0YpIHtcbiAgICAgICAgICB1cmwucGF0aFswXSArPSBwZXJjZW50RW5jb2RlKGNoYXIsIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFFVRVJZOlxuICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgIT0gRU9GKSB7XG4gICAgICAgICAgaWYgKGNoYXIgPT0gXCInXCIgJiYgaXNTcGVjaWFsKHVybCkpIHVybC5xdWVyeSArPSAnJTI3JztcbiAgICAgICAgICBlbHNlIGlmIChjaGFyID09ICcjJykgdXJsLnF1ZXJ5ICs9ICclMjMnO1xuICAgICAgICAgIGVsc2UgdXJsLnF1ZXJ5ICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgRlJBR01FTlQ6XG4gICAgICAgIGlmIChjaGFyICE9IEVPRikgdXJsLmZyYWdtZW50ICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcG9pbnRlcisrO1xuICB9XG59O1xuXG4vLyBgVVJMYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtY2xhc3NcbnZhciBVUkxDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFVSTCh1cmwgLyogLCBiYXNlICovKSB7XG4gIHZhciB0aGF0ID0gYW5JbnN0YW5jZSh0aGlzLCBVUkxDb25zdHJ1Y3RvciwgJ1VSTCcpO1xuICB2YXIgYmFzZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgdXJsU3RyaW5nID0gU3RyaW5nKHVybCk7XG4gIHZhciBzdGF0ZSA9IHNldEludGVybmFsU3RhdGUodGhhdCwgeyB0eXBlOiAnVVJMJyB9KTtcbiAgdmFyIGJhc2VTdGF0ZSwgZmFpbHVyZTtcbiAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChiYXNlIGluc3RhbmNlb2YgVVJMQ29uc3RydWN0b3IpIGJhc2VTdGF0ZSA9IGdldEludGVybmFsVVJMU3RhdGUoYmFzZSk7XG4gICAgZWxzZSB7XG4gICAgICBmYWlsdXJlID0gcGFyc2VVUkwoYmFzZVN0YXRlID0ge30sIFN0cmluZyhiYXNlKSk7XG4gICAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgIH1cbiAgfVxuICBmYWlsdXJlID0gcGFyc2VVUkwoc3RhdGUsIHVybFN0cmluZywgbnVsbCwgYmFzZVN0YXRlKTtcbiAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgdmFyIHNlYXJjaFBhcmFtcyA9IHN0YXRlLnNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgdmFyIHNlYXJjaFBhcmFtc1N0YXRlID0gZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZShzZWFyY2hQYXJhbXMpO1xuICBzZWFyY2hQYXJhbXNTdGF0ZS51cGRhdGVTZWFyY2hQYXJhbXMoc3RhdGUucXVlcnkpO1xuICBzZWFyY2hQYXJhbXNTdGF0ZS51cGRhdGVVUkwgPSBmdW5jdGlvbiAoKSB7XG4gICAgc3RhdGUucXVlcnkgPSBTdHJpbmcoc2VhcmNoUGFyYW1zKSB8fCBudWxsO1xuICB9O1xuICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgdGhhdC5ocmVmID0gc2VyaWFsaXplVVJMLmNhbGwodGhhdCk7XG4gICAgdGhhdC5vcmlnaW4gPSBnZXRPcmlnaW4uY2FsbCh0aGF0KTtcbiAgICB0aGF0LnByb3RvY29sID0gZ2V0UHJvdG9jb2wuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnVzZXJuYW1lID0gZ2V0VXNlcm5hbWUuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnBhc3N3b3JkID0gZ2V0UGFzc3dvcmQuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lmhvc3QgPSBnZXRIb3N0LmNhbGwodGhhdCk7XG4gICAgdGhhdC5ob3N0bmFtZSA9IGdldEhvc3RuYW1lLmNhbGwodGhhdCk7XG4gICAgdGhhdC5wb3J0ID0gZ2V0UG9ydC5jYWxsKHRoYXQpO1xuICAgIHRoYXQucGF0aG5hbWUgPSBnZXRQYXRobmFtZS5jYWxsKHRoYXQpO1xuICAgIHRoYXQuc2VhcmNoID0gZ2V0U2VhcmNoLmNhbGwodGhhdCk7XG4gICAgdGhhdC5zZWFyY2hQYXJhbXMgPSBnZXRTZWFyY2hQYXJhbXMuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lmhhc2ggPSBnZXRIYXNoLmNhbGwodGhhdCk7XG4gIH1cbn07XG5cbnZhciBVUkxQcm90b3R5cGUgPSBVUkxDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnZhciBzZXJpYWxpemVVUkwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgc2NoZW1lID0gdXJsLnNjaGVtZTtcbiAgdmFyIHVzZXJuYW1lID0gdXJsLnVzZXJuYW1lO1xuICB2YXIgcGFzc3dvcmQgPSB1cmwucGFzc3dvcmQ7XG4gIHZhciBob3N0ID0gdXJsLmhvc3Q7XG4gIHZhciBwb3J0ID0gdXJsLnBvcnQ7XG4gIHZhciBwYXRoID0gdXJsLnBhdGg7XG4gIHZhciBxdWVyeSA9IHVybC5xdWVyeTtcbiAgdmFyIGZyYWdtZW50ID0gdXJsLmZyYWdtZW50O1xuICB2YXIgb3V0cHV0ID0gc2NoZW1lICsgJzonO1xuICBpZiAoaG9zdCAhPT0gbnVsbCkge1xuICAgIG91dHB1dCArPSAnLy8nO1xuICAgIGlmIChpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkpIHtcbiAgICAgIG91dHB1dCArPSB1c2VybmFtZSArIChwYXNzd29yZCA/ICc6JyArIHBhc3N3b3JkIDogJycpICsgJ0AnO1xuICAgIH1cbiAgICBvdXRwdXQgKz0gc2VyaWFsaXplSG9zdChob3N0KTtcbiAgICBpZiAocG9ydCAhPT0gbnVsbCkgb3V0cHV0ICs9ICc6JyArIHBvcnQ7XG4gIH0gZWxzZSBpZiAoc2NoZW1lID09ICdmaWxlJykgb3V0cHV0ICs9ICcvLyc7XG4gIG91dHB1dCArPSB1cmwuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIHBhdGguam9pbignLycpIDogJyc7XG4gIGlmIChxdWVyeSAhPT0gbnVsbCkgb3V0cHV0ICs9ICc/JyArIHF1ZXJ5O1xuICBpZiAoZnJhZ21lbnQgIT09IG51bGwpIG91dHB1dCArPSAnIycgKyBmcmFnbWVudDtcbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbnZhciBnZXRPcmlnaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgc2NoZW1lID0gdXJsLnNjaGVtZTtcbiAgdmFyIHBvcnQgPSB1cmwucG9ydDtcbiAgaWYgKHNjaGVtZSA9PSAnYmxvYicpIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBVUkwoc2NoZW1lLnBhdGhbMF0pLm9yaWdpbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9XG4gIGlmIChzY2hlbWUgPT0gJ2ZpbGUnIHx8ICFpc1NwZWNpYWwodXJsKSkgcmV0dXJuICdudWxsJztcbiAgcmV0dXJuIHNjaGVtZSArICc6Ly8nICsgc2VyaWFsaXplSG9zdCh1cmwuaG9zdCkgKyAocG9ydCAhPT0gbnVsbCA/ICc6JyArIHBvcnQgOiAnJyk7XG59O1xuXG52YXIgZ2V0UHJvdG9jb2wgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNjaGVtZSArICc6Jztcbn07XG5cbnZhciBnZXRVc2VybmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykudXNlcm5hbWU7XG59O1xuXG52YXIgZ2V0UGFzc3dvcmQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnBhc3N3b3JkO1xufTtcblxudmFyIGdldEhvc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgaG9zdCA9IHVybC5ob3N0O1xuICB2YXIgcG9ydCA9IHVybC5wb3J0O1xuICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnXG4gICAgOiBwb3J0ID09PSBudWxsID8gc2VyaWFsaXplSG9zdChob3N0KVxuICAgIDogc2VyaWFsaXplSG9zdChob3N0KSArICc6JyArIHBvcnQ7XG59O1xuXG52YXIgZ2V0SG9zdG5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBob3N0ID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5ob3N0O1xuICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnIDogc2VyaWFsaXplSG9zdChob3N0KTtcbn07XG5cbnZhciBnZXRQb3J0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcG9ydCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykucG9ydDtcbiAgcmV0dXJuIHBvcnQgPT09IG51bGwgPyAnJyA6IFN0cmluZyhwb3J0KTtcbn07XG5cbnZhciBnZXRQYXRobmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBwYXRoID0gdXJsLnBhdGg7XG4gIHJldHVybiB1cmwuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIHBhdGguam9pbignLycpIDogJyc7XG59O1xuXG52YXIgZ2V0U2VhcmNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnF1ZXJ5O1xuICByZXR1cm4gcXVlcnkgPyAnPycgKyBxdWVyeSA6ICcnO1xufTtcblxudmFyIGdldFNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2VhcmNoUGFyYW1zO1xufTtcblxudmFyIGdldEhhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBmcmFnbWVudCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykuZnJhZ21lbnQ7XG4gIHJldHVybiBmcmFnbWVudCA/ICcjJyArIGZyYWdtZW50IDogJyc7XG59O1xuXG52YXIgYWNjZXNzb3JEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGdldHRlciwgc2V0dGVyKSB7XG4gIHJldHVybiB7IGdldDogZ2V0dGVyLCBzZXQ6IHNldHRlciwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH07XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgZGVmaW5lUHJvcGVydGllcyhVUkxQcm90b3R5cGUsIHtcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ocmVmYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ocmVmXG4gICAgaHJlZjogYWNjZXNzb3JEZXNjcmlwdG9yKHNlcmlhbGl6ZVVSTCwgZnVuY3Rpb24gKGhyZWYpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHVybFN0cmluZyA9IFN0cmluZyhocmVmKTtcbiAgICAgIHZhciBmYWlsdXJlID0gcGFyc2VVUkwodXJsLCB1cmxTdHJpbmcpO1xuICAgICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICAgIGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUodXJsLnNlYXJjaFBhcmFtcykudXBkYXRlU2VhcmNoUGFyYW1zKHVybC5xdWVyeSk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUub3JpZ2luYCBnZXR0ZXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtb3JpZ2luXG4gICAgb3JpZ2luOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0T3JpZ2luKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wcm90b2NvbGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcHJvdG9jb2xcbiAgICBwcm90b2NvbDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFByb3RvY29sLCBmdW5jdGlvbiAocHJvdG9jb2wpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgcGFyc2VVUkwodXJsLCBTdHJpbmcocHJvdG9jb2wpICsgJzonLCBTQ0hFTUVfU1RBUlQpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnVzZXJuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC11c2VybmFtZVxuICAgIHVzZXJuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0VXNlcm5hbWUsIGZ1bmN0aW9uICh1c2VybmFtZSkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbShTdHJpbmcodXNlcm5hbWUpKTtcbiAgICAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkgcmV0dXJuO1xuICAgICAgdXJsLnVzZXJuYW1lID0gJyc7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdXJsLnVzZXJuYW1lICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wYXNzd29yZGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGFzc3dvcmRcbiAgICBwYXNzd29yZDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFBhc3N3b3JkLCBmdW5jdGlvbiAocGFzc3dvcmQpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oU3RyaW5nKHBhc3N3b3JkKSk7XG4gICAgICBpZiAoY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KHVybCkpIHJldHVybjtcbiAgICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHVybC5wYXNzd29yZCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdFxuICAgIGhvc3Q6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIb3N0LCBmdW5jdGlvbiAoaG9zdCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBpZiAodXJsLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICAgIHBhcnNlVVJMKHVybCwgU3RyaW5nKGhvc3QpLCBIT1NUKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0bmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdG5hbWVcbiAgICBob3N0bmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKGdldEhvc3RuYW1lLCBmdW5jdGlvbiAoaG9zdG5hbWUpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaWYgKHVybC5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgICBwYXJzZVVSTCh1cmwsIFN0cmluZyhob3N0bmFtZSksIEhPU1ROQU1FKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wb3J0YCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wb3J0XG4gICAgcG9ydDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFBvcnQsIGZ1bmN0aW9uIChwb3J0KSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkgcmV0dXJuO1xuICAgICAgcG9ydCA9IFN0cmluZyhwb3J0KTtcbiAgICAgIGlmIChwb3J0ID09ICcnKSB1cmwucG9ydCA9IG51bGw7XG4gICAgICBlbHNlIHBhcnNlVVJMKHVybCwgcG9ydCwgUE9SVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucGF0aG5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhdGhuYW1lXG4gICAgcGF0aG5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRQYXRobmFtZSwgZnVuY3Rpb24gKHBhdGhuYW1lKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmICh1cmwuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgICAgdXJsLnBhdGggPSBbXTtcbiAgICAgIHBhcnNlVVJMKHVybCwgcGF0aG5hbWUgKyAnJywgUEFUSF9TVEFSVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuc2VhcmNoYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hcbiAgICBzZWFyY2g6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRTZWFyY2gsIGZ1bmN0aW9uIChzZWFyY2gpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgc2VhcmNoID0gU3RyaW5nKHNlYXJjaCk7XG4gICAgICBpZiAoc2VhcmNoID09ICcnKSB7XG4gICAgICAgIHVybC5xdWVyeSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoJz8nID09IHNlYXJjaC5jaGFyQXQoMCkpIHNlYXJjaCA9IHNlYXJjaC5zbGljZSgxKTtcbiAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgIHBhcnNlVVJMKHVybCwgc2VhcmNoLCBRVUVSWSk7XG4gICAgICB9XG4gICAgICBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKHVybC5zZWFyY2hQYXJhbXMpLnVwZGF0ZVNlYXJjaFBhcmFtcyh1cmwucXVlcnkpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaFBhcmFtc2AgZ2V0dGVyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaHBhcmFtc1xuICAgIHNlYXJjaFBhcmFtczogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFNlYXJjaFBhcmFtcyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaGFzaGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaFxuICAgIGhhc2g6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIYXNoLCBmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBoYXNoID0gU3RyaW5nKGhhc2gpO1xuICAgICAgaWYgKGhhc2ggPT0gJycpIHtcbiAgICAgICAgdXJsLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCcjJyA9PSBoYXNoLmNoYXJBdCgwKSkgaGFzaCA9IGhhc2guc2xpY2UoMSk7XG4gICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgIHBhcnNlVVJMKHVybCwgaGFzaCwgRlJBR01FTlQpO1xuICAgIH0pXG4gIH0pO1xufVxuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxucmVkZWZpbmUoVVJMUHJvdG90eXBlLCAndG9KU09OJywgZnVuY3Rpb24gdG9KU09OKCkge1xuICByZXR1cm4gc2VyaWFsaXplVVJMLmNhbGwodGhpcyk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jVVJMLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxucmVkZWZpbmUoVVJMUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHNlcmlhbGl6ZVVSTC5jYWxsKHRoaXMpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5pZiAoTmF0aXZlVVJMKSB7XG4gIHZhciBuYXRpdmVDcmVhdGVPYmplY3RVUkwgPSBOYXRpdmVVUkwuY3JlYXRlT2JqZWN0VVJMO1xuICB2YXIgbmF0aXZlUmV2b2tlT2JqZWN0VVJMID0gTmF0aXZlVVJMLnJldm9rZU9iamVjdFVSTDtcbiAgLy8gYFVSTC5jcmVhdGVPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML2NyZWF0ZU9iamVjdFVSTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgaWYgKG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCkgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdjcmVhdGVPYmplY3RVUkwnLCBmdW5jdGlvbiBjcmVhdGVPYmplY3RVUkwoYmxvYikge1xuICAgIHJldHVybiBuYXRpdmVDcmVhdGVPYmplY3RVUkwuYXBwbHkoTmF0aXZlVVJMLCBhcmd1bWVudHMpO1xuICB9KTtcbiAgLy8gYFVSTC5yZXZva2VPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML3Jldm9rZU9iamVjdFVSTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgaWYgKG5hdGl2ZVJldm9rZU9iamVjdFVSTCkgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdyZXZva2VPYmplY3RVUkwnLCBmdW5jdGlvbiByZXZva2VPYmplY3RVUkwodXJsKSB7XG4gICAgcmV0dXJuIG5hdGl2ZVJldm9rZU9iamVjdFVSTC5hcHBseShOYXRpdmVVUkwsIGFyZ3VtZW50cyk7XG4gIH0pO1xufVxuXG5zZXRUb1N0cmluZ1RhZyhVUkxDb25zdHJ1Y3RvciwgJ1VSTCcpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgVVJMOiBVUkxDb25zdHJ1Y3RvclxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xuXG52YXIgbmF0aXZlQXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxubW9kdWxlLmV4cG9ydHMgPSAhbmF0aXZlQXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gc2hvdWxkIGhhdmUgY29ycmVjdCBvcmRlciBvZiBvcGVyYXRpb25zIChFZGdlIGJ1ZylcbiAgaWYgKERFU0NSSVBUT1JTICYmIG5hdGl2ZUFzc2lnbih7IGI6IDEgfSwgbmF0aXZlQXNzaWduKGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgJ2InLCB7XG4gICAgICAgIHZhbHVlOiAzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9KSwgeyBiOiAyIH0pKS5iICE9PSAxKSByZXR1cm4gdHJ1ZTtcbiAgLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIHZhciBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbc3ltYm9sXSA9IDc7XG4gIGFscGhhYmV0LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHIpIHsgQltjaHJdID0gY2hyOyB9KTtcbiAgcmV0dXJuIG5hdGl2ZUFzc2lnbih7fSwgQSlbc3ltYm9sXSAhPSA3IHx8IG9iamVjdEtleXMobmF0aXZlQXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gYWxwaGFiZXQ7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbiAgd2hpbGUgKGFyZ3VtZW50c0xlbmd0aCA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJbmRleGVkT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBvYmplY3RLZXlzKFMpLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoUykpIDogb2JqZWN0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6IG5hdGl2ZUFzc2lnbjtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9wdW55Y29kZS5qcy9ibG9iL21hc3Rlci9wdW55Y29kZS5qc1xudmFyIG1heEludCA9IDIxNDc0ODM2NDc7IC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcbnZhciBiYXNlID0gMzY7XG52YXIgdE1pbiA9IDE7XG52YXIgdE1heCA9IDI2O1xudmFyIHNrZXcgPSAzODtcbnZhciBkYW1wID0gNzAwO1xudmFyIGluaXRpYWxCaWFzID0gNzI7XG52YXIgaW5pdGlhbE4gPSAxMjg7IC8vIDB4ODBcbnZhciBkZWxpbWl0ZXIgPSAnLSc7IC8vICdcXHgyRCdcbnZhciByZWdleE5vbkFTQ0lJID0gL1teXFwwLVxcdTAwN0VdLzsgLy8gbm9uLUFTQ0lJIGNoYXJzXG52YXIgcmVnZXhTZXBhcmF0b3JzID0gL1suXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nOyAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG52YXIgT1ZFUkZMT1dfRVJST1IgPSAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnO1xudmFyIGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG4gKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG4gKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG4gKiBtYXRjaGluZyBVVEYtMTYuXG4gKi9cbnZhciB1Y3MyZGVjb2RlID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIHZhciBjb3VudGVyID0gMDtcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcbiAgICBpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgICAvLyBJdCdzIGEgaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyLlxuICAgICAgdmFyIGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcbiAgICAgIGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBMb3cgc3Vycm9nYXRlLlxuICAgICAgICBvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSXQncyBhbiB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGVcbiAgICAgICAgLy8gbmV4dCBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXIuXG4gICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgICAgY291bnRlci0tO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cbiAqL1xudmFyIGRpZ2l0VG9CYXNpYyA9IGZ1bmN0aW9uIChkaWdpdCkge1xuICAvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuICAvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcbiAgcmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KTtcbn07XG5cbi8qKlxuICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG4gKi9cbnZhciBhZGFwdCA9IGZ1bmN0aW9uIChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcbiAgdmFyIGsgPSAwO1xuICBkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuICBkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG4gIGZvciAoOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuICAgIGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcbiAgfVxuICByZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcbiAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAgbWF4LXN0YXRlbWVudHNcbnZhciBlbmNvZGUgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuXG4gIC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIGFuIGFycmF5IG9mIFVuaWNvZGUgY29kZSBwb2ludHMuXG4gIGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cbiAgLy8gQ2FjaGUgdGhlIGxlbmd0aC5cbiAgdmFyIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHN0YXRlLlxuICB2YXIgbiA9IGluaXRpYWxOO1xuICB2YXIgZGVsdGEgPSAwO1xuICB2YXIgYmlhcyA9IGluaXRpYWxCaWFzO1xuICB2YXIgaSwgY3VycmVudFZhbHVlO1xuXG4gIC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHMuXG4gIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgIGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG4gICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuICB2YXIgaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aDsgLy8gbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cbiAgLy8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgd2l0aCBhIGRlbGltaXRlciB1bmxlc3MgaXQncyBlbXB0eS5cbiAgaWYgKGJhc2ljTGVuZ3RoKSB7XG4gICAgb3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcbiAgfVxuXG4gIC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcbiAgd2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcbiAgICAvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0IGxhcmdlciBvbmU6XG4gICAgdmFyIG0gPSBtYXhJbnQ7XG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG4gICAgICAgIG0gPSBjdXJyZW50VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LCBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvdy5cbiAgICB2YXIgaGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuICAgIGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG4gICAgICB0aHJvdyBSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICB9XG5cbiAgICBkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuICAgIG4gPSBtO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcbiAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFZhbHVlID09IG4pIHtcbiAgICAgICAgLy8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXG4gICAgICAgIHZhciBxID0gZGVsdGE7XG4gICAgICAgIGZvciAodmFyIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuICAgICAgICAgIHZhciB0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcbiAgICAgICAgICBpZiAocSA8IHQpIGJyZWFrO1xuICAgICAgICAgIHZhciBxTWludXNUID0gcSAtIHQ7XG4gICAgICAgICAgdmFyIGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCkpKTtcbiAgICAgICAgICBxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxKSkpO1xuICAgICAgICBiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuICAgICAgICBkZWx0YSA9IDA7XG4gICAgICAgICsraGFuZGxlZENQQ291bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgKytkZWx0YTtcbiAgICArK247XG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBlbmNvZGVkID0gW107XG4gIHZhciBsYWJlbHMgPSBpbnB1dC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx1MDAyRScpLnNwbGl0KCcuJyk7XG4gIHZhciBpLCBsYWJlbDtcbiAgZm9yIChpID0gMDsgaSA8IGxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgIGxhYmVsID0gbGFiZWxzW2ldO1xuICAgIGVuY29kZWQucHVzaChyZWdleE5vbkFTQ0lJLnRlc3QobGFiZWwpID8gJ3huLS0nICsgZW5jb2RlKGxhYmVsKSA6IGxhYmVsKTtcbiAgfVxuICByZXR1cm4gZW5jb2RlZC5qb2luKCcuJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgVVNFX05BVElWRV9VUkwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXVybCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciAkZmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIEhlYWRlcnMgPSBnZXRCdWlsdEluKCdIZWFkZXJzJyk7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVVJMX1NFQVJDSF9QQVJBTVMgPSAnVVJMU2VhcmNoUGFyYW1zJztcbnZhciBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiA9IFVSTF9TRUFSQ0hfUEFSQU1TICsgJ0l0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TKTtcbnZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUik7XG5cbnZhciBwbHVzID0gL1xcKy9nO1xudmFyIHNlcXVlbmNlcyA9IEFycmF5KDQpO1xuXG52YXIgcGVyY2VudFNlcXVlbmNlID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gIHJldHVybiBzZXF1ZW5jZXNbYnl0ZXMgLSAxXSB8fCAoc2VxdWVuY2VzW2J5dGVzIC0gMV0gPSBSZWdFeHAoJygoPzolW1xcXFxkYS1mXXsyfSl7JyArIGJ5dGVzICsgJ30pJywgJ2dpJykpO1xufTtcblxudmFyIHBlcmNlbnREZWNvZGUgPSBmdW5jdGlvbiAoc2VxdWVuY2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHNlcXVlbmNlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gc2VxdWVuY2U7XG4gIH1cbn07XG5cbnZhciBkZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gaXQucmVwbGFjZShwbHVzLCAnICcpO1xuICB2YXIgYnl0ZXMgPSA0O1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3aGlsZSAoYnl0ZXMpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKHBlcmNlbnRTZXF1ZW5jZShieXRlcy0tKSwgcGVyY2VudERlY29kZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5cbnZhciBmaW5kID0gL1shJygpfl18JTIwL2c7XG5cbnZhciByZXBsYWNlID0ge1xuICAnISc6ICclMjEnLFxuICBcIidcIjogJyUyNycsXG4gICcoJzogJyUyOCcsXG4gICcpJzogJyUyOScsXG4gICd+JzogJyU3RScsXG4gICclMjAnOiAnKydcbn07XG5cbnZhciByZXBsYWNlciA9IGZ1bmN0aW9uIChtYXRjaCkge1xuICByZXR1cm4gcmVwbGFjZVttYXRjaF07XG59O1xuXG52YXIgc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoaXQpLnJlcGxhY2UoZmluZCwgcmVwbGFjZXIpO1xufTtcblxudmFyIHBhcnNlU2VhcmNoUGFyYW1zID0gZnVuY3Rpb24gKHJlc3VsdCwgcXVlcnkpIHtcbiAgaWYgKHF1ZXJ5KSB7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBxdWVyeS5zcGxpdCgnJicpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGF0dHJpYnV0ZSwgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaW5kZXgrK107XG4gICAgICBpZiAoYXR0cmlidXRlLmxlbmd0aCkge1xuICAgICAgICBlbnRyeSA9IGF0dHJpYnV0ZS5zcGxpdCgnPScpO1xuICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAga2V5OiBkZXNlcmlhbGl6ZShlbnRyeS5zaGlmdCgpKSxcbiAgICAgICAgICB2YWx1ZTogZGVzZXJpYWxpemUoZW50cnkuam9pbignPScpKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciB1cGRhdGVTZWFyY2hQYXJhbXMgPSBmdW5jdGlvbiAocXVlcnkpIHtcbiAgdGhpcy5lbnRyaWVzLmxlbmd0aCA9IDA7XG4gIHBhcnNlU2VhcmNoUGFyYW1zKHRoaXMuZW50cmllcywgcXVlcnkpO1xufTtcblxudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gZnVuY3Rpb24gKHBhc3NlZCwgcmVxdWlyZWQpIHtcbiAgaWYgKHBhc3NlZCA8IHJlcXVpcmVkKSB0aHJvdyBUeXBlRXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7XG59O1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIEl0ZXJhdG9yKHBhcmFtcywga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUixcbiAgICBpdGVyYXRvcjogZ2V0SXRlcmF0b3IoZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZShwYXJhbXMpLmVudHJpZXMpLFxuICAgIGtpbmQ6IGtpbmRcbiAgfSk7XG59LCAnSXRlcmF0b3InLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUodGhpcyk7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIHN0ZXAgPSBzdGF0ZS5pdGVyYXRvci5uZXh0KCk7XG4gIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gIGlmICghc3RlcC5kb25lKSB7XG4gICAgc3RlcC52YWx1ZSA9IGtpbmQgPT09ICdrZXlzJyA/IGVudHJ5LmtleSA6IGtpbmQgPT09ICd2YWx1ZXMnID8gZW50cnkudmFsdWUgOiBbZW50cnkua2V5LCBlbnRyeS52YWx1ZV07XG4gIH0gcmV0dXJuIHN0ZXA7XG59KTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtc2AgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaW50ZXJmYWNlLXVybHNlYXJjaHBhcmFtc1xudmFyIFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMU2VhcmNoUGFyYW1zKC8qIGluaXQgKi8pIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwgVVJMX1NFQVJDSF9QQVJBTVMpO1xuICB2YXIgaW5pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkO1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBlbnRyaWVzID0gW107XG4gIHZhciBpdGVyYXRvck1ldGhvZCwgaXRlcmF0b3IsIG5leHQsIHN0ZXAsIGVudHJ5SXRlcmF0b3IsIGVudHJ5TmV4dCwgZmlyc3QsIHNlY29uZCwga2V5O1xuXG4gIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TLFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgdXBkYXRlVVJMOiBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sXG4gICAgdXBkYXRlU2VhcmNoUGFyYW1zOiB1cGRhdGVTZWFyY2hQYXJhbXNcbiAgfSk7XG5cbiAgaWYgKGluaXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChpc09iamVjdChpbml0KSkge1xuICAgICAgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChpbml0KTtcbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3JNZXRob2QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaXRlcmF0b3IgPSBpdGVyYXRvck1ldGhvZC5jYWxsKGluaXQpO1xuICAgICAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICAgICAgICBlbnRyeUl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoYW5PYmplY3Qoc3RlcC52YWx1ZSkpO1xuICAgICAgICAgIGVudHJ5TmV4dCA9IGVudHJ5SXRlcmF0b3IubmV4dDtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoZmlyc3QgPSBlbnRyeU5leHQuY2FsbChlbnRyeUl0ZXJhdG9yKSkuZG9uZSB8fFxuICAgICAgICAgICAgKHNlY29uZCA9IGVudHJ5TmV4dC5jYWxsKGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgICAhZW50cnlOZXh0LmNhbGwoZW50cnlJdGVyYXRvcikuZG9uZVxuICAgICAgICAgICkgdGhyb3cgVHlwZUVycm9yKCdFeHBlY3RlZCBzZXF1ZW5jZSB3aXRoIGxlbmd0aCAyJyk7XG4gICAgICAgICAgZW50cmllcy5wdXNoKHsga2V5OiBmaXJzdC52YWx1ZSArICcnLCB2YWx1ZTogc2Vjb25kLnZhbHVlICsgJycgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBmb3IgKGtleSBpbiBpbml0KSBpZiAoaGFzT3duKGluaXQsIGtleSkpIGVudHJpZXMucHVzaCh7IGtleToga2V5LCB2YWx1ZTogaW5pdFtrZXldICsgJycgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlU2VhcmNoUGFyYW1zKGVudHJpZXMsIHR5cGVvZiBpbml0ID09PSAnc3RyaW5nJyA/IGluaXQuY2hhckF0KDApID09PSAnPycgPyBpbml0LnNsaWNlKDEpIDogaW5pdCA6IGluaXQgKyAnJyk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlID0gVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG5yZWRlZmluZUFsbChVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIHtcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuYXBwZW50YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWFwcGVuZFxuICBhcHBlbmQ6IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDIpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgc3RhdGUuZW50cmllcy5wdXNoKHsga2V5OiBuYW1lICsgJycsIHZhbHVlOiB2YWx1ZSArICcnIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5kZWxldGVgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZGVsZXRlXG4gICdkZWxldGUnOiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSBlbnRyaWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBlbHNlIGluZGV4Kys7XG4gICAgfVxuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0XG4gIGdldDogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gbmFtZSArICcnO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcmV0dXJuIGVudHJpZXNbaW5kZXhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZ2V0QWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldGFsbFxuICBnZXRBbGw6IGZ1bmN0aW9uIGdldEFsbChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnJztcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSByZXN1bHQucHVzaChlbnRyaWVzW2luZGV4XS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmhhc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1oYXNcbiAgaGFzOiBmdW5jdGlvbiBoYXMobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXgrK10ua2V5ID09PSBrZXkpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnNldGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1zZXRcbiAgc2V0OiBmdW5jdGlvbiBzZXQobmFtZSwgdmFsdWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllcztcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICB2YXIga2V5ID0gbmFtZSArICcnO1xuICAgIHZhciB2YWwgPSB2YWx1ZSArICcnO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGVudHJ5O1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgaWYgKGVudHJ5LmtleSA9PT0ga2V5KSB7XG4gICAgICAgIGlmIChmb3VuZCkgZW50cmllcy5zcGxpY2UoaW5kZXgtLSwgMSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBlbnRyeS52YWx1ZSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWZvdW5kKSBlbnRyaWVzLnB1c2goeyBrZXk6IGtleSwgdmFsdWU6IHZhbCB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1zb3J0XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoKSB7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgLy8gQXJyYXkjc29ydCBpcyBub3Qgc3RhYmxlIGluIHNvbWUgZW5naW5lc1xuICAgIHZhciBzbGljZSA9IGVudHJpZXMuc2xpY2UoKTtcbiAgICB2YXIgZW50cnksIGVudHJpZXNJbmRleCwgc2xpY2VJbmRleDtcbiAgICBlbnRyaWVzLmxlbmd0aCA9IDA7XG4gICAgZm9yIChzbGljZUluZGV4ID0gMDsgc2xpY2VJbmRleCA8IHNsaWNlLmxlbmd0aDsgc2xpY2VJbmRleCsrKSB7XG4gICAgICBlbnRyeSA9IHNsaWNlW3NsaWNlSW5kZXhdO1xuICAgICAgZm9yIChlbnRyaWVzSW5kZXggPSAwOyBlbnRyaWVzSW5kZXggPCBzbGljZUluZGV4OyBlbnRyaWVzSW5kZXgrKykge1xuICAgICAgICBpZiAoZW50cmllc1tlbnRyaWVzSW5kZXhdLmtleSA+IGVudHJ5LmtleSkge1xuICAgICAgICAgIGVudHJpZXMuc3BsaWNlKGVudHJpZXNJbmRleCwgMCwgZW50cnkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZW50cmllc0luZGV4ID09PSBzbGljZUluZGV4KSBlbnRyaWVzLnB1c2goZW50cnkpO1xuICAgIH1cbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2sgLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgfVxuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5rZXlzYCBtZXRob2RcbiAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdrZXlzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ3ZhbHVlcycpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2RcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdlbnRyaWVzJyk7XG4gIH1cbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxucmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCBJVEVSQVRPUiwgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLmVudHJpZXMpO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHNlYXJjaHBhcmFtcy1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbnJlZGVmaW5lKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBlbnRyeTtcbiAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICBlbnRyeSA9IGVudHJpZXNbaW5kZXgrK107XG4gICAgcmVzdWx0LnB1c2goc2VyaWFsaXplKGVudHJ5LmtleSkgKyAnPScgKyBzZXJpYWxpemUoZW50cnkudmFsdWUpKTtcbiAgfSByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuc2V0VG9TdHJpbmdUYWcoVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IsIFVSTF9TRUFSQ0hfUEFSQU1TKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiAhVVNFX05BVElWRV9VUkwgfSwge1xuICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yXG59KTtcblxuLy8gV3JhcCBgZmV0Y2hgIGZvciBjb3JyZWN0IHdvcmsgd2l0aCBwb2x5ZmlsbGVkIGBVUkxTZWFyY2hQYXJhbXNgXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc0XG5pZiAoIVVTRV9OQVRJVkVfVVJMICYmIHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgSGVhZGVycyA9PSAnZnVuY3Rpb24nKSB7XG4gICQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgdmFyIGFyZ3MgPSBbaW5wdXRdO1xuICAgICAgdmFyIGluaXQsIGJvZHksIGhlYWRlcnM7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgaW5pdCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGluaXQpKSB7XG4gICAgICAgICAgYm9keSA9IGluaXQuYm9keTtcbiAgICAgICAgICBpZiAoY2xhc3NvZihib2R5KSA9PT0gVVJMX1NFQVJDSF9QQVJBTVMpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBpbml0LmhlYWRlcnMgPyBuZXcgSGVhZGVycyhpbml0LmhlYWRlcnMpIDogbmV3IEhlYWRlcnMoKTtcbiAgICAgICAgICAgIGlmICghaGVhZGVycy5oYXMoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXQgPSBjcmVhdGUoaW5pdCwge1xuICAgICAgICAgICAgICBib2R5OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgU3RyaW5nKGJvZHkpKSxcbiAgICAgICAgICAgICAgaGVhZGVyczogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGhlYWRlcnMpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5wdXNoKGluaXQpO1xuICAgICAgfSByZXR1cm4gJGZldGNoLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLFxuICBnZXRTdGF0ZTogZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0KTtcbiAgaWYgKHR5cGVvZiBpdGVyYXRvck1ldGhvZCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xuICB9IHJldHVybiBhbk9iamVjdChpdGVyYXRvck1ldGhvZC5jYWxsKGl0KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgc3VwcG9ydCA9IHtcbiAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgYmxvYjpcbiAgICAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJlxuICAgICdCbG9iJyBpbiBzZWxmICYmXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG59XG5cbmZ1bmN0aW9uIGlzRGF0YVZpZXcob2JqKSB7XG4gIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxufVxuXG5pZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgXVxuXG4gIHZhciBpc0FycmF5QnVmZmVyVmlldyA9XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3IHx8XG4gICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICB9XG4gIGlmICgvW15hLXowLTlcXC0jJCUmJyorLl5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICB9XG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGl0ZW1zLnB1c2godmFsdWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbn1cblxuZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJylcbn1cblxuZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gIGlmIChidWYuc2xpY2UpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gIH0gZWxzZSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICB9XG59XG5cbmZ1bmN0aW9uIEJvZHkoKSB7XG4gIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgIGlmICghYm9keSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbFxuICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gIH1cbiAgdGhpcy5faW5pdEJvZHkoYm9keSlcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gZm9ybVxufVxuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgaWYgKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICB9XG4gIH0pXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbkJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzXG4gIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snXG4gIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbn1cblxuQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgIHVybDogdGhpcy51cmxcbiAgfSlcbn1cblxuUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbnZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG5SZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbn1cblxuZXhwb3J0IHZhciBET01FeGNlcHRpb24gPSBzZWxmLkRPTUV4Y2VwdGlvblxudHJ5IHtcbiAgbmV3IERPTUV4Y2VwdGlvbigpXG59IGNhdGNoIChlcnIpIHtcbiAgRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24obWVzc2FnZSwgbmFtZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSlcbiAgICB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2tcbiAgfVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpXG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBET01FeGNlcHRpb25cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsICYmIHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgfVxuXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICBmdW5jdGlvbiBhYm9ydFhocigpIHtcbiAgICAgIHhoci5hYm9ydCgpXG4gICAgfVxuXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICB9XG4gICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgfVxuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICB9XG5cbiAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgfVxuXG4gICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgIH0pXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRE9ORSAoc3VjY2VzcyBvciBmYWlsdXJlKVxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgfSlcbn1cblxuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG5cbmlmICghc2VsZi5mZXRjaCkge1xuICBzZWxmLmZldGNoID0gZmV0Y2hcbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxufVxuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxudmFyIGl0ZXJhdGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZm4sIHRoYXQsIEFTX0VOVFJJRVMsIElTX0lURVJBVE9SKSB7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChmbiwgdGhhdCwgQVNfRU5UUklFUyA/IDIgOiAxKTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgaXRlcmFibGUnKTtcbiAgICAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9yc1xuICAgIGlmIChpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlckZuKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IEFTX0VOVFJJRVNcbiAgICAgICAgICA/IGJvdW5kRnVuY3Rpb24oYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pXG4gICAgICAgICAgOiBib3VuZEZ1bmN0aW9uKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpO1xuICB9XG5cbiAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgcmVzdWx0ID0gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgYm91bmRGdW5jdGlvbiwgc3RlcC52YWx1ZSwgQVNfRU5UUklFUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuXG5pdGVyYXRlLnN0b3AgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIHJlc3VsdCk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG5cbnZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChNdXRhdGlvbk9ic2VydmVyICYmICFJU19JT1MpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIHRoZW4gPSBwcm9taXNlLnRoZW47XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbi5jYWxsKHByb21pc2UsIGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1ZXVlTWljcm90YXNrIHx8IGZ1bmN0aW9uIChmbikge1xuICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gIGlmICghaGVhZCkge1xuICAgIGhlYWQgPSB0YXNrO1xuICAgIG5vdGlmeSgpO1xuICB9IGxhc3QgPSB0YXNrO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgdmFyIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS87XG4gIHZhciByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZIHx8IHN0aWNreUhlbHBlcnMuQlJPS0VOX0NBUkVUO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRCB8fCBVTlNVUFBPUlRFRF9ZO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcbiAgICB2YXIgc3RpY2t5ID0gVU5TVVBQT1JURURfWSAmJiByZS5zdGlja3k7XG4gICAgdmFyIGZsYWdzID0gcmVnZXhwRmxhZ3MuY2FsbChyZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IGZsYWdzLnJlcGxhY2UoJ3knLCAnJyk7XG4gICAgICBpZiAoZmxhZ3MuaW5kZXhPZignZycpID09PSAtMSkge1xuICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICB9XG5cbiAgICAgIHN0ckNvcHkgPSBTdHJpbmcoc3RyKS5zbGljZShyZS5sYXN0SW5kZXgpO1xuICAgICAgLy8gU3VwcG9ydCBhbmNob3JlZCBzdGlja3kgYmVoYXZpb3IuXG4gICAgICBpZiAocmUubGFzdEluZGV4ID4gMCAmJiAoIXJlLm11bHRpbGluZSB8fCByZS5tdWx0aWxpbmUgJiYgc3RyW3JlLmxhc3RJbmRleCAtIDFdICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwoc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gbWF0Y2guaW5wdXQuc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IC8uLy5leGVjICE9PSBleGVjIH0sIHtcbiAgZXhlYzogZXhlY1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL2ZhaWxzJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yLFxuLy8gc28gd2UgdXNlIGFuIGludGVybWVkaWF0ZSBmdW5jdGlvbi5cbmZ1bmN0aW9uIFJFKHMsIGYpIHtcbiAgcmV0dXJuIFJlZ0V4cChzLCBmKTtcbn1cblxuZXhwb3J0cy5VTlNVUFBPUlRFRF9ZID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxuICB2YXIgcmUgPSBSRSgnYScsICd5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdhYmNkJykgIT0gbnVsbDtcbn0pO1xuXG5leHBvcnRzLkJST0tFTl9DQVJFVCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9IFJFKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ21hdGNoJywgMSwgZnVuY3Rpb24gKE1BVENILCBuYXRpdmVNYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBtYXRjaGVyID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gbWF0Y2hlciAhPT0gdW5kZWZpbmVkID8gbWF0Y2hlci5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNYXRjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuXG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuXG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbi8vIElFIDw9IDExIHJlcGxhY2VzICQwIHdpdGggdGhlIHdob2xlIG1hdGNoLCBhcyBpZiBpdCB3YXMgJCZcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYwMjQ2NjYvZ2V0dGluZy1pZS10by1yZXBsYWNlLWEtcmVnZXgtd2l0aC10aGUtbGl0ZXJhbC1zdHJpbmctMFxudmFyIFJFUExBQ0VfS0VFUFNfJDAgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ2EnLnJlcGxhY2UoLy4vLCAnJDAnKSA9PT0gJyQwJztcbn0pKCk7XG5cbnZhciBSRVBMQUNFID0gd2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG4vLyBTYWZhcmkgPD0gMTMuMC4zKD8pIHN1YnN0aXR1dGVzIG50aCBjYXB0dXJlIHdoZXJlIG4+bSB3aXRoIGFuIGVtcHR5IHN0cmluZ1xudmFyIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKC8uL1tSRVBMQUNFXSkge1xuICAgIHJldHVybiAvLi9bUkVQTEFDRV0oJ2EnLCAnJDAnKSA9PT0gJyc7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSkoKTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMsIHNoYW0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhKFxuICAgICAgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgJiZcbiAgICAgIFJFUExBQ0VfS0VFUFNfJDAgJiZcbiAgICAgICFSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgICkpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSwge1xuICAgICAgUkVQTEFDRV9LRUVQU18kMDogUkVQTEFDRV9LRUVQU18kMCxcbiAgICAgIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFOiBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgIH0pO1xuICAgIHZhciBzdHJpbmdNZXRob2QgPSBtZXRob2RzWzBdO1xuICAgIHZhciByZWdleE1ldGhvZCA9IG1ldGhvZHNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmluZ01ldGhvZCk7XG4gICAgcmVkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByZWdleE1ldGhvZC5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cblxuICBpZiAoc2hhbSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cC5wcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG5cbi8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL2NsYXNzb2YtcmF3Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vcmVnZXhwLWV4ZWMnKTtcblxuLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuXG4gIHJldHVybiByZWdleHBFeGVjLmNhbGwoUiwgUyk7XG59O1xuXG4iLCJleHBvcnQgYXN5bmMgZnVuY3Rpb24gc3VibWl0UGFzc3dvcmQoKSB7XG4gICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICBjb250ZXh0Lm9sZFBhc3N3b3JkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29sZFBhc3N3b3JkJykudmFsdWU7XG4gICAgY29udGV4dC5uZXdQYXNzd29yZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXdQYXNzd29yZCcpLnZhbHVlO1xuICAgIGNvbnRleHQubmV3UGFzc3dvcmRSZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXdQYXNzd29yZFJlJykudmFsdWU7XG5cbiAgICBsZXQgcmVzcCA9IGF3YWl0IGZldGNoKCcvdXBkYXRlX3Bhc3N3b3JkJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9LFxuXHRjYWNoZTogJ25vLXN0b3JlJyxcblx0Y3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGNvbnRleHQpXG4gICAgfSlcblxuICAgIHJldHVybiBhd2FpdCByZXNwLmpzb24oKTtcbn1cbiIsImltcG9ydCAqIGFzIHV0aWxpdHkgZnJvbSAgJy4vdXRpbGl0eS5qcyc7XG5pbXBvcnQgKiBhcyBhYSBmcm9tICcuL2FjY291bnRfYWpheC5qcyc7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nob3dQYXNzd29yZCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgcHdkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ld1Bhc3N3b3JkJyk7XG4gICAgICAgIGxldCBwd2RNYXRjaCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXdQYXNzd29yZFJlJyk7XG4gICAgICAgIGxldCBvbGRQd2QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb2xkUGFzc3dvcmQnKTtcblxuICAgICAgICBpZiAocHdkLmdldEF0dHJpYnV0ZSgndHlwZScpID09PSAncGFzc3dvcmQnKSB7XG4gICAgICAgICAgICBvbGRQd2Quc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICAgICAgICAgIHB3ZC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICAgICAgICAgICAgcHdkTWF0Y2guc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICAgICAgICAgIHRoaXMuaW5uZXJUZXh0ID0gJ0hpZGUgcGFzc3dvcmQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2xkUHdkLnNldEF0dHJpYnV0ZSgndHlwZScsICdwYXNzd29yZCcpO1xuICAgICAgICAgICAgcHdkLnNldEF0dHJpYnV0ZSgndHlwZScsICdwYXNzd29yZCcpO1xuICAgICAgICAgICAgcHdkTWF0Y2guc2V0QXR0cmlidXRlKCd0eXBlJywgJ3Bhc3N3b3JkJyk7XG4gICAgICAgICAgICB0aGlzLmlubmVyVGV4dCA9ICdTaG93IHBhc3N3b3JkJztcbiAgICAgICAgfVxuXG4gICAgfSlcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJtaXROZXdQYXNzd29yZCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHZhbGlkUGFzc3dvcmQodHJ1ZSkpIHVwZGF0ZVBhc3N3b3JkKCk7XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3UGFzc3dvcmQnKS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcblx0dmFsaWRQYXNzd29yZCgpXG4gICAgfSk7XG4gICAgXG59KVxuZnVuY3Rpb24gc2hvd1Bhc3N3b3JkRm9ybSgpIHtcbiAgICBsZXQgcGFzc3dvcmRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhbmdlUGFzc3dvcmRCdG5EaXYnKTtcbiAgICBsZXQgcGFzc3dvcmRGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bhc3N3b3JkRm9ybUNvbnRhaW5lcicpO1xuXG4gICAgcGFzc3dvcmRCdG4uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgcGFzc3dvcmRCdG4uY2xhc3NMaXN0LnJlbW92ZSgnc2hvd24nKTtcblxuICAgIHBhc3N3b3JkRm9ybS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICBwYXNzd29yZEZvcm0uY2xhc3NMaXN0LmFkZCgnc2hvd24nKTtcbn1cbmZ1bmN0aW9uIGhpZGVQYXNzd29yZEZvcm0oKSB7XG4gICAgbGV0IHBhc3N3b3JkQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYW5nZVBhc3N3b3JkQnRuRGl2Jyk7XG4gICAgbGV0IHBhc3N3b3JkRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXNzd29yZEZvcm1Db250YWluZXInKTtcblxuICAgIHBhc3N3b3JkRm9ybS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93bicpO1xuICAgIHBhc3N3b3JkRm9ybS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICBwYXNzd29yZEJ0bi5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XG4gICAgcGFzc3dvcmRCdG4uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG5cbn1cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBhc3N3b3JkKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJtaXROZXdQYXNzd29yZCcpLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgdXRpbGl0eS5zaG93U3Bpbm5lcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VibWl0QnRuRGl2JykpO1xuICAgICAgICBsZXQgY29udGV4dCA9IGF3YWl0IGFhLnN1Ym1pdFBhc3N3b3JkKCk7XG5cbiAgICAgICAgdXRpbGl0eS5oaWRlRWxlbWVudHMoJCgnLmNoYW5nZVBhc3N3b3JkQWxlcnQnKSk7XG4gICAgICAgIC8vY2hlY2sgaWYgc2VydmVyIGZvdW5kIGFueSBpc3N1ZXMgd2l0aCBwYXNzd29yZFxuICAgICAgICBpbnZhbGlkUGFzc3dvcmRTZXJ2ZXIoY29udGV4dCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgdXRpbGl0eS5oaWRlRWxlbWVudHMoJCgnLmNoYW5nZVBhc3N3b3JkQWxlcnQnKSk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbGVydEVycm9yJykuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfVxuICAgIHV0aWxpdHkucmVtb3ZlU3Bpbm5lcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VibWl0QnRuRGl2JykpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJtaXROZXdQYXNzd29yZCcpLmRpc2FibGVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVJlZ2V4VmFsaWRhdGlvbk1hcmtzKGZpZWxkLCBhcnIsIHN1Ym1pdCkge1xuICAgIGxldCB2YWxpZFBhc3N3b3JkID0gdHJ1ZTtcbiAgICBhcnIuZm9yRWFjaCh2YWwgPT4ge1xuICAgICAgICBpZiAoZmllbGQudmFsdWUubWF0Y2godmFsLnJlZ2V4KSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWwuZWxlbWVudHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgdmFsLmVsZW1lbnRzW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ3ZhbCcsICdpbnZhbGlkJywgJ2ludmFsQmxhbmsnKTtcbiAgICAgICAgICAgIHZhbGlkUGFzc3dvcmQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKHN1Ym1pdClcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbC5lbGVtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgdmFsLmVsZW1lbnRzW2ldLmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQnKTtcblxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsLmVsZW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICB2YWwuZWxlbWVudHNbaV0uY2xhc3NMaXN0LmFkZCgnaW52YWxCbGFuaycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWwuZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWwuZWxlbWVudHNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnaW52YWxCbGFuaycsICdpbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgdmFsLmVsZW1lbnRzW2ldLmNsYXNzTGlzdC5hZGQoJ3ZhbCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIXZhbGlkUGFzc3dvcmQgJiYgc3VibWl0KSAkKCcjbmV3UGFzc3dvcmQnKVswXS5jbGFzc0xpc3QuYWRkKCd1c2EtaW5wdXQtLWVycm9yJyk7XG4gICAgZWxzZSBpZiAodmFsaWRQYXNzd29yZCkgJCgnI25ld1Bhc3N3b3JkJylbMF0uY2xhc3NMaXN0LnJlbW92ZSgndXNhLWlucHV0LS1lcnJvcicpO1xuXG4gICAgcmV0dXJuIHZhbGlkUGFzc3dvcmQ7XG59XG5mdW5jdGlvbiB1cGRhdGVMZW5ndGhWYWxpZGF0aW9uTWFyayhmaWVsZCwgcmVxLCBzdWJtaXQpIHtcbiAgICBsZXQgdmFsaWRQYXNzd29yZCA9IHRydWU7XG4gICAgaWYgKHN1Ym1pdCl7XG5cdHV0aWxpdHkuY2xlYXJJbm5lclRleHQoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncGFzc3dvcmRFcnJvcicpKTtcbiAgICB9XG5cdFxuICAgIGlmIChmaWVsZC52YWx1ZS5sZW5ndGggPCByZXEubWluTGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVxLmVsZW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgcmVxLmVsZW1lbnRzW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ3ZhbCcsICdpbnZhbGlkJywgJ2ludmFsQmxhbmsnKTtcbiAgICAgICAgdmFsaWRQYXNzd29yZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzdWJtaXQpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcS5lbGVtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICByZXEuZWxlbWVudHNbaV0uY2xhc3NMaXN0LmFkZCgnaW52YWxpZCcpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcS5lbGVtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICByZXEuZWxlbWVudHNbaV0uY2xhc3NMaXN0LmFkZCgnaW52YWxCbGFuaycpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXEuZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlcS5lbGVtZW50c1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdpbnZhbEJsYW5rJywgJ2ludmFsaWQnKTtcbiAgICAgICAgICAgIHJlcS5lbGVtZW50c1tpXS5jbGFzc0xpc3QuYWRkKCd2YWwnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWxpZFBhc3N3b3JkO1xufVxuLyogbmFtZTogdmFsaWRQYXNzd29yZFxuICAgcHJlY29uZGl0aW9uczogdXNlciBoYXMgY2xpY2tlZCBzdWJtaXQgb24gY2hhbmdlIHBhc3N3b3JkIGZvcm0sIG9yIGp1c3QgZW50ZXJlZCBpbnB1dFxuICAgICAgICAgICAgICAgICAgaW50byBOZXcgcGFzc3dvcmQgZmllbGQgICBcbiAgIHBvc3Rjb25kaXRpb25zOiBkZXRlcm1pbmUgaWYgdXNlciBoYXMgZW50ZXJlZCB2YWxpZCBuZXcgcGFzc3dvcmRcbiAgIGRlc2NyaXB0aW9uOlxuKi9cbmZ1bmN0aW9uIHZhbGlkUGFzc3dvcmQoc3VibWl0ID0gZmFsc2UpIHtcbiAgICB2YXIgbmV3UGFzc3dvcmQgPSAkKCcjbmV3UGFzc3dvcmQnKVswXTtcbiAgICB2YXIgbmV3UGFzc3dvcmRSZSA9ICQoJyNuZXdQYXNzd29yZFJlJylbMF07XG5cbiAgICBsZXQgbG93ZXJDYXNlID0gL1thLXpdL2c7XG4gICAgbGV0IHVwcGVyQ2FzZSA9IC9bQS1aXS9nO1xuICAgIGxldCBudW1iZXJzID0gL1swLTldL2c7XG4gICAgbGV0IHNwZWNpYWwgPSAvXFxXfF8vZztcbiAgICBsZXQgbWluTGVuZ3RoID0gODtcblxuICAgIGxldCB2YWxpZFBhc3N3b3JkID0gdXBkYXRlUmVnZXhWYWxpZGF0aW9uTWFya3MobmV3UGFzc3dvcmQsIFtcbiAgICAgICAgeyByZWdleDogbG93ZXJDYXNlLCBlbGVtZW50czogJCgnLmxvd2VyY2FzZVJlcScpIH0sXG4gICAgICAgIHsgcmVnZXg6IHVwcGVyQ2FzZSwgZWxlbWVudHM6ICQoJy51cHBlcmNhc2VSZXEnKSB9LFxuICAgICAgICB7IHJlZ2V4OiBudW1iZXJzLCBlbGVtZW50czogJCgnLm51bWJlclJlcScpIH0sXG4gICAgICAgIHsgcmVnZXg6IHNwZWNpYWwsIGVsZW1lbnRzOiAkKCcuc3BlY2lhbFJlcScpIH1cbiAgICBdLCBzdWJtaXQpO1xuXG4gICAgdmFsaWRQYXNzd29yZCA9IHVwZGF0ZUxlbmd0aFZhbGlkYXRpb25NYXJrKG5ld1Bhc3N3b3JkLCB7XG4gICAgICAgIG1pbkxlbmd0aDogbWluTGVuZ3RoLFxuICAgICAgICBlbGVtZW50czogJCgnLm1pbkNoYXJSZXEnKVxuICAgIH0sIHN1Ym1pdCkgJiYgdmFsaWRQYXNzd29yZDtcblxuICAgIGlmIChzdWJtaXQgJiYgdmFsaWRQYXNzd29yZCAmJiBuZXdQYXNzd29yZC52YWx1ZSAhPT0gbmV3UGFzc3dvcmRSZS52YWx1ZSkge1xuICAgICAgICAkKCcjbmV3UGFzc3dvcmRSZUVycm9yJylbMF0uaW5uZXJUZXh0ID0gJ1Bhc3N3b3JkIHJlLWVudHJ5IG1pc21hdGNoJztcbiAgICAgICAgJCgnI25ld1Bhc3N3b3JkUmVFcnJvcicpWzBdLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBuZXdQYXNzd29yZFJlLmNsYXNzTGlzdC5hZGQoJ3VzYS1pbnB1dC0tZXJyb3InKTtcbiAgICAgICAgdmFsaWRQYXNzd29yZCA9IGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbmV3UGFzc3dvcmRSZS5jbGFzc0xpc3QucmVtb3ZlKCd1c2EtaW5wdXQtLWVycm9yJyk7XG4gICAgICAgICQoJyNuZXdQYXNzd29yZFJlRXJyb3InKVswXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB2YWxpZFBhc3N3b3JkID0gdmFsaWRQYXNzd29yZCAmJiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZFBhc3N3b3JkO1xufVxuXG4vKiBuYW1lOiBpbnZhbGlkUGFzc3dvcmRTZXJ2ZXJcbiAgIHByZWNvbmRpdGlvbnM6IGFqYXggcmVxIHdhcyBtYWRlIHRvIHNlcnZlci4gU2VydmVyIGRldGVybWluZWQgc29tZXRoaW5nXG4gICAgICAgICAgICAgICAgICB0aGUgdXNlciBzZW50IHdhcyBpbnZhbGlkLlxuICAgcG9zdGNvbmRpdGlvbnM6IHVzZXIgaXMgbm90aWZpZWQgb2YgcmVhc29uIHNlcnZlciByZWplY3RlZFxuICAgZGVzY3JpcHRpb246IHRoaXMgbWV0aG9kIHNob3VsZCByYXJlbHkgZXZlciBiZSBjYWxsZWQuIE9ubHkgdHdvIGNhc2VzIHdoZW4gdGhpc1xuICAgICAgICAgICAgICAgIG1ldGhvZCBzaG91bGQgYWN0dWFsbHkgcnVuLiAxLiB1c2VyIGVudGVycyB3cm9uZyBwYXNzd29yZCBhcyBcIk9sZFxuXHRcdHBhc3N3b3JkXCIgZmllbGQuIDIuIGlmIHVzZXIgdGFtcGVycyB3aXRoIGNsaWVudCBzaWRlXG5cdFx0dmFsaWRhdGlvbiBjaGVja2luZyBhbmQgYnlwYXNzZXMgdmFsaWRhdGUgcGFzc3dvcmQgaW5cblx0XHRhY2NvdW50LmpzICh0aGlzIGZpbGUpLiBTZXJ2ZXIgcnVucyBhZGRpdGlvbmFsIHZhbGlkYXRpb25cblx0XHR0byBjYXRjaCB0aGlzLCBpbiB3aGljaCBjYXNlIHRoaXMgbWV0aG9kIHdpbGwgcnVuLlxuKi9cbmZ1bmN0aW9uIGludmFsaWRQYXNzd29yZFNlcnZlcihjb250ZXh0KSB7XG4gICAgaWYgKGNvbnRleHQucGFzc3dvcmRVcGRhdGVkKSB7IC8vcHdvcmQgdXBkYXRlZCBpbiBkYlxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWxlcnRTdWNjZXNzJykuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXNzd29yZEZvcm1Db250YWluZXInKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbiAgICBlbHNlIHsgLy9maWd1cmUgb3V0IHdoaWNoIG1ldGhvZCB0byBnaXZlIHVzZXIgYW5kIHdoZXJlIG9uIHNjcmVlbiB0byBwbGFjZVxuICAgICAgICAvL25ldyBwYXNzd29yZCBkb2Vzbid0IG1lZXQgY3JpdGVyaWFcbiAgICAgICAgLy8oOCsgY2hhciwgMSsgdXBwZXJjYXNlLCAxKyBsb3dlcmNhc2UsIDErIG51bWJlciwgMSsgc3BlY2lhbCBjaGFyKVxuICAgICAgICBpZiAoY29udGV4dC5pbnZhbGlkTmV3UGFzc3dvcmQpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbGVydEluZm8nKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXdQYXNzd29yZEVycm9yJykuaW5uZXJUZXh0ID0gY29udGV4dC5pbnZhbGlkTWVzc2FnZTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXdQYXNzd29yZEVycm9yJykuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIH1cbiAgICAgICAgLy9uZXcgcGFzc3dvcmQgcmUtZW50cnkgbWlzbWF0Y2hcbiAgICAgICAgZWxzZSBpZiAoY29udGV4dC5pbnZhbGlkTmV3UGFzc3dvcmRSZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FsZXJ0V2FybmluZycpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ld1Bhc3N3b3JkUmVFcnJvcicpLmlubmVyVGV4dCA9IGNvbnRleHQuaW52YWxpZE1lc3NhZ2U7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3UGFzc3dvcmRSZUVycm9yJykuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIH1cbiAgICAgICAgLy9pbmNvcmVjdCBvbGQgcGFzc3dvcmQgd2FzIHByb3ZpZGVkIGJ5IHVzZXJcbiAgICAgICAgZWxzZSBpZiAoY29udGV4dC5pbnZhbGlkT2xkUGFzc3dvcmQpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbGVydEluZm8nKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvbGRQYXNzd29yZEVycm9yJykuaW5uZXJUZXh0ID0gY29udGV4dC5pbnZhbGlkTWVzc2FnZTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvbGRQYXNzd29yZEVycm9yJykuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vc2VydmVyIGVycm9yIG9jY3VycmVkXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWxlcnRFcnJvcicpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bhc3N3b3JkRm9ybUNvbnRhaW5lcicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=